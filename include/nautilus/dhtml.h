//---------------------------------------------------------------------------//
//Version:            4.0
//Copyright:          Dr John Maddock 1998
//Description:        IE4 Dynamic HTML Object Model
//Author:             John Maddock
//Company:
//
//Header Type:        Abstract type descriptions.
//
//File:               dhtml.h
//
//Type Library:       MSHTML
//Type Description:   Microsoft HTML Object Library
//
//GUID:               {3050F1C5-98B5-11CF-BB82-00AA00BDCE0B}
//System:             WIN32
//Version:            4.0
//
//Code generated by ProxyWiz 1.0
//ProxyWiz Copyright Dr John Maddock 1997, all rights reserved.
//
//---------------------------------------------------------------------------


#ifndef __cplusplus
#include <windows.h>
#include <olectl.h>
#else
#include <owl/pch.h>
#include <owl/oledialg.h>
#endif

#if !defined(__DHTML_H)
#define __DHTML_H

#include <pshpack8.h>


#ifdef __cplusplus
#if !defined(__push_arg)
#define __push_arg

class SafeArrayBase
{
public:
   virtual VARTYPE type() = 0;
   virtual void copy(SAFEARRAY** pparray) = 0;
   virtual SAFEARRAY** ref() = 0;};

template <class T>
class SafeArray;

template <class T>
struct VarType
{
};

struct VarType<short>
{
   static VARTYPE Val(){return VT_I2;}
};

struct VarType<long>
{
   static VARTYPE Val(){return VT_I4;}
};

struct VarType<float>
{
   static VARTYPE Val(){return VT_R4;}
};

struct VarType<double>
{
   static VARTYPE Val(){return VT_R8;}
};

struct VarType<CY>
{
   static VARTYPE Val(){return VT_CY;}
};

struct VarType<TAutoDate>
{
   static VARTYPE Val(){return VT_DATE;}
};

struct VarType<BSTR>
{
   static VARTYPE Val(){return VT_BSTR;}
};

struct VarType<TAutoString>
{
   static VARTYPE Val(){return VT_BSTR;}
};

struct VarType<IDispatch*>
{
   static VARTYPE Val(){return VT_DISPATCH;}
};

struct VarType<TBool>
{
   static VARTYPE Val(){return VT_BOOL;}
};

struct VarType<TAutoBool>
{
   static VARTYPE Val(){return VT_BOOL;}
};

struct VarType<IUnknown*>
{
   static VARTYPE Val(){return VT_UNKNOWN;}
};

struct VarType<signed char>
{
   static VARTYPE Val(){return VT_I1;}
};

struct VarType<unsigned char>
{
   static VARTYPE Val(){return VT_UI1;}
};

struct VarType<unsigned short>
{
   static VARTYPE Val(){return VT_UI2;}
};

struct VarType<unsigned long>
{
   static VARTYPE Val(){return VT_UI4;}
};

struct VarType<int>
{
   static VARTYPE Val(){return VT_INT;}
};

struct VarType<unsigned int>
{
   static VARTYPE Val(){return VT_UINT;}
};

struct VarType<TAutoVal>
{
   static VARTYPE Val(){return VT_VARIANT;}
};

template <class T>
inline void push_arg(TAutoVal& val, T arg)
{
   val = arg;
}

inline void push_arg(TAutoVal& val, const TAutoString& arg)
{
   val = const_cast<TAutoString&>(arg);
}

inline void push_arg(TAutoVal& val, SafeArrayBase& arg)
{
   ((VARIANT*)(&val))->vt = arg.type();
   arg.copy(&((VARIANT*)(&val))->parray);
}

inline void push_arg(TAutoVal& val, SafeArrayBase* arg)
{
   ((VARIANT*)(&val))->vt = arg->type() | (VARTYPE)VT_BYREF;
   ((VARIANT*)(&val))->pparray = arg->ref();
}

inline void push_arg(TAutoVal& val, BSTR* arg)
{
   ((VARIANT*)(&val))->vt = VT_BSTR | VT_BYREF;
   ((VARIANT*)(&val))->pbstrVal = arg;
}

inline void push_arg(TAutoVal& val, void* arg)
{
   ((VARIANT*)(&val))->vt = VT_BYREF;
   ((VARIANT*)(&val))->byref = arg;
}

inline void push_arg(TAutoVal& val, IUnknown** arg)
{
   ((VARIANT*)(&val))->vt = VT_UNKNOWN | VT_BYREF;
   ((VARIANT*)(&val))->ppunkVal = arg;
}

inline void push_arg(TAutoVal& val, IDispatch** arg)
{
   ((VARIANT*)(&val))->vt = VT_DISPATCH | VT_BYREF;
   ((VARIANT*)(&val))->ppdispVal = arg;
}

inline void push_arg(TAutoVal& val, TAutoVal* arg)
{
   if(arg)
   {
      ((VARIANT*)(&val))->vt = VT_VARIANT | VT_BYREF;
      ((VARIANT*)(&val))->pvarVal = (VARIANT*)arg;
   }
   else
      val = TNoArg();
}

inline void push_arg(TAutoVal& val, TAutoVal** arg)
{
   TXOle::Check(E_INVALIDARG);
}

template <class T>
class SafeArrayElementRef
{
private:
   long index;
   SafeArray<T>* ptr;
   SafeArrayElementRef(long i, SafeArray<T>* p)
   {
      index = i;
      ptr = p;
   }
public:
   SafeArrayElementRef(const SafeArrayElementRef& e)
   {
      index = e.index;
      ptr = e.ptr;
   }
   SafeArrayElementRef& operator=(const SafeArrayElementRef& e)
   {
      index = e.index;
      ptr = e.ptr;
      return *this;
   }
   operator TAutoVal();

   SafeArrayElementRef& operator=(const TAutoVal& val);

   SafeArrayElementRef& operator=(const T& val)
   {
      TAutoVal v;
      push_arg(v, val);
      return (*this = v);
   }
friend SafeArray<T>;
};


class SafeArrayElementRef<TAutoVal>
{private:
   long index;
   SafeArray<TAutoVal>* ptr;
   SafeArrayElementRef(long i, SafeArray<TAutoVal>* p)
   {
      index = i;
      ptr = p;
   }
public:
   SafeArrayElementRef(const SafeArrayElementRef& e)
   {      index = e.index;
      ptr = e.ptr;
   }
   SafeArrayElementRef& operator=(const SafeArrayElementRef& e)
   {
      index = e.index;
      ptr = e.ptr;
      return *this;
   }
   operator TAutoVal();

   SafeArrayElementRef& operator=(const TAutoVal& val);

friend SafeArray<TAutoVal>;
};

template <class T>class SafeArray: public SafeArrayBase
{
private:
   SAFEARRAY* ptr;

public:
   SafeArray()
   {
      ptr = 0;
   }

   SafeArray(unsigned long len)
   {
      SAFEARRAYBOUND bound;
      bound.cElements = len;
      bound.lLbound = 0;
      ptr = SafeArrayCreate(VarType<T>::Val(), 1, &bound);
      if(ptr == 0)
         throw TXOle("Unable to create SAFEARRAY structure", S_OK);
   }

   SafeArray(unsigned long len, T* values);

   SafeArray(unsigned int cDims, SAFEARRAYBOUND* bound)
   {
      ptr = SafeArrayCreate(VarType<T>::Val(), cDims, bound);
      if(ptr == 0)
         throw TXOle("Unable to create SAFEARRAY structure", S_OK);
   }

   SafeArray(const SafeArray<T>& s)
   {
      if(s.ptr)
         TXOle::Check(SafeArrayCopy(s.ptr, &ptr));
      else
         ptr = 0;
   }

   SafeArray(const SAFEARRAY* p)
   {
      TXOle::Check(SafeArrayCopy(const_cast<SAFEARRAY*>(p), &ptr));
   }

   SafeArray(const TAutoVal& Val)
   {
      if((((VARIANT*)&Val)->vt & VT_ARRAY) == 0)
         throw TXOle("Invalid VariantArg passed to SafeArray", E_INVALIDARG);
      TXOle::Check(SafeArrayCopy(((VARIANT*)&Val)->parray, &ptr));
   }

   ~SafeArray()
   {
      if(ptr)
         TXOle::Check(SafeArrayDestroy(ptr));
   }

   SafeArray<T>& operator=(const SafeArray<T>& s)
   {
      this->~SafeArray<T>();
      new (this) SafeArray<T>(s);
      return *this;
   }

   SafeArray<T>& operator=(const SAFEARRAY* p)
   {
      this->~SafeArray<T>();
      new (this) SafeArray<T>(p);
      return *this;
   }

   SafeArray<T>& operator=(const TAutoVal& Val)
   {
      this->~SafeArray<T>();
      new (this) SafeArray<T>(Val);
      return *this;
   }

   void MustBeBound()
   {
      if(ptr == 0)
         throw TXOle("Attempt to access uninitialised array", S_OK);
   }

   unsigned short Dimentions()
   {
      return ptr->cDims;
   }

   SAFEARRAYBOUND* Bound(unsigned short i)
   {
      if(i >= ptr->cDims)
         throw TXOle("Attempt to access array out of range", S_OK);
      return ptr->rgsabound + i;
   }

   TAutoVal GetValue(long FAR* indices)
   {
      MustBeBound();
      TAutoVal v;
      void* data;
      if(ptr->fFeatures & (FADF_DISPATCH | FADF_UNKNOWN | FADF_BSTR))
      {
         // we have a 4 byte value:
         TXOle::Check(SafeArrayGetElement(ptr, indices, &(((VARIANT*)&v)->punkVal)));
         ((VARIANT*)&v)->vt = (VARTYPE)((ptr->fFeatures & FADF_UNKNOWN) ? VT_UNKNOWN :
                                (ptr->fFeatures & FADF_BSTR) ? VT_BSTR :
                                (ptr->fFeatures & FADF_DISPATCH) ? VT_DISPATCH :
                                VT_VARIANT);
      }
      else if(ptr->fFeatures & FADF_VARIANT)
         TXOle::Check(SafeArrayGetElement(ptr, indices, &v));
      else
      {
         TXOle::Check(SafeArrayGetElement(ptr, indices, &(((VARIANT*)&v)->punkVal)));
         ((VARIANT*)&v)->vt = VarType<T>::Val();
      }
      return v;
   }

   void SetValue(long FAR* indices, TAutoVal v)
   {
      MustBeBound();
      // must coerce to the type we expect:
      if(ptr->fFeatures & FADF_VARIANT)
         TXOle::Check(SafeArrayPutElement(ptr, indices, (void*)&v));
      else if(ptr->fFeatures & (FADF_DISPATCH | FADF_UNKNOWN | FADF_BSTR))
      {
         // put a pointer directly:
         VARTYPE vt = ((VARIANT*)&v)->vt;
         if((vt != VT_DISPATCH) && (vt != VT_UNKNOWN) && (vt != VT_BSTR) )
            TXOle::Check(E_INVALIDARG);
         TXOle::Check(SafeArrayPutElement(ptr, indices, (void*)((VARIANT*)&v)->punkVal) );
      }
      else
      {
         TXOle::Check(VariantChangeType((VARIANT*)&v, (VARIANT*)&v, 0, VarType<T>::Val()));
         TXOle::Check(SafeArrayPutElement(ptr, indices, (void*)&((VARIANT*)&v)->punkVal) );
      }
   }

   SafeArrayElementRef<T> operator[](long i)
   {
      MustBeBound();
      return SafeArrayElementRef<T>(i, this);
   }

   operator SAFEARRAY* ()
   {
      return ptr;
   }

   operator SAFEARRAY** ()
   {
      //need to set ptr to null first:
      if(ptr)
      {
         this->~SafeArray<T>();
         new (this) SafeArray<T>();
      }
      return &ptr;
   }

   virtual VARTYPE type()
   {
      return VarType<T>::Val() | (VARTYPE)VT_ARRAY;
   }

   virtual void copy(SAFEARRAY** pparray)
   {
      MustBeBound();
      SafeArrayCopy(ptr, pparray);
   }

   virtual SAFEARRAY** ref()
   {
      return &ptr;
   }

   friend SafeArray<T>;
   friend void push_arg(TAutoVal& val, SafeArrayBase& arg);
};

template <class T>
SafeArray<T>::SafeArray(unsigned long len, T* values)
{
   SAFEARRAYBOUND bound;
   bound.cElements = len;
   bound.lLbound = 0;
   ptr = SafeArrayCreate(VarType<T>::Val(), 1, &bound);
   if(ptr == 0)
      throw TXOle("Unable to create SAFEARRAY structure", S_OK);
   for(unsigned long i = 0; i < len; ++i)
   {
      TAutoVal v;
      push_arg(v, *(values + i));
      SetValue((long*)&i, v);
   }
}

template <class T>
SafeArrayElementRef<T>::operator TAutoVal ()
{
   TAutoVal val;
   val = ptr->GetValue((long*)&index);
   return val;
}

template <class T>
SafeArrayElementRef<T>& SafeArrayElementRef<T>::operator=(const TAutoVal& val)
{
   ptr->SetValue((long*)&index, val);
   return *this;
}

inline SafeArrayElementRef<TAutoVal>::operator TAutoVal ()
{
   TAutoVal val;
   val = ptr->GetValue((long*)&index);
   return val;
}

inline SafeArrayElementRef<TAutoVal>& SafeArrayElementRef<TAutoVal>::operator=(const TAutoVal& val)
{
   ptr->SetValue((long*)&index, val);
   return *this;
}

#endif
#endif

#ifndef _PWCLASS
#define _PWCLASS
#endif

//------------------------------------------------------------
//Predeclaration of classes and interfaces
#ifdef __cplusplus
class IHTMLStyleSheet;
class _PWCLASS TIHTMLStyleSheetProxy;
class IHTMLElement;
class _PWCLASS TIHTMLElementProxy;
class IHTMLStyleSheetsCollection;
class _PWCLASS TIHTMLStyleSheetsCollectionProxy;
class IHTMLTxtRange;
class _PWCLASS TIHTMLTxtRangeProxy;
class IHTMLWindow2;
class _PWCLASS TIHTMLWindow2Proxy;
class IHTMLDocument2;
class _PWCLASS TIHTMLDocument2Proxy;
class IHTMLEventObj;
class _PWCLASS TIHTMLEventObjProxy;
class IHTMLElementCollection;
class _PWCLASS TIHTMLElementCollectionProxy;
class IHTMLSelectionObject;
class _PWCLASS TIHTMLSelectionObjectProxy;
class IHTMLAreasCollection;
class _PWCLASS TIHTMLAreasCollectionProxy;
class IHTMLTableSection;
class _PWCLASS TIHTMLTableSectionProxy;
class _PWCLASS TIHTMLFramesCollection2Proxy;

#else

typedef struct IHTMLStyleSheet IHTMLStyleSheet;
typedef struct IHTMLElement IHTMLElement;
typedef struct IHTMLStyleSheetsCollection IHTMLStyleSheetsCollection;
typedef struct IHTMLTxtRange IHTMLTxtRange;
typedef struct IHTMLWindow2 IHTMLWindow2;
typedef struct IHTMLDocument2 IHTMLDocument2;
typedef struct IHTMLEventObj IHTMLEventObj;
typedef struct IHTMLElementCollection IHTMLElementCollection;
typedef struct IHTMLSelectionObject IHTMLSelectionObject;
typedef struct IHTMLAreasCollection IHTMLAreasCollection;
typedef struct IHTMLTableSection IHTMLTableSection;

#endif
//Coclass: HTMLStyle// {3050F285-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLStyle;

//Coclass: HTMLRuleStyle
// {3050F3D0-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLRuleStyle;

//Coclass: HTMLFiltersCollection
// {3050F3EF-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLFiltersCollection;

//Coclass: HTMLStyleSheetRule
// {3050F3CE-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLStyleSheetRule;

//Coclass: HTMLStyleSheetRulesCollection
// {3050F3CD-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLStyleSheetRulesCollection;

//Coclass: HTMLStyleSheet
// {3050F2E4-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLStyleSheet;

//Coclass: HTMLStyleSheetsCollection
// {3050F37F-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLStyleSheetsCollection;

typedef IDispatch DispIHTMLLinkElement;

//Coclass: HTMLLinkElement
// {3050F277-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLLinkElement;

typedef IDispatch DispIHTMLFormElement;

//Coclass: HTMLFormElement
// {3050F251-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLFormElement;

typedef IDispatch DispIHTMLTextElement;

//Coclass: HTMLTextElement
// {3050F26A-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTextElement;

typedef IDispatch DispIHTMLImgElement;

//Coclass: HTMLImg
// {3050F241-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLImg;

typedef IDispatch DispIHTMLInputImage;

//Coclass: HTMLInputImage
// {3050F2C4-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLInputImage;

//Coclass: HTMLImageElementFactory
// {3050F38F-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLImageElementFactory;

typedef IDispatch DispIHTMLBodyElement;

//Coclass: HTMLBody
// {3050F24A-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLBody;

typedef IDispatch DispIHTMLFontElement;

//Coclass: HTMLFontElement
// {3050F27B-98B5-11CF-BB82-00AA00BDCE0B}typedef IUnknown HTMLFontElement;

typedef IDispatch DispIHTMLAnchorElement;

//Coclass: HTMLAnchorElement
// {3050F248-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLAnchorElement;

typedef IDispatch DispIHTMLLabelElement;

//Coclass: HTMLLabelElement
// {3050F32B-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLLabelElement;

typedef IDispatch DispIHTMLListElement;

//Coclass: HTMLListElement
// {3050F272-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLListElement;

typedef IDispatch DispIHTMLUListElement;

//Coclass: HTMLUListElement
// {3050F269-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLUListElement;

typedef IDispatch DispIHTMLOListElement;

//Coclass: HTMLOListElement
// {3050F270-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLOListElement;

typedef IDispatch DispIHTMLLIElement;

//Coclass: HTMLLIElement
// {3050F273-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLLIElement;

typedef IDispatch DispIHTMLBlockElement;

//Coclass: HTMLBlockElement
// {3050F281-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLBlockElement;

typedef IDispatch DispIHTMLDivElement;

//Coclass: HTMLDivElement
// {3050F27E-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLDivElement;

typedef IDispatch DispIHTMLDDElement;

//Coclass: HTMLDDElement
// {3050F27F-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLDDElement;

typedef IDispatch DispIHTMLDTElement;

//Coclass: HTMLDTElement
// {3050F27C-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLDTElement;

typedef IDispatch DispIHTMLBRElement;

//Coclass: HTMLBRElement
// {3050F280-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLBRElement;

typedef IDispatch DispIHTMLDListElement;

//Coclass: HTMLDListElement
// {3050F27D-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLDListElement;

typedef IDispatch DispIHTMLHRElement;

//Coclass: HTMLHRElement
// {3050F252-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLHRElement;

typedef IDispatch DispIHTMLParaElement;

//Coclass: HTMLParaElement
// {3050F26F-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLParaElement;

typedef IDispatch DispIHTMLHeaderElement;

//Coclass: HTMLHeaderElement
// {3050F27A-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLHeaderElement;

typedef IDispatch DispIHTMLSelectElement;

//Coclass: HTMLSelectElement
// {3050F245-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLSelectElement;

typedef IDispatch DispIHTMLOptionElement;

//Coclass: HTMLOptionElement
// {3050F24D-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLOptionElement;

//Coclass: HTMLOptionElementFactory
// {3050F38D-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLOptionElementFactory;

typedef IDispatch DispIHTMLInputTextElement;

//Coclass: HTMLInputTextElement 
// {3050F2AB-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLInputTextElement;

typedef IDispatch DispIHTMLTextAreaElement;

//Coclass: HTMLTextAreaElement 
// {3050F2AC-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTextAreaElement;

typedef IDispatch DispIHTMLInputButtonElement;

//Coclass: HTMLInputButtonElement 
// {3050F2B4-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLInputButtonElement;

typedef IDispatch DispIHTMLButtonElement;

//Coclass: HTMLButtonElement 
// {3050F2C6-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLButtonElement;

typedef IDispatch DispIHTMLInputFileElement;

//Coclass: HTMLInputFileElement 
// {3050F2AE-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLInputFileElement;

typedef IDispatch DispIHTMLMarqueeElement;

//Coclass: HTMLMarqueeElement 
// {3050F2B9-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLMarqueeElement;

typedef IDispatch DispIHTMLOptionButtonElement;

//Coclass: HTMLOptionButtonElement 
// {3050F2BE-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLOptionButtonElement;

typedef IDispatch DispIHTMLTitleElement;

//Coclass: HTMLTitleElement 
// {3050F284-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTitleElement;

typedef IDispatch DispIHTMLMetaElement;

//Coclass: HTMLMetaElement 
// {3050F275-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLMetaElement;

typedef IDispatch DispIHTMLBaseElement;

//Coclass: HTMLBaseElement 
// {3050F276-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLBaseElement;

typedef IDispatch DispIHTMLIsIndexElement;

//Coclass: HTMLIsIndexElement 
// {3050F278-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLIsIndexElement;

typedef IDispatch DispIHTMLNextIdElement;

//Coclass: HTMLNextIdElement 
// {3050F279-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLNextIdElement;

typedef IDispatch DispIHTMLBaseFontElement;

//Coclass: HTMLBaseFontElement 
// {3050F282-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLBaseFontElement;

typedef IDispatch DispIHTMLUnknownElement;

//Coclass: HTMLUnknownElement 
// {3050F268-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLUnknownElement;

//Coclass: HTMLHistory 
// {FECEAAA3-8405-11CF-8BA1-00AA00476DA6}
typedef IUnknown HTMLHistory;

//Coclass: CMimeTypes 
// {3050F3FE-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown CMimeTypes;

//Coclass: CPlugins 
// {3050F3FF-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown CPlugins;

//Coclass: COpsProfile 
// {3050F402-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown COpsProfile;

//Coclass: HTMLNavigator 
// {FECEAAA6-8405-11CF-8BA1-00AA00476DA6}
typedef IUnknown HTMLNavigator;

//Coclass: HTMLLocation 
// {163BB1E1-6E00-11CF-837A-48DC04C10000}
typedef IUnknown HTMLLocation;

//Coclass: HTMLScreen 
// {3050F35D-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLScreen;

//Coclass: HTMLWindow2 
// {D48A6EC6-6A4A-11CF-94A7-444553540000}
typedef IUnknown HTMLWindow2;

//Coclass: HTMLWindowProxy 
// {3050F391-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLWindowProxy;

//Coclass: HTMLDocument 
// {25336920-03F9-11CF-8FD0-00AA00686F13}
typedef IUnknown HTMLDocument;

typedef IDispatch DispIHTMLEmbedElement;

//Coclass: HTMLEmbed 
// {3050F25D-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLEmbed;

typedef IDispatch DispIHTMLMapElement;

//Coclass: HTMLMapElement 
// {3050F271-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLMapElement;

typedef IDispatch DispIHTMLAreaElement;

//Coclass: HTMLAreaElement 
// {3050F283-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLAreaElement;

typedef IDispatch DispIHTMLTableCaption;

//Coclass: HTMLTableCaption 
// {3050F2EC-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTableCaption;

typedef IDispatch DispIHTMLCommentElement;

//Coclass: HTMLCommentElement 
// {3050F317-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLCommentElement;

typedef IDispatch DispIHTMLPhraseElement;

//Coclass: HTMLPhraseElement 
// {3050F26E-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLPhraseElement;

typedef IDispatch DispIHTMLSpanElement;

//Coclass: HTMLSpanElement 
// {3050F3F5-98B4-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLSpanElement;

typedef IDispatch DispIHTMLTable;

//Coclass: HTMLTable 
// {3050F26B-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTable;

typedef IDispatch DispIHTMLTableCol;

//Coclass: HTMLTableCol 
// {3050F26C-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTableCol;

typedef IDispatch DispIHTMLTableSection;

//Coclass: HTMLTableSection 
// {3050F2E9-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTableSection;

typedef IDispatch DispIHTMLTableRow;

//Coclass: HTMLTableRow 
// {3050F26D-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTableRow;

typedef IDispatch DispIHTMLTableCell;

//Coclass: HTMLTableCell 
// {3050F246-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLTableCell;

typedef IDispatch DispIHTMLScriptElement;

//Coclass: HTMLScriptElement 
// {3050F28C-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLScriptElement;

typedef IDispatch DispIHTMLNoShowElement;

//Coclass: HTMLNoShowElement 
// {3050F38B-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLNoShowElement;

typedef IDispatch DispIHTMLObjectElement;

//Coclass: HTMLObjectElement 
// {3050F24E-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLObjectElement;

typedef IDispatch DispIHTMLFrameBase;

//Coclass: HTMLFrameBase 
// {3050F312-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLFrameBase;

typedef IDispatch DispIHTMLFrameElement;

//Coclass: HTMLFrameElement 
// {3050F314-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLFrameElement;

typedef IDispatch DispIHTMLIFrameElement;

//Coclass: HTMLIFrame 
// {3050F316-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLIFrame;

typedef IDispatch DispIHTMLDivPosition;

//Coclass: HTMLDivPosition 
// {3050F249-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLDivPosition;

typedef IDispatch DispIHTMLFieldSetElement;

//Coclass: HTMLFieldSetElement 
// {3050F3E8-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLFieldSetElement;

typedef IDispatch DispIHTMLLegendElement;

//Coclass: HTMLLegendElement 
// {3050F3E9-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLLegendElement;

typedef IDispatch DispIHTMLSpanFlow;

//Coclass: HTMLSpanFlow 
// {3050F3E6-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLSpanFlow;

typedef IDispatch DispIHTMLFrameSetElement;

//Coclass: HTMLFrameSetSite 
// {3050F31A-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLFrameSetSite;

typedef IDispatch DispIHTMLBGsound;

//Coclass: HTMLBGsound 
// {3050F370-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLBGsound;

typedef IDispatch DispIHTMLStyleElement;

//Coclass: HTMLStyleElement 
// {3050F37D-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLStyleElement;

//Coclass: HTMLStyleFontFace 
// {3050F3D4-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLStyleFontFace;

//Coclass: HTMLDialog 
// {3050F28A-98B5-11CF-BB82-00AA00BDCE0B}
typedef IUnknown HTMLDialog;

//Coclass: OldHTMLDocument 
// {D48A6EC9-6A4A-11CF-94A7-444553540000}
typedef IUnknown OldHTMLDocument;

//Coclass: OldHTMLFormElement 
// {0D04D285-6BEC-11CF-8B97-00AA00476DA6}
typedef IUnknown OldHTMLFormElement;

typedef IDispatch DispIHTMLControlElement;

typedef IDispatch DispIHTMLTextContainer;

//------------------------------------------------------------
//Declaration of GUID's

DEFINE_GUID(IID_IHTMLStyle, 0x3050f25e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLStyle, 0x3050f285, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLRuleStyle, 0x3050f3cf, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLRuleStyle, 0x3050f3d0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFiltersCollection, 0x3050f3ee, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLFiltersCollection, 0x3050f3ef, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLStyleSheetRule, 0x3050f357, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLStyleSheetRule, 0x3050f3ce, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLStyleSheetRulesCollection, 0x3050f2e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLStyleSheetRulesCollection, 0x3050f3cd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLStyleSheet, 0x3050f2e3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLStyleSheet, 0x3050f2e4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLStyleSheetsCollection, 0x3050f37e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLStyleSheetsCollection, 0x3050f37f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLLinkElement, 0x3050f205, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLElement, 0x3050f1ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLLinkElement, 0x3050f277, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFormElement, 0x3050f1f7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLFormElement, 0x3050f251, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTextElement, 0x3050f218, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTextElement, 0x3050f26a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLImgElement, 0x3050f240, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLControlElement, 0x4598fc6, 0x866c, 0x11cf, 0xab, 0x7c, 0x0, 0xaa, 0x0, 0xc0, 0x8f, 0xcf);
DEFINE_GUID(IID_IHTMLDatabinding, 0x3050f3f2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLImg, 0x3050f241, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLInputImage, 0x3050f2c2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLInputImage, 0x3050f2c4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLImageElementFactory, 0x3050f38e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLImageElementFactory, 0x3050f38f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLBodyElement, 0x3050f1d8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTextContainer, 0x3050f230, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLBody, 0x3050f24a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFontElement, 0x3050f1d9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLFontElement, 0x3050f27b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLAnchorElement, 0x3050f1da, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLAnchorElement, 0x3050f248, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLLabelElement, 0x3050f32a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLLabelElement, 0x3050f32b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLListElement, 0x3050f20e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLListElement, 0x3050f272, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLUListElement, 0x3050f1dd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLUListElement, 0x3050f269, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLOListElement, 0x3050f1de, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLOListElement, 0x3050f270, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLLIElement, 0x3050f1e0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLLIElement, 0x3050f273, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLBlockElement, 0x3050f208, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLBlockElement, 0x3050f281, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLDivElement, 0x3050f200, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLDivElement, 0x3050f27e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLDDElement, 0x3050f1f2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLDDElement, 0x3050f27f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLDTElement, 0x3050f1f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLDTElement, 0x3050f27c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLBRElement, 0x3050f1f0, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLBRElement, 0x3050f280, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLDListElement, 0x3050f1f1, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLDListElement, 0x3050f27d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLHRElement, 0x3050f1f4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLHRElement, 0x3050f252, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLParaElement, 0x3050f1f5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLParaElement, 0x3050f26f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLHeaderElement, 0x3050f1f6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLHeaderElement, 0x3050f27a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLSelectElement, 0x3050f244, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLSelectElement, 0x3050f245, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLOptionElement, 0x3050f211, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);DEFINE_GUID(IID_CoHTMLOptionElement, 0x3050f24d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLOptionElementFactory, 0x3050f38c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLOptionElementFactory, 0x3050f38d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLInputTextElement, 0x3050f2a6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLInputTextElement, 0x3050f2ab, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTextAreaElement, 0x3050f2aa, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTextAreaElement, 0x3050f2ac, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLInputButtonElement, 0x3050f2b2, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLInputButtonElement, 0x3050f2b4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLButtonElement, 0x3050f2bb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLButtonElement, 0x3050f2c6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLInputFileElement, 0x3050f2ad, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLInputFileElement, 0x3050f2ae, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLMarqueeElement, 0x3050f2b5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLMarqueeElement, 0x3050f2b9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLOptionButtonElement, 0x3050f2bc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLOptionButtonElement, 0x3050f2be, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTitleElement, 0x3050f322, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTitleElement, 0x3050f284, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLMetaElement, 0x3050f203, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLMetaElement, 0x3050f275, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLBaseElement, 0x3050f204, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLBaseElement, 0x3050f276, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLIsIndexElement, 0x3050f206, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLIsIndexElement, 0x3050f278, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLNextIdElement, 0x3050f207, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLNextIdElement, 0x3050f279, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLBaseFontElement, 0x3050f202, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLBaseFontElement, 0x3050f282, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLUnknownElement, 0x3050f209, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLUnknownElement, 0x3050f268, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IOmHistory, 0xfeceaaa2, 0x8405, 0x11cf, 0x8b, 0xa1, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6);
DEFINE_GUID(IID_CoHTMLHistory, 0xfeceaaa3, 0x8405, 0x11cf, 0x8b, 0xa1, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6);
DEFINE_GUID(IID_IHTMLMimeTypesCollection, 0x3050f3fc, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoCMimeTypes, 0x3050f3fe, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLPluginsCollection, 0x3050f3fd, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoCPlugins, 0x3050f3ff, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLOpsProfile, 0x3050f401, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoCOpsProfile, 0x3050f402, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IOmNavigator, 0xfeceaaa5, 0x8405, 0x11cf, 0x8b, 0xa1, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6);
DEFINE_GUID(IID_CoHTMLNavigator, 0xfeceaaa6, 0x8405, 0x11cf, 0x8b, 0xa1, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6);
DEFINE_GUID(IID_IHTMLLocation, 0x163bb1e0, 0x6e00, 0x11cf, 0x83, 0x7a, 0x48, 0xdc, 0x4, 0xc1, 0x0, 0x0);
DEFINE_GUID(IID_CoHTMLLocation, 0x163bb1e1, 0x6e00, 0x11cf, 0x83, 0x7a, 0x48, 0xdc, 0x4, 0xc1, 0x0, 0x0);
DEFINE_GUID(IID_IHTMLScreen, 0x3050f35c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLScreen, 0x3050f35d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFramesCollection2, 0x332c4426, 0x26cb, 0x11d0, 0xb4, 0x83, 0x0, 0xc0, 0x4f, 0xd9, 0x1, 0x19);
DEFINE_GUID(IID_IHTMLWindow2, 0x332c4427, 0x26cb, 0x11d0, 0xb4, 0x83, 0x0, 0xc0, 0x4f, 0xd9, 0x1, 0x19);
DEFINE_GUID(IID_CoHTMLWindow2, 0xd48a6ec6, 0x6a4a, 0x11cf, 0x94, 0xa7, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);
DEFINE_GUID(IID_CoHTMLWindowProxy, 0x3050f391, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLDocument, 0x626fc520, 0xa41e, 0x11cf, 0xa7, 0x31, 0x0, 0xa0, 0xc9, 0x8, 0x26, 0x37);
DEFINE_GUID(IID_IHTMLDocument2, 0x332c4425, 0x26cb, 0x11d0, 0xb4, 0x83, 0x0, 0xc0, 0x4f, 0xd9, 0x1, 0x19);
DEFINE_GUID(IID_CoHTMLDocument, 0x25336920, 0x3f9, 0x11cf, 0x8f, 0xd0, 0x0, 0xaa, 0x0, 0x68, 0x6f, 0x13);
DEFINE_GUID(IID_IHTMLEmbedElement, 0x3050f25f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLEmbed, 0x3050f25d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLMapElement, 0x3050f266, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLMapElement, 0x3050f271, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLAreaElement, 0x3050f265, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLAreaElement, 0x3050f283, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTableCaption, 0x3050f2eb, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTableCaption, 0x3050f2ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLCommentElement, 0x3050f20c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLCommentElement, 0x3050f317, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLPhraseElement, 0x3050f20a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLPhraseElement, 0x3050f26e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLSpanElement, 0x3050f3f3, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLSpanElement, 0x3050f3f5, 0x98b4, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTable, 0x3050f21e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTable, 0x3050f26b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTableCol, 0x3050f23a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTableCol, 0x3050f26c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTableSection, 0x3050f23b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTableSection, 0x3050f2e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTableRow, 0x3050f23c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTableRow, 0x3050f26d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTableCell, 0x3050f23d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLTableCell, 0x3050f246, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLScriptElement, 0x3050f28b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLScriptElement, 0x3050f28c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLNoShowElement, 0x3050f38a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLNoShowElement, 0x3050f38b, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLObjectElement, 0x3050f24f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLObjectElement, 0x3050f24e, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFrameBase, 0x3050f311, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLFrameBase, 0x3050f312, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFrameElement, 0x3050f313, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLFrameElement, 0x3050f314, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLIFrameElement, 0x3050f315, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLIFrame, 0x3050f316, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLDivPosition, 0x3050f212, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLDivPosition, 0x3050f249, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFieldSetElement, 0x3050f3e7, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLFieldSetElement, 0x3050f3e8, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLLegendElement, 0x3050f3ea, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLLegendElement, 0x3050f3e9, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLSpanFlow, 0x3050f3e5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLSpanFlow, 0x3050f3e6, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFrameSetElement, 0x3050f319, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLFrameSetSite, 0x3050f31a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLBGsound, 0x3050f369, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLBGsound, 0x3050f370, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLStyleElement, 0x3050f375, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);

DEFINE_GUID(IID_CoHTMLStyleElement, 0x3050f37d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLStyleFontFace, 0x3050f3d5, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLStyleFontFace, 0x3050f3d4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLDialog, 0x3050f216, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoHTMLDialog, 0x3050f28a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_CoOldHTMLDocument, 0xd48a6ec9, 0x6a4a, 0x11cf, 0x94, 0xa7, 0x44, 0x45, 0x53, 0x54, 0x0, 0x0);
DEFINE_GUID(IID_CoOldHTMLFormElement, 0xd04d285, 0x6bec, 0x11cf, 0x8b, 0x97, 0x0, 0xaa, 0x0, 0x47, 0x6d, 0xa6);
DEFINE_GUID(IID_IHTMLAreasCollection, 0x3050f383, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLElementCollection, 0x3050f21f, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLEventObj, 0x3050f32d, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLSelectionObject, 0x3050f25a, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLTxtRange, 0x3050f220, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_ICSSFilterSite, 0x3050f3ed, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_ICSSFilter, 0x3050f3ec, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLControlRange, 0x3050f29c, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLInputHiddenElement, 0x3050f2a4, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFontNamesCollection, 0x3050f376, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLFontSizesCollection, 0x3050f377, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);
DEFINE_GUID(IID_IHTMLOptionsHolder, 0x3050f378, 0x98b5, 0x11cf, 0xbb, 0x82, 0x0, 0xaa, 0x0, 0xbd, 0xce, 0xb);


#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLStyle
// {3050F25E-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLStyle

DECLARE_INTERFACE_(IHTMLStyle, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLStyle methods:
   STDMETHOD_(HRESULT, Set_fontFamily) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontFamily) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_fontStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_fontVariant) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontVariant) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_fontWeight) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontWeight) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_fontSize) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_fontSize) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_font) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_font) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_color) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_color) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_background) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_background) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundImage) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundImage) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundRepeat) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundRepeat) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundAttachment) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundAttachment) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundPosition) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundPosition) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundPositionX) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundPositionX) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundPositionY) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundPositionY) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_wordSpacing) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_wordSpacing) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_letterSpacing) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_letterSpacing) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecoration) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecoration) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationNone) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationNone) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationUnderline) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationUnderline) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationOverline) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationOverline) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationLineThrough) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationLineThrough) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationBlink) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationBlink) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_verticalAlign) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_verticalAlign) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_textTransform) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_textTransform) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_textAlign) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_textAlign) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_textIndent) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_textIndent) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_lineHeight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_lineHeight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_marginTop) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_marginTop) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_marginRight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_marginRight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_marginBottom) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_marginBottom) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_marginLeft) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_marginLeft) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_margin) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_margin) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_paddingTop) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_paddingTop) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_paddingRight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_paddingRight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_paddingBottom) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_paddingBottom) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_paddingLeft) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_paddingLeft) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_padding) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_padding) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_border) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_border) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderTop) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderTop) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderRight) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderRight) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderBottom) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderBottom) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderLeft) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderLeft) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColor) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColor) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderTopColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderTopColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderRightColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderRightColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderBottomColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderBottomColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderLeftColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderLeftColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderWidth) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderWidth) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderTopWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderTopWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderRightWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderRightWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderBottomWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderBottomWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderLeftWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderLeftWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderTopStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderTopStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderRightStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderRightStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderBottomStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderBottomStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderLeftStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderLeftStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_height) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_height) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_styleFloat) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_styleFloat) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_clear) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_clear) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_display) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_display) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_visibility) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_visibility) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_listStyleType) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_listStyleType) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_listStylePosition) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_listStylePosition) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_listStyleImage) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_listStyleImage) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_listStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_listStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_whiteSpace) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_whiteSpace) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_top) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_top) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_left) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_left) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_position) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_zIndex) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_zIndex) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_overflow) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_overflow) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_pageBreakBefore) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_pageBreakBefore) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_pageBreakAfter) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_pageBreakAfter) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_cssText) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_cssText) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_pixelTop) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_pixelTop) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_pixelLeft) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_pixelLeft) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_pixelWidth) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_pixelWidth) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_pixelHeight) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_pixelHeight) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_posTop) (THIS_ float p) PURE; 
   STDMETHOD_(HRESULT, Get_posTop) (THIS_ float* p) PURE; 
   STDMETHOD_(HRESULT, Set_posLeft) (THIS_ float p) PURE; 
   STDMETHOD_(HRESULT, Get_posLeft) (THIS_ float* p) PURE; 
   STDMETHOD_(HRESULT, Set_posWidth) (THIS_ float p) PURE; 
   STDMETHOD_(HRESULT, Get_posWidth) (THIS_ float* p) PURE; 
   STDMETHOD_(HRESULT, Set_posHeight) (THIS_ float p) PURE; 
   STDMETHOD_(HRESULT, Get_posHeight) (THIS_ float* p) PURE; 
   STDMETHOD_(HRESULT, Set_cursor) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_cursor) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_clip) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_clip) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_filter) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_filter) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, setAttribute) (THIS_ BSTR strAttributeName, VARIANT AttributeValue, long lFlags) PURE; 
   STDMETHOD_(HRESULT, getAttribute) (THIS_ BSTR strAttributeName, long lFlags, VARIANT* AttributeValue) PURE; 
   STDMETHOD_(HRESULT, removeAttribute) (THIS_ BSTR strAttributeName, long lFlags, VARIANT_BOOL* pfSuccess) PURE; 
   STDMETHOD_(HRESULT, toString) (THIS_ BSTR* String) PURE; 
};

typedef IHTMLStyle* LPHTMLSTYLE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLStyle  {3050F25E-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLStyleProxy : public TAutoProxy
{
public:
   TIHTMLStyleProxy() : TAutoProxy(0x0) {}

   //fontFamily:   [dispid -2147413094]
   void fontFamily(TAutoString arg0);

   //fontFamily:   [dispid -2147413094]
   TAutoString fontFamily();

   //fontStyle:   [dispid -2147413088]
   void fontStyle(TAutoString arg0);

   //fontStyle:   [dispid -2147413088]
   TAutoString fontStyle();

   //fontVariant:   [dispid -2147413087]
   void fontVariant(TAutoString arg0);

   //fontVariant:   [dispid -2147413087]
   TAutoString fontVariant();

   //fontWeight:   [dispid -2147413085]
   void fontWeight(TAutoString arg0);

   //fontWeight:   [dispid -2147413085]
   TAutoString fontWeight();

   //fontSize:   [dispid -2147413093]
   void fontSize(TAutoVal arg0);

   //fontSize:   [dispid -2147413093]
   TAutoVal fontSize();

   //font:   [dispid -2147413071]
   void font(TAutoString arg0);

   //font:   [dispid -2147413071]
   TAutoString font();

   //color:   [dispid -2147413110]
   void color(TAutoVal arg0);

   //color:   [dispid -2147413110]
   TAutoVal color();

   //background:   [dispid -2147413080]
   void background(TAutoString arg0);

   //background:   [dispid -2147413080]
   TAutoString background();

   //backgroundColor:   [dispid -501]
   void backgroundColor(TAutoVal arg0);

   //backgroundColor:   [dispid -501]
   TAutoVal backgroundColor();

   //backgroundImage:   [dispid -2147413111]
   void backgroundImage(TAutoString arg0);

   //backgroundImage:   [dispid -2147413111]
   TAutoString backgroundImage();

   //backgroundRepeat:   [dispid -2147413068]
   void backgroundRepeat(TAutoString arg0);

   //backgroundRepeat:   [dispid -2147413068]
   TAutoString backgroundRepeat();

   //backgroundAttachment:   [dispid -2147413067]
   void backgroundAttachment(TAutoString arg0);

   //backgroundAttachment:   [dispid -2147413067]
   TAutoString backgroundAttachment();

   //backgroundPosition:   [dispid -2147413066]
   void backgroundPosition(TAutoString arg0);

   //backgroundPosition:   [dispid -2147413066]
   TAutoString backgroundPosition();

   //backgroundPositionX:   [dispid -2147413079]
   void backgroundPositionX(TAutoVal arg0);

   //backgroundPositionX:   [dispid -2147413079]
   TAutoVal backgroundPositionX();

   //backgroundPositionY:   [dispid -2147413078]
   void backgroundPositionY(TAutoVal arg0);

   //backgroundPositionY:   [dispid -2147413078]
   TAutoVal backgroundPositionY();

   //wordSpacing:   [dispid -2147413065]
   void wordSpacing(TAutoVal arg0);

   //wordSpacing:   [dispid -2147413065]
   TAutoVal wordSpacing();

   //letterSpacing:   [dispid -2147413104]
   void letterSpacing(TAutoVal arg0);

   //letterSpacing:   [dispid -2147413104]
   TAutoVal letterSpacing();

   //textDecoration:   [dispid -2147413077]
   void textDecoration(TAutoString arg0);

   //textDecoration:   [dispid -2147413077]
   TAutoString textDecoration();

   //textDecorationNone:   [dispid -2147413089]
   void textDecorationNone(TBool arg0);

   //textDecorationNone:   [dispid -2147413089]
   TBool textDecorationNone();

   //textDecorationUnderline:   [dispid -2147413091]
   void textDecorationUnderline(TBool arg0);

   //textDecorationUnderline:   [dispid -2147413091]
   TBool textDecorationUnderline();

   //textDecorationOverline:   [dispid -2147413043]
   void textDecorationOverline(TBool arg0);

   //textDecorationOverline:   [dispid -2147413043]
   TBool textDecorationOverline();

   //textDecorationLineThrough:   [dispid -2147413092]
   void textDecorationLineThrough(TBool arg0);

   //textDecorationLineThrough:   [dispid -2147413092]
   TBool textDecorationLineThrough();

   //textDecorationBlink:   [dispid -2147413090]
   void textDecorationBlink(TBool arg0);

   //textDecorationBlink:   [dispid -2147413090]
   TBool textDecorationBlink();

   //verticalAlign:   [dispid -2147413064]
   void verticalAlign(TAutoVal arg0);

   //verticalAlign:   [dispid -2147413064]
   TAutoVal verticalAlign();

   //textTransform:   [dispid -2147413108]
   void textTransform(TAutoString arg0);

   //textTransform:   [dispid -2147413108]
   TAutoString textTransform();

   //textAlign:   [dispid -2147418040]
   void textAlign(TAutoString arg0);

   //textAlign:   [dispid -2147418040]
   TAutoString textAlign();

   //textIndent:   [dispid -2147413105]
   void textIndent(TAutoVal arg0);

   //textIndent:   [dispid -2147413105]
   TAutoVal textIndent();

   //lineHeight:   [dispid -2147413106]
   void lineHeight(TAutoVal arg0);

   //lineHeight:   [dispid -2147413106]
   TAutoVal lineHeight();

   //marginTop:   [dispid -2147413075]
   void marginTop(TAutoVal arg0);

   //marginTop:   [dispid -2147413075]
   TAutoVal marginTop();

   //marginRight:   [dispid -2147413074]
   void marginRight(TAutoVal arg0);

   //marginRight:   [dispid -2147413074]
   TAutoVal marginRight();

   //marginBottom:   [dispid -2147413073]
   void marginBottom(TAutoVal arg0);

   //marginBottom:   [dispid -2147413073]
   TAutoVal marginBottom();

   //marginLeft:   [dispid -2147413072]
   void marginLeft(TAutoVal arg0);

   //marginLeft:   [dispid -2147413072]
   TAutoVal marginLeft();

   //margin:   [dispid -2147413076]
   void margin(TAutoString arg0);

   //margin:   [dispid -2147413076]
   TAutoString margin();

   //paddingTop:   [dispid -2147413100]
   void paddingTop(TAutoVal arg0);

   //paddingTop:   [dispid -2147413100]
   TAutoVal paddingTop();

   //paddingRight:   [dispid -2147413099]
   void paddingRight(TAutoVal arg0);

   //paddingRight:   [dispid -2147413099]
   TAutoVal paddingRight();

   //paddingBottom:   [dispid -2147413098]
   void paddingBottom(TAutoVal arg0);

   //paddingBottom:   [dispid -2147413098]
   TAutoVal paddingBottom();

   //paddingLeft:   [dispid -2147413097]
   void paddingLeft(TAutoVal arg0);

   //paddingLeft:   [dispid -2147413097]
   TAutoVal paddingLeft();

   //padding:   [dispid -2147413101]
   void padding(TAutoString arg0);

   //padding:   [dispid -2147413101]
   TAutoString padding();

   //border:   [dispid -2147413063]
   void border(TAutoString arg0);

   //border:   [dispid -2147413063]
   TAutoString border();

   //borderTop:   [dispid -2147413062]
   void borderTop(TAutoString arg0);

   //borderTop:   [dispid -2147413062]
   TAutoString borderTop();

   //borderRight:   [dispid -2147413061]
   void borderRight(TAutoString arg0);

   //borderRight:   [dispid -2147413061]
   TAutoString borderRight();

   //borderBottom:   [dispid -2147413060]
   void borderBottom(TAutoString arg0);

   //borderBottom:   [dispid -2147413060]
   TAutoString borderBottom();

   //borderLeft:   [dispid -2147413059]
   void borderLeft(TAutoString arg0);

   //borderLeft:   [dispid -2147413059]
   TAutoString borderLeft();

   //borderColor:   [dispid -2147413058]
   void borderColor(TAutoString arg0);

   //borderColor:   [dispid -2147413058]
   TAutoString borderColor();

   //borderTopColor:   [dispid -2147413057]
   void borderTopColor(TAutoVal arg0);

   //borderTopColor:   [dispid -2147413057]
   TAutoVal borderTopColor();

   //borderRightColor:   [dispid -2147413056]
   void borderRightColor(TAutoVal arg0);

   //borderRightColor:   [dispid -2147413056]
   TAutoVal borderRightColor();

   //borderBottomColor:   [dispid -2147413055]
   void borderBottomColor(TAutoVal arg0);

   //borderBottomColor:   [dispid -2147413055]
   TAutoVal borderBottomColor();

   //borderLeftColor:   [dispid -2147413054]
   void borderLeftColor(TAutoVal arg0);

   //borderLeftColor:   [dispid -2147413054]
   TAutoVal borderLeftColor();

   //borderWidth:   [dispid -2147413053]
   void borderWidth(TAutoString arg0);

   //borderWidth:   [dispid -2147413053]
   TAutoString borderWidth();

   //borderTopWidth:   [dispid -2147413052]
   void borderTopWidth(TAutoVal arg0);

   //borderTopWidth:   [dispid -2147413052]
   TAutoVal borderTopWidth();

   //borderRightWidth:   [dispid -2147413051]
   void borderRightWidth(TAutoVal arg0);

   //borderRightWidth:   [dispid -2147413051]
   TAutoVal borderRightWidth();

   //borderBottomWidth:   [dispid -2147413050]
   void borderBottomWidth(TAutoVal arg0);

   //borderBottomWidth:   [dispid -2147413050]
   TAutoVal borderBottomWidth();

   //borderLeftWidth:   [dispid -2147413049]
   void borderLeftWidth(TAutoVal arg0);

   //borderLeftWidth:   [dispid -2147413049]
   TAutoVal borderLeftWidth();

   //borderStyle:   [dispid -2147413048]
   void borderStyle(TAutoString arg0);

   //borderStyle:   [dispid -2147413048]
   TAutoString borderStyle();

   //borderTopStyle:   [dispid -2147413047]
   void borderTopStyle(TAutoString arg0);

   //borderTopStyle:   [dispid -2147413047]
   TAutoString borderTopStyle();

   //borderRightStyle:   [dispid -2147413046]
   void borderRightStyle(TAutoString arg0);

   //borderRightStyle:   [dispid -2147413046]
   TAutoString borderRightStyle();

   //borderBottomStyle:   [dispid -2147413045]
   void borderBottomStyle(TAutoString arg0);

   //borderBottomStyle:   [dispid -2147413045]
   TAutoString borderBottomStyle();

   //borderLeftStyle:   [dispid -2147413044]
   void borderLeftStyle(TAutoString arg0);

   //borderLeftStyle:   [dispid -2147413044]
   TAutoString borderLeftStyle();

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //height:   [dispid -2147418106]
   void height(TAutoVal arg0);

   //height:   [dispid -2147418106]
   TAutoVal height();

   //styleFloat:   [dispid -2147413042]
   void styleFloat(TAutoString arg0);

   //styleFloat:   [dispid -2147413042]
   TAutoString styleFloat();

   //clear:   [dispid -2147413096]
   void clear(TAutoString arg0);

   //clear:   [dispid -2147413096]
   TAutoString clear();

   //display:   [dispid -2147413041]
   void display(TAutoString arg0);

   //display:   [dispid -2147413041]
   TAutoString display();

   //visibility:   [dispid -2147413032]
   void visibility(TAutoString arg0);

   //visibility:   [dispid -2147413032]
   TAutoString visibility();

   //listStyleType:   [dispid -2147413040]
   void listStyleType(TAutoString arg0);

   //listStyleType:   [dispid -2147413040]
   TAutoString listStyleType();

   //listStylePosition:   [dispid -2147413039]
   void listStylePosition(TAutoString arg0);

   //listStylePosition:   [dispid -2147413039]
   TAutoString listStylePosition();

   //listStyleImage:   [dispid -2147413038]
   void listStyleImage(TAutoString arg0);

   //listStyleImage:   [dispid -2147413038]
   TAutoString listStyleImage();

   //listStyle:   [dispid -2147413037]
   void listStyle(TAutoString arg0);

   //listStyle:   [dispid -2147413037]
   TAutoString listStyle();

   //whiteSpace:   [dispid -2147413036]
   void whiteSpace(TAutoString arg0);

   //whiteSpace:   [dispid -2147413036]
   TAutoString whiteSpace();

   //top:   [dispid -2147418108]
   void top(TAutoVal arg0);

   //top:   [dispid -2147418108]
   TAutoVal top();

   //left:   [dispid -2147418109]
   void left(TAutoVal arg0);

   //left:   [dispid -2147418109]
   TAutoVal left();

   //position:   [dispid -2147413022]
   TAutoString position();

   //zIndex:   [dispid -2147413021]
   void zIndex(TAutoVal arg0);

   //zIndex:   [dispid -2147413021]
   TAutoVal zIndex();

   //overflow:   [dispid -2147413102]
   void overflow(TAutoString arg0);

   //overflow:   [dispid -2147413102]
   TAutoString overflow();

   //pageBreakBefore:   [dispid -2147413035]
   void pageBreakBefore(TAutoString arg0);

   //pageBreakBefore:   [dispid -2147413035]
   TAutoString pageBreakBefore();

   //pageBreakAfter:   [dispid -2147413034]
   void pageBreakAfter(TAutoString arg0);

   //pageBreakAfter:   [dispid -2147413034]
   TAutoString pageBreakAfter();

   //cssText:   [dispid -2147413013]
   void cssText(TAutoString arg0);

   //cssText:   [dispid -2147413013]
   TAutoString cssText();

   //pixelTop:   [dispid -2147414112]
   void pixelTop(long arg0);

   //pixelTop:   [dispid -2147414112]
   long pixelTop();

   //pixelLeft:   [dispid -2147414111]
   void pixelLeft(long arg0);

   //pixelLeft:   [dispid -2147414111]
   long pixelLeft();

   //pixelWidth:   [dispid -2147414110]
   void pixelWidth(long arg0);

   //pixelWidth:   [dispid -2147414110]
   long pixelWidth();

   //pixelHeight:   [dispid -2147414109]
   void pixelHeight(long arg0);

   //pixelHeight:   [dispid -2147414109]
   long pixelHeight();

   //posTop:   [dispid -2147414108]
   void posTop(float arg0);

   //posTop:   [dispid -2147414108]
   float posTop();

   //posLeft:   [dispid -2147414107]
   void posLeft(float arg0);

   //posLeft:   [dispid -2147414107]
   float posLeft();

   //posWidth:   [dispid -2147414106]
   void posWidth(float arg0);

   //posWidth:   [dispid -2147414106]
   float posWidth();

   //posHeight:   [dispid -2147414105]
   void posHeight(float arg0);

   //posHeight:   [dispid -2147414105]
   float posHeight();

   //cursor:   [dispid -2147413010]
   void cursor(TAutoString arg0);

   //cursor:   [dispid -2147413010]
   TAutoString cursor();

   //clip:   [dispid -2147413020]
   void clip(TAutoString arg0);

   //clip:   [dispid -2147413020]
   TAutoString clip();

   //filter:   [dispid -2147413030]
   void filter(TAutoString arg0);

   //filter:   [dispid -2147413030]
   TAutoString filter();

   //setAttribute:   [dispid -2147417611]
   void setAttribute(TAutoString strAttributeName, TAutoVal AttributeValue, long lFlags);

   //getAttribute:   [dispid -2147417610]
   TAutoVal getAttribute(TAutoString strAttributeName, long lFlags);

   //removeAttribute:   [dispid -2147417609]
   TBool removeAttribute(TAutoString strAttributeName, long lFlags);

   //toString:   [dispid -2147414104]
   TAutoString toString();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLRuleStyle
// {3050F3CF-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLRuleStyle

DECLARE_INTERFACE_(IHTMLRuleStyle, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLRuleStyle methods:
   STDMETHOD_(HRESULT, Set_fontFamily) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontFamily) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_fontStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_fontVariant) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontVariant) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_fontWeight) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontWeight) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_fontSize) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_fontSize) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_font) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_font) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_color) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_color) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_background) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_background) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundImage) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundImage) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundRepeat) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundRepeat) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundAttachment) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundAttachment) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundPosition) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundPosition) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundPositionX) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundPositionX) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_backgroundPositionY) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_backgroundPositionY) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_wordSpacing) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_wordSpacing) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_letterSpacing) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_letterSpacing) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecoration) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecoration) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationNone) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationNone) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationUnderline) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationUnderline) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationOverline) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationOverline) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationLineThrough) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationLineThrough) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_textDecorationBlink) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_textDecorationBlink) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_verticalAlign) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_verticalAlign) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_textTransform) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_textTransform) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_textAlign) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_textAlign) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_textIndent) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_textIndent) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_lineHeight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_lineHeight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_marginTop) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_marginTop) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_marginRight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_marginRight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_marginBottom) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_marginBottom) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_marginLeft) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_marginLeft) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_margin) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_margin) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_paddingTop) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_paddingTop) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_paddingRight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_paddingRight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_paddingBottom) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_paddingBottom) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_paddingLeft) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_paddingLeft) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_padding) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_padding) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_border) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_border) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderTop) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderTop) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderRight) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderRight) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderBottom) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderBottom) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderLeft) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderLeft) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColor) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColor) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderTopColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderTopColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderRightColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderRightColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderBottomColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderBottomColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderLeftColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderLeftColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderWidth) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderWidth) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderTopWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderTopWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderRightWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderRightWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderBottomWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderBottomWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderLeftWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderLeftWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderTopStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderTopStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderRightStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderRightStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderBottomStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderBottomStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderLeftStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_borderLeftStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_height) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_height) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_styleFloat) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_styleFloat) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_clear) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_clear) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_display) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_display) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_visibility) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_visibility) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_listStyleType) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_listStyleType) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_listStylePosition) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_listStylePosition) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_listStyleImage) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_listStyleImage) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_listStyle) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_listStyle) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_whiteSpace) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_whiteSpace) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_top) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_top) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_left) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_left) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_position) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_zIndex) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_zIndex) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_overflow) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_overflow) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_pageBreakBefore) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_pageBreakBefore) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_pageBreakAfter) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_pageBreakAfter) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_cssText) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_cssText) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_cursor) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_cursor) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_clip) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_clip) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_filter) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_filter) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, setAttribute) (THIS_ BSTR strAttributeName, VARIANT AttributeValue, long lFlags) PURE; 
   STDMETHOD_(HRESULT, getAttribute) (THIS_ BSTR strAttributeName, long lFlags, VARIANT* AttributeValue) PURE; 
   STDMETHOD_(HRESULT, removeAttribute) (THIS_ BSTR strAttributeName, long lFlags, VARIANT_BOOL* pfSuccess) PURE; 
};

typedef IHTMLRuleStyle* LPHTMLRULESTYLE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLRuleStyle  {3050F3CF-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLRuleStyleProxy : public TAutoProxy
{
public:
   TIHTMLRuleStyleProxy() : TAutoProxy(0x0) {}

   //fontFamily:   [dispid -2147413094]
   void fontFamily(TAutoString arg0);

   //fontFamily:   [dispid -2147413094]
   TAutoString fontFamily();

   //fontStyle:   [dispid -2147413088]
   void fontStyle(TAutoString arg0);

   //fontStyle:   [dispid -2147413088]
   TAutoString fontStyle();

   //fontVariant:   [dispid -2147413087]
   void fontVariant(TAutoString arg0);

   //fontVariant:   [dispid -2147413087]
   TAutoString fontVariant();

   //fontWeight:   [dispid -2147413085]
   void fontWeight(TAutoString arg0);

   //fontWeight:   [dispid -2147413085]
   TAutoString fontWeight();

   //fontSize:   [dispid -2147413093]
   void fontSize(TAutoVal arg0);

   //fontSize:   [dispid -2147413093]
   TAutoVal fontSize();

   //font:   [dispid -2147413071]
   void font(TAutoString arg0);

   //font:   [dispid -2147413071]
   TAutoString font();

   //color:   [dispid -2147413110]
   void color(TAutoVal arg0);

   //color:   [dispid -2147413110]
   TAutoVal color();

   //background:   [dispid -2147413080]
   void background(TAutoString arg0);

   //background:   [dispid -2147413080]
   TAutoString background();

   //backgroundColor:   [dispid -501]
   void backgroundColor(TAutoVal arg0);

   //backgroundColor:   [dispid -501]
   TAutoVal backgroundColor();

   //backgroundImage:   [dispid -2147413111]
   void backgroundImage(TAutoString arg0);

   //backgroundImage:   [dispid -2147413111]
   TAutoString backgroundImage();

   //backgroundRepeat:   [dispid -2147413068]
   void backgroundRepeat(TAutoString arg0);

   //backgroundRepeat:   [dispid -2147413068]
   TAutoString backgroundRepeat();

   //backgroundAttachment:   [dispid -2147413067]
   void backgroundAttachment(TAutoString arg0);

   //backgroundAttachment:   [dispid -2147413067]
   TAutoString backgroundAttachment();

   //backgroundPosition:   [dispid -2147413066]
   void backgroundPosition(TAutoString arg0);

   //backgroundPosition:   [dispid -2147413066]
   TAutoString backgroundPosition();

   //backgroundPositionX:   [dispid -2147413079]
   void backgroundPositionX(TAutoVal arg0);

   //backgroundPositionX:   [dispid -2147413079]
   TAutoVal backgroundPositionX();

   //backgroundPositionY:   [dispid -2147413078]
   void backgroundPositionY(TAutoVal arg0);

   //backgroundPositionY:   [dispid -2147413078]
   TAutoVal backgroundPositionY();

   //wordSpacing:   [dispid -2147413065]
   void wordSpacing(TAutoVal arg0);

   //wordSpacing:   [dispid -2147413065]
   TAutoVal wordSpacing();

   //letterSpacing:   [dispid -2147413104]
   void letterSpacing(TAutoVal arg0);

   //letterSpacing:   [dispid -2147413104]
   TAutoVal letterSpacing();

   //textDecoration:   [dispid -2147413077]
   void textDecoration(TAutoString arg0);

   //textDecoration:   [dispid -2147413077]
   TAutoString textDecoration();

   //textDecorationNone:   [dispid -2147413089]
   void textDecorationNone(TBool arg0);

   //textDecorationNone:   [dispid -2147413089]
   TBool textDecorationNone();

   //textDecorationUnderline:   [dispid -2147413091]
   void textDecorationUnderline(TBool arg0);

   //textDecorationUnderline:   [dispid -2147413091]
   TBool textDecorationUnderline();

   //textDecorationOverline:   [dispid -2147413043]
   void textDecorationOverline(TBool arg0);

   //textDecorationOverline:   [dispid -2147413043]
   TBool textDecorationOverline();

   //textDecorationLineThrough:   [dispid -2147413092]
   void textDecorationLineThrough(TBool arg0);

   //textDecorationLineThrough:   [dispid -2147413092]
   TBool textDecorationLineThrough();

   //textDecorationBlink:   [dispid -2147413090]
   void textDecorationBlink(TBool arg0);

   //textDecorationBlink:   [dispid -2147413090]
   TBool textDecorationBlink();

   //verticalAlign:   [dispid -2147413064]
   void verticalAlign(TAutoVal arg0);

   //verticalAlign:   [dispid -2147413064]
   TAutoVal verticalAlign();

   //textTransform:   [dispid -2147413108]
   void textTransform(TAutoString arg0);

   //textTransform:   [dispid -2147413108]
   TAutoString textTransform();

   //textAlign:   [dispid -2147418040]
   void textAlign(TAutoString arg0);

   //textAlign:   [dispid -2147418040]
   TAutoString textAlign();

   //textIndent:   [dispid -2147413105]
   void textIndent(TAutoVal arg0);

   //textIndent:   [dispid -2147413105]
   TAutoVal textIndent();

   //lineHeight:   [dispid -2147413106]
   void lineHeight(TAutoVal arg0);

   //lineHeight:   [dispid -2147413106]
   TAutoVal lineHeight();

   //marginTop:   [dispid -2147413075]
   void marginTop(TAutoVal arg0);

   //marginTop:   [dispid -2147413075]
   TAutoVal marginTop();

   //marginRight:   [dispid -2147413074]
   void marginRight(TAutoVal arg0);

   //marginRight:   [dispid -2147413074]
   TAutoVal marginRight();

   //marginBottom:   [dispid -2147413073]
   void marginBottom(TAutoVal arg0);

   //marginBottom:   [dispid -2147413073]
   TAutoVal marginBottom();

   //marginLeft:   [dispid -2147413072]
   void marginLeft(TAutoVal arg0);

   //marginLeft:   [dispid -2147413072]
   TAutoVal marginLeft();

   //margin:   [dispid -2147413076]
   void margin(TAutoString arg0);

   //margin:   [dispid -2147413076]
   TAutoString margin();

   //paddingTop:   [dispid -2147413100]
   void paddingTop(TAutoVal arg0);

   //paddingTop:   [dispid -2147413100]
   TAutoVal paddingTop();

   //paddingRight:   [dispid -2147413099]
   void paddingRight(TAutoVal arg0);

   //paddingRight:   [dispid -2147413099]
   TAutoVal paddingRight();

   //paddingBottom:   [dispid -2147413098]
   void paddingBottom(TAutoVal arg0);

   //paddingBottom:   [dispid -2147413098]
   TAutoVal paddingBottom();

   //paddingLeft:   [dispid -2147413097]
   void paddingLeft(TAutoVal arg0);

   //paddingLeft:   [dispid -2147413097]
   TAutoVal paddingLeft();

   //padding:   [dispid -2147413101]
   void padding(TAutoString arg0);

   //padding:   [dispid -2147413101]
   TAutoString padding();

   //border:   [dispid -2147413063]
   void border(TAutoString arg0);

   //border:   [dispid -2147413063]
   TAutoString border();

   //borderTop:   [dispid -2147413062]
   void borderTop(TAutoString arg0);

   //borderTop:   [dispid -2147413062]
   TAutoString borderTop();

   //borderRight:   [dispid -2147413061]
   void borderRight(TAutoString arg0);

   //borderRight:   [dispid -2147413061]
   TAutoString borderRight();

   //borderBottom:   [dispid -2147413060]
   void borderBottom(TAutoString arg0);

   //borderBottom:   [dispid -2147413060]
   TAutoString borderBottom();

   //borderLeft:   [dispid -2147413059]
   void borderLeft(TAutoString arg0);

   //borderLeft:   [dispid -2147413059]
   TAutoString borderLeft();

   //borderColor:   [dispid -2147413058]
   void borderColor(TAutoString arg0);

   //borderColor:   [dispid -2147413058]
   TAutoString borderColor();

   //borderTopColor:   [dispid -2147413057]
   void borderTopColor(TAutoVal arg0);

   //borderTopColor:   [dispid -2147413057]
   TAutoVal borderTopColor();

   //borderRightColor:   [dispid -2147413056]
   void borderRightColor(TAutoVal arg0);

   //borderRightColor:   [dispid -2147413056]
   TAutoVal borderRightColor();

   //borderBottomColor:   [dispid -2147413055]
   void borderBottomColor(TAutoVal arg0);

   //borderBottomColor:   [dispid -2147413055]
   TAutoVal borderBottomColor();

   //borderLeftColor:   [dispid -2147413054]
   void borderLeftColor(TAutoVal arg0);

   //borderLeftColor:   [dispid -2147413054]
   TAutoVal borderLeftColor();

   //borderWidth:   [dispid -2147413053]
   void borderWidth(TAutoString arg0);

   //borderWidth:   [dispid -2147413053]
   TAutoString borderWidth();

   //borderTopWidth:   [dispid -2147413052]
   void borderTopWidth(TAutoVal arg0);

   //borderTopWidth:   [dispid -2147413052]
   TAutoVal borderTopWidth();

   //borderRightWidth:   [dispid -2147413051]
   void borderRightWidth(TAutoVal arg0);

   //borderRightWidth:   [dispid -2147413051]
   TAutoVal borderRightWidth();

   //borderBottomWidth:   [dispid -2147413050]
   void borderBottomWidth(TAutoVal arg0);

   //borderBottomWidth:   [dispid -2147413050]
   TAutoVal borderBottomWidth();

   //borderLeftWidth:   [dispid -2147413049]
   void borderLeftWidth(TAutoVal arg0);

   //borderLeftWidth:   [dispid -2147413049]
   TAutoVal borderLeftWidth();

   //borderStyle:   [dispid -2147413048]
   void borderStyle(TAutoString arg0);

   //borderStyle:   [dispid -2147413048]
   TAutoString borderStyle();

   //borderTopStyle:   [dispid -2147413047]
   void borderTopStyle(TAutoString arg0);

   //borderTopStyle:   [dispid -2147413047]
   TAutoString borderTopStyle();

   //borderRightStyle:   [dispid -2147413046]
   void borderRightStyle(TAutoString arg0);

   //borderRightStyle:   [dispid -2147413046]
   TAutoString borderRightStyle();

   //borderBottomStyle:   [dispid -2147413045]
   void borderBottomStyle(TAutoString arg0);

   //borderBottomStyle:   [dispid -2147413045]
   TAutoString borderBottomStyle();

   //borderLeftStyle:   [dispid -2147413044]
   void borderLeftStyle(TAutoString arg0);

   //borderLeftStyle:   [dispid -2147413044]
   TAutoString borderLeftStyle();

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //height:   [dispid -2147418106]
   void height(TAutoVal arg0);

   //height:   [dispid -2147418106]
   TAutoVal height();

   //styleFloat:   [dispid -2147413042]
   void styleFloat(TAutoString arg0);

   //styleFloat:   [dispid -2147413042]
   TAutoString styleFloat();

   //clear:   [dispid -2147413096]
   void clear(TAutoString arg0);

   //clear:   [dispid -2147413096]
   TAutoString clear();

   //display:   [dispid -2147413041]
   void display(TAutoString arg0);

   //display:   [dispid -2147413041]
   TAutoString display();

   //visibility:   [dispid -2147413032]
   void visibility(TAutoString arg0);

   //visibility:   [dispid -2147413032]
   TAutoString visibility();

   //listStyleType:   [dispid -2147413040]
   void listStyleType(TAutoString arg0);

   //listStyleType:   [dispid -2147413040]
   TAutoString listStyleType();

   //listStylePosition:   [dispid -2147413039]
   void listStylePosition(TAutoString arg0);

   //listStylePosition:   [dispid -2147413039]
   TAutoString listStylePosition();

   //listStyleImage:   [dispid -2147413038]
   void listStyleImage(TAutoString arg0);

   //listStyleImage:   [dispid -2147413038]
   TAutoString listStyleImage();

   //listStyle:   [dispid -2147413037]
   void listStyle(TAutoString arg0);

   //listStyle:   [dispid -2147413037]
   TAutoString listStyle();

   //whiteSpace:   [dispid -2147413036]
   void whiteSpace(TAutoString arg0);

   //whiteSpace:   [dispid -2147413036]
   TAutoString whiteSpace();

   //top:   [dispid -2147418108]
   void top(TAutoVal arg0);

   //top:   [dispid -2147418108]
   TAutoVal top();

   //left:   [dispid -2147418109]
   void left(TAutoVal arg0);

   //left:   [dispid -2147418109]
   TAutoVal left();

   //position:   [dispid -2147413022]
   TAutoString position();

   //zIndex:   [dispid -2147413021]
   void zIndex(TAutoVal arg0);

   //zIndex:   [dispid -2147413021]
   TAutoVal zIndex();

   //overflow:   [dispid -2147413102]
   void overflow(TAutoString arg0);

   //overflow:   [dispid -2147413102]
   TAutoString overflow();

   //pageBreakBefore:   [dispid -2147413035]
   void pageBreakBefore(TAutoString arg0);

   //pageBreakBefore:   [dispid -2147413035]
   TAutoString pageBreakBefore();

   //pageBreakAfter:   [dispid -2147413034]
   void pageBreakAfter(TAutoString arg0);

   //pageBreakAfter:   [dispid -2147413034]
   TAutoString pageBreakAfter();

   //cssText:   [dispid -2147413013]
   void cssText(TAutoString arg0);

   //cssText:   [dispid -2147413013]
   TAutoString cssText();

   //cursor:   [dispid -2147413010]
   void cursor(TAutoString arg0);

   //cursor:   [dispid -2147413010]
   TAutoString cursor();

   //clip:   [dispid -2147413020]
   void clip(TAutoString arg0);

   //clip:   [dispid -2147413020]
   TAutoString clip();

   //filter:   [dispid -2147413030]
   void filter(TAutoString arg0);

   //filter:   [dispid -2147413030]
   TAutoString filter();

   //setAttribute:   [dispid -2147417611]
   void setAttribute(TAutoString strAttributeName, TAutoVal AttributeValue, long lFlags);

   //getAttribute:   [dispid -2147417610]
   TAutoVal getAttribute(TAutoString strAttributeName, long lFlags);

   //removeAttribute:   [dispid -2147417609]
   TBool removeAttribute(TAutoString strAttributeName, long lFlags);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFiltersCollection
// {3050F3EE-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFiltersCollection

DECLARE_INTERFACE_(IHTMLFiltersCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLFiltersCollection methods:
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE; 
   STDMETHOD_(HRESULT, item) (THIS_ VARIANT* pvarIndex, VARIANT* pvarResult) PURE; 
};

typedef IHTMLFiltersCollection* LPHTMLFILTERSCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFiltersCollection  {3050F3EE-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFiltersCollectionProxy : public TAutoProxy
{
public:
   TIHTMLFiltersCollectionProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1001]
   long length();

   //_newEnum:   [dispid -4]
   void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

   //item:   [dispid 0]
   TAutoVal item(TAutoVal* pvarIndex);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLStyleSheetRule
// {3050F357-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLStyleSheetRule

DECLARE_INTERFACE_(IHTMLStyleSheetRule, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLStyleSheetRule methods:
   STDMETHOD_(HRESULT, Set_selectorText) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_selectorText) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_style) (THIS_ IHTMLRuleStyle** p) PURE; 
   STDMETHOD_(HRESULT, Get_readOnly) (THIS_ VARIANT_BOOL* p) PURE; 
};

typedef IHTMLStyleSheetRule* LPHTMLSTYLESHEETRULE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLStyleSheetRule  {3050F357-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLStyleSheetRuleProxy : public TAutoProxy
{
public:
   TIHTMLStyleSheetRuleProxy() : TAutoProxy(0x0) {}

   //selectorText:   [dispid 1001]
   void selectorText(TAutoString arg0);

   //selectorText:   [dispid 1001]
   TAutoString selectorText();

   //style:   [dispid -2147418038]
   void style(TIHTMLRuleStyleProxy& Obj);

   //readOnly:   [dispid 1002]
   TBool readOnly();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLStyleSheetRulesCollection
// {3050F2E5-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLStyleSheetRulesCollection

DECLARE_INTERFACE_(IHTMLStyleSheetRulesCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLStyleSheetRulesCollection methods:
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, item) (THIS_ long index, IHTMLStyleSheetRule** ppHTMLStyleSheetRule) PURE; 
};

typedef IHTMLStyleSheetRulesCollection* LPHTMLSTYLESHEETRULESCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLStyleSheetRulesCollection  {3050F2E5-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLStyleSheetRulesCollectionProxy : public TAutoProxy
{
public:
   TIHTMLStyleSheetRulesCollectionProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1001]
   long length();

   //item:   [dispid 0]
   void item(TIHTMLStyleSheetRuleProxy& Obj, long index);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLStyleSheet
// {3050F2E3-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLStyleSheet

DECLARE_INTERFACE_(IHTMLStyleSheet, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLStyleSheet methods:
   STDMETHOD_(HRESULT, Set_title) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_title) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_parentStyleSheet) (THIS_ IHTMLStyleSheet** p) PURE; 
   STDMETHOD_(HRESULT, Get_owningElement) (THIS_ IHTMLElement** p) PURE; 
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_readOnly) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_imports) (THIS_ IHTMLStyleSheetsCollection** p) PURE; 
   STDMETHOD_(HRESULT, Set_href) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_href) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, addImport) (THIS_ BSTR bstrURL, long lIndex, long* plIndex) PURE; 
   STDMETHOD_(HRESULT, addRule) (THIS_ BSTR bstrSelector, BSTR bstrStyle, long lIndex, long* plNewIndex) PURE; 
   STDMETHOD_(HRESULT, removeImport) (THIS_ long lIndex) PURE; 
   STDMETHOD_(HRESULT, removeRule) (THIS_ long lIndex) PURE; 
   STDMETHOD_(HRESULT, Set_media) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_media) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_cssText) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_cssText) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_rules) (THIS_ IHTMLStyleSheetRulesCollection** p) PURE; 
};

typedef IHTMLStyleSheet* LPHTMLSTYLESHEET;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLStyleSheet  {3050F2E3-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLStyleSheetProxy : public TAutoProxy
{
public:
   TIHTMLStyleSheetProxy() : TAutoProxy(0x0) {}

   //title:   [dispid 1001]
   void title(TAutoString arg0);

   //title:   [dispid 1001]
   TAutoString title();

   //parentStyleSheet:   [dispid 1002]
   void parentStyleSheet(TIHTMLStyleSheetProxy& Obj);

   //owningElement:   [dispid 1003]
   void owningElement(TIHTMLElementProxy& Obj);

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //readOnly:   [dispid 1004]
   TBool readOnly();

   //imports:   [dispid 1005]
   void imports(TIHTMLStyleSheetsCollectionProxy& Obj);

   //href:   [dispid 1006]
   void href(TAutoString arg0);

   //href:   [dispid 1006]
   TAutoString href();

   //type:   [dispid 1007]
   TAutoString type();

   //id:   [dispid 1008]
   TAutoString id();

   //addImport:   [dispid 1009]
   long addImport(TAutoString bstrURL, long lIndex);

   //addRule:   [dispid 1010]
   long addRule(TAutoString bstrSelector, TAutoString bstrStyle, long lIndex);

   //removeImport:   [dispid 1011]
   void removeImport(long lIndex);

   //removeRule:   [dispid 1012]
   void removeRule(long lIndex);

   //media:   [dispid 1013]
   void media(TAutoString arg0);

   //media:   [dispid 1013]
   TAutoString media();

   //cssText:   [dispid 1014]
   void cssText(TAutoString arg0);

   //cssText:   [dispid 1014]
   TAutoString cssText();

   //rules:   [dispid 1015]
   void rules(TIHTMLStyleSheetRulesCollectionProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLStyleSheetsCollection
// {3050F37E-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLStyleSheetsCollection

DECLARE_INTERFACE_(IHTMLStyleSheetsCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLStyleSheetsCollection methods:
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE; 
   STDMETHOD_(HRESULT, item) (THIS_ VARIANT* pvarIndex, VARIANT* pvarResult) PURE; 
};

typedef IHTMLStyleSheetsCollection* LPHTMLSTYLESHEETSCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLStyleSheetsCollection  {3050F37E-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLStyleSheetsCollectionProxy : public TAutoProxy
{
public:
   TIHTMLStyleSheetsCollectionProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1001]
   long length();

   //_newEnum:   [dispid -4]
   void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

   //item:   [dispid 0]
   TAutoVal item(TAutoVal* pvarIndex);
};

#endif


#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLLinkElement
// {3050F205-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLLinkElement

DECLARE_INTERFACE_(IHTMLLinkElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLLinkElement methods:
   STDMETHOD_(HRESULT, Set_href) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_href) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_rel) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_rel) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_rev) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_rev) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_type) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_readyState) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onreadystatechange) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onerror) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onerror) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_styleSheet) (THIS_ IHTMLStyleSheet** p) PURE; 
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_media) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_media) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLLinkElement* LPHTMLLINKELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLLinkElement  {3050F205-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLLinkElementProxy : public TAutoProxy
{
public:
   TIHTMLLinkElementProxy() : TAutoProxy(0x0) {}

   //href:   [dispid 1005]
   void href(TAutoString arg0);

   //href:   [dispid 1005]
   TAutoString href();

   //rel:   [dispid 1006]
   void rel(TAutoString arg0);

   //rel:   [dispid 1006]
   TAutoString rel();

   //rev:   [dispid 1007]
   void rev(TAutoString arg0);

   //rev:   [dispid 1007]
   TAutoString rev();

   //type:   [dispid 1008]
   void type(TAutoString arg0);

   //type:   [dispid 1008]
   TAutoString type();

   //readyState:   [dispid 1009]
   TAutoString readyState();

   //onreadystatechange:   [dispid -2147412087]
   void onreadystatechange(TAutoVal arg0);

   //onreadystatechange:   [dispid -2147412087]
   TAutoVal onreadystatechange();

   //onload:   [dispid -2147412080]
   void onload(TAutoVal arg0);

   //onload:   [dispid -2147412080]
   TAutoVal onload();

   //onerror:   [dispid -2147412083]
   void onerror(TAutoVal arg0);

   //onerror:   [dispid -2147412083]
   TAutoVal onerror();

   //styleSheet:   [dispid 1014]
   void styleSheet(TIHTMLStyleSheetProxy& Obj);

   //disabled:   [dispid 1015]
   void disabled(TBool arg0);

   //disabled:   [dispid 1015]
   TBool disabled();

   //media:   [dispid 1016]
   void media(TAutoString arg0);

   //media:   [dispid 1016]
   TAutoString media();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLElement
// {3050F1FF-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLElement

DECLARE_INTERFACE_(IHTMLElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLElement methods:
   STDMETHOD_(HRESULT, setAttribute) (THIS_ BSTR strAttributeName, VARIANT AttributeValue, long lFlags) PURE; 
   STDMETHOD_(HRESULT, getAttribute) (THIS_ BSTR strAttributeName, long lFlags, VARIANT* AttributeValue) PURE; 
   STDMETHOD_(HRESULT, removeAttribute) (THIS_ BSTR strAttributeName, long lFlags, VARIANT_BOOL* pfSuccess) PURE; 
   STDMETHOD_(HRESULT, Set_className) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_className) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_id) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_id) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_tagName) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_parentElement) (THIS_ IHTMLElement** p) PURE; 
   STDMETHOD_(HRESULT, Get_style) (THIS_ IHTMLStyle** p) PURE; 
   STDMETHOD_(HRESULT, Set_onhelp) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onhelp) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onclick) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onclick) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_ondblclick) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_ondblclick) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onkeydown) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onkeydown) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onkeyup) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onkeyup) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onkeypress) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onkeypress) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onmouseout) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onmouseout) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onmouseover) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onmouseover) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onmousemove) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onmousemove) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onmousedown) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onmousedown) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onmouseup) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onmouseup) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_document) (THIS_ IDispatch** p) PURE; 
   STDMETHOD_(HRESULT, Set_title) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_title) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_language) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_language) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onselectstart) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onselectstart) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, scrollIntoView) (THIS_ VARIANT varargStart) PURE; 
   STDMETHOD_(HRESULT, contains) (THIS_ IHTMLElement* pChild, VARIANT_BOOL* pfResult) PURE; 
   STDMETHOD_(HRESULT, Get_sourceIndex) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_recordNumber) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_lang) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_lang) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_offsetLeft) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_offsetTop) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_offsetWidth) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_offsetHeight) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_offsetParent) (THIS_ IHTMLElement** p) PURE; 
   STDMETHOD_(HRESULT, Set_innerHTML) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_innerHTML) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_innerText) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_innerText) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_outerHTML) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_outerHTML) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_outerText) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_outerText) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, insertAdjacentHTML) (THIS_ BSTR where, BSTR html) PURE; 
   STDMETHOD_(HRESULT, insertAdjacentText) (THIS_ BSTR where, BSTR text) PURE; 
   STDMETHOD_(HRESULT, Get_parentTextEdit) (THIS_ IHTMLElement** p) PURE; 
   STDMETHOD_(HRESULT, Get_isTextEdit) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, click) (THIS ) PURE; 
   STDMETHOD_(HRESULT, Get_filters) (THIS_ IHTMLFiltersCollection** p) PURE; 
   STDMETHOD_(HRESULT, Set_ondragstart) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_ondragstart) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, toString) (THIS_ BSTR* String) PURE; 
   STDMETHOD_(HRESULT, Set_onbeforeupdate) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onbeforeupdate) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onafterupdate) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onafterupdate) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onerrorupdate) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onerrorupdate) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onrowexit) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onrowexit) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onrowenter) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onrowenter) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_ondatasetchanged) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_ondatasetchanged) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_ondataavailable) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_ondataavailable) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_ondatasetcomplete) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_ondatasetcomplete) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onfilterchange) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onfilterchange) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_children) (THIS_ IDispatch** p) PURE; 
   STDMETHOD_(HRESULT, Get_all) (THIS_ IDispatch** p) PURE; 
};

typedef IHTMLElement* LPHTMLELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLElement  {3050F1FF-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLElementProxy : public TAutoProxy
{
public:
   TIHTMLElementProxy() : TAutoProxy(0x0) {}
   TIHTMLElementProxy(int i) : TAutoProxy(i){}

   //setAttribute:   [dispid -2147417611]
   void setAttribute(TAutoString strAttributeName, TAutoVal AttributeValue, long lFlags);

   //getAttribute:   [dispid -2147417610]
   TAutoVal getAttribute(TAutoString strAttributeName, long lFlags);

   //removeAttribute:   [dispid -2147417609]
   TBool removeAttribute(TAutoString strAttributeName, long lFlags);

   //className:   [dispid -2147417111]
   void className(TAutoString arg0);

   //className:   [dispid -2147417111]
   TAutoString className();

   //id:   [dispid -2147417110]
   void id(TAutoString arg0);

   //id:   [dispid -2147417110]
   TAutoString id();

   //tagName:   [dispid -2147417108]
   TAutoString tagName();

   //parentElement:   [dispid -2147418104]
   void parentElement(TIHTMLElementProxy& Obj);

   //style:   [dispid -2147418038]
   void style(TIHTMLStyleProxy& Obj);

   //onhelp:   [dispid -2147412099]
   void onhelp(TAutoVal arg0);

   //onhelp:   [dispid -2147412099]
   TAutoVal onhelp();

   //onclick:   [dispid -2147412104]
   void onclick(TAutoVal arg0);

   //onclick:   [dispid -2147412104]
   TAutoVal onclick();

   //ondblclick:   [dispid -2147412103]
   void ondblclick(TAutoVal arg0);

   //ondblclick:   [dispid -2147412103]
   TAutoVal ondblclick();

   //onkeydown:   [dispid -2147412107]
   void onkeydown(TAutoVal arg0);

   //onkeydown:   [dispid -2147412107]
   TAutoVal onkeydown();

   //onkeyup:   [dispid -2147412106]
   void onkeyup(TAutoVal arg0);

   //onkeyup:   [dispid -2147412106]
   TAutoVal onkeyup();

   //onkeypress:   [dispid -2147412105]
   void onkeypress(TAutoVal arg0);

   //onkeypress:   [dispid -2147412105]
   TAutoVal onkeypress();

   //onmouseout:   [dispid -2147412111]
   void onmouseout(TAutoVal arg0);

   //onmouseout:   [dispid -2147412111]
   TAutoVal onmouseout();

   //onmouseover:   [dispid -2147412112]
   void onmouseover(TAutoVal arg0);

   //onmouseover:   [dispid -2147412112]
   TAutoVal onmouseover();

   //onmousemove:   [dispid -2147412108]
   void onmousemove(TAutoVal arg0);

   //onmousemove:   [dispid -2147412108]
   TAutoVal onmousemove();

   //onmousedown:   [dispid -2147412110]
   void onmousedown(TAutoVal arg0);

   //onmousedown:   [dispid -2147412110]
   TAutoVal onmousedown();

   //onmouseup:   [dispid -2147412109]
   void onmouseup(TAutoVal arg0);

   //onmouseup:   [dispid -2147412109]
   TAutoVal onmouseup();

   //document:   [dispid -2147417094]
   IDispatch* document();

   //title:   [dispid -2147418043]
   void title(TAutoString arg0);

   //title:   [dispid -2147418043]
   TAutoString title();

   //language:   [dispid -2147413012]
   void language(TAutoString arg0);

   //language:   [dispid -2147413012]
   TAutoString language();

   //onselectstart:   [dispid -2147412075]
   void onselectstart(TAutoVal arg0);

   //onselectstart:   [dispid -2147412075]
   TAutoVal onselectstart();

   //scrollIntoView:   [dispid -2147417093]
   void scrollIntoView(TAutoVal varargStart = TNoArg());

   //contains:   [dispid -2147417092]
   TBool contains(IHTMLElement* pChild);

   //sourceIndex:   [dispid -2147417088]
   long sourceIndex();

   //recordNumber:   [dispid -2147417087]
   TAutoVal recordNumber();

   //lang:   [dispid -2147413103]
   void lang(TAutoString arg0);

   //lang:   [dispid -2147413103]
   TAutoString lang();

   //offsetLeft:   [dispid -2147417104]
   long offsetLeft();

   //offsetTop:   [dispid -2147417103]
   long offsetTop();

   //offsetWidth:   [dispid -2147417102]
   long offsetWidth();

   //offsetHeight:   [dispid -2147417101]
   long offsetHeight();

   //offsetParent:   [dispid -2147417100]
   void offsetParent(TIHTMLElementProxy& Obj);

   //innerHTML:   [dispid -2147417086]
   void innerHTML(TAutoString arg0);

   //innerHTML:   [dispid -2147417086]
   TAutoString innerHTML();

   //innerText:   [dispid -2147417085]
   void innerText(TAutoString arg0);

   //innerText:   [dispid -2147417085]
   TAutoString innerText();

   //outerHTML:   [dispid -2147417084]
   void outerHTML(TAutoString arg0);

   //outerHTML:   [dispid -2147417084]
   TAutoString outerHTML();

   //outerText:   [dispid -2147417083]
   void outerText(TAutoString arg0);

   //outerText:   [dispid -2147417083]
   TAutoString outerText();

   //insertAdjacentHTML:   [dispid -2147417082]
   void insertAdjacentHTML(TAutoString where, TAutoString html);

   //insertAdjacentText:   [dispid -2147417081]
   void insertAdjacentText(TAutoString where, TAutoString text);

   //parentTextEdit:   [dispid -2147417080]
   void parentTextEdit(TIHTMLElementProxy& Obj);

   //isTextEdit:   [dispid -2147417078]
   TBool isTextEdit();

   //click:   [dispid -2147417079]
   void click();

   //filters:   [dispid -2147417077]
   void filters(TIHTMLFiltersCollectionProxy& Obj);

   //ondragstart:   [dispid -2147412077]
   void ondragstart(TAutoVal arg0);

   //ondragstart:   [dispid -2147412077]
   TAutoVal ondragstart();

   //toString:   [dispid -2147417076]
   TAutoString toString();

   //onbeforeupdate:   [dispid -2147412091]
   void onbeforeupdate(TAutoVal arg0);

   //onbeforeupdate:   [dispid -2147412091]
   TAutoVal onbeforeupdate();

   //onafterupdate:   [dispid -2147412090]
   void onafterupdate(TAutoVal arg0);

   //onafterupdate:   [dispid -2147412090]
   TAutoVal onafterupdate();

   //onerrorupdate:   [dispid -2147412074]
   void onerrorupdate(TAutoVal arg0);

   //onerrorupdate:   [dispid -2147412074]
   TAutoVal onerrorupdate();

   //onrowexit:   [dispid -2147412094]
   void onrowexit(TAutoVal arg0);

   //onrowexit:   [dispid -2147412094]
   TAutoVal onrowexit();

   //onrowenter:   [dispid -2147412093]
   void onrowenter(TAutoVal arg0);

   //onrowenter:   [dispid -2147412093]
   TAutoVal onrowenter();

   //ondatasetchanged:   [dispid -2147412072]
   void ondatasetchanged(TAutoVal arg0);

   //ondatasetchanged:   [dispid -2147412072]
   TAutoVal ondatasetchanged();

   //ondataavailable:   [dispid -2147412071]
   void ondataavailable(TAutoVal arg0);

   //ondataavailable:   [dispid -2147412071]
   TAutoVal ondataavailable();

   //ondatasetcomplete:   [dispid -2147412070]
   void ondatasetcomplete(TAutoVal arg0);

   //ondatasetcomplete:   [dispid -2147412070]
   TAutoVal ondatasetcomplete();

   //onfilterchange:   [dispid -2147412069]
   void onfilterchange(TAutoVal arg0);

   //onfilterchange:   [dispid -2147412069]
   TAutoVal onfilterchange();

   //children:   [dispid -2147417075]
   IDispatch* children();

   //all:   [dispid -2147417074]
   IDispatch* all();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFormElement
// {3050F1F7-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFormElement

DECLARE_INTERFACE_(IHTMLFormElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLFormElement methods:
   STDMETHOD_(HRESULT, Set_action) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_action) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_dir) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_dir) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_encoding) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_encoding) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_method) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_method) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_elements) (THIS_ IDispatch** p) PURE; 
   STDMETHOD_(HRESULT, Set_target) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_target) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onsubmit) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onsubmit) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onreset) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onreset) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, submit) (THIS ) PURE; 
   STDMETHOD_(HRESULT, reset) (THIS ) PURE; 
   STDMETHOD_(HRESULT, Set_length) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE; 
   STDMETHOD_(HRESULT, item) (THIS_ VARIANT name, VARIANT index, IDispatch** pdisp) PURE; 
   STDMETHOD_(HRESULT, tags) (THIS_ VARIANT tagName, IDispatch** pdisp) PURE; 
};

typedef IHTMLFormElement* LPHTMLFORMELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFormElement  {3050F1F7-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFormElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLFormElementProxy() : TIHTMLElementProxy(0x0) {}

   //action:   [dispid 1001]
   void action(TAutoString arg0);

   //action:   [dispid 1001]
   TAutoString action();

   //dir:   [dispid 1002]
   void dir(TAutoString arg0);

   //dir:   [dispid 1002]
   TAutoString dir();

   //encoding:   [dispid 1003]
   void encoding(TAutoString arg0);

   //encoding:   [dispid 1003]
   TAutoString encoding();

   //method:   [dispid 1004]
   void method(TAutoString arg0);

   //method:   [dispid 1004]
   TAutoString method();

   //elements:   [dispid 1005]
   IDispatch* elements();

   //target:   [dispid 1006]
   void target(TAutoString arg0);

   //target:   [dispid 1006]
   TAutoString target();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //onsubmit:   [dispid -2147412101]
   void onsubmit(TAutoVal arg0);

   //onsubmit:   [dispid -2147412101]
   TAutoVal onsubmit();

   //onreset:   [dispid -2147412100]
   void onreset(TAutoVal arg0);

   //onreset:   [dispid -2147412100]
   TAutoVal onreset();

   //submit:   [dispid 1009]
   void submit();

   //reset:   [dispid 1010]
   void reset();

   //length:   [dispid 1500]
   void length(long arg0);

   //length:   [dispid 1500]
   long length();

   //_newEnum:   [dispid -4]
   void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

   //item:   [dispid 0]
   IDispatch* item(TAutoVal name = TNoArg(), TAutoVal index = TNoArg());

   //tags:   [dispid 1502]
   IDispatch* tags(TAutoVal tagName);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTextElement
// {3050F218-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTextElement

DECLARE_INTERFACE_(IHTMLTextElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLTextElement methods:
};

typedef IHTMLTextElement* LPHTMLTEXTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTextElement  {3050F218-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTextElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTextElementProxy() : TIHTMLElementProxy(0x0) {}
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLImgElement
// {3050F240-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLImgElement

DECLARE_INTERFACE_(IHTMLImgElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLImgElement methods:
   STDMETHOD_(HRESULT, Set_isMap) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_isMap) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_useMap) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_useMap) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_mimeType) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_fileSize) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_fileCreatedDate) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_fileModifiedDate) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_fileUpdatedDate) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_protocol) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_href) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_nameProp) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_border) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_border) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_vspace) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_vspace) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_hspace) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_hspace) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_alt) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_alt) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_src) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_src) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_lowsrc) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_lowsrc) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_vrml) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_vrml) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_dynsrc) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_dynsrc) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_readyState) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_complete) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_loop) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_loop) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onerror) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onerror) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onabort) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onabort) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_width) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_width) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_height) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_height) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_Start) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_Start) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLImgElement* LPHTMLIMGELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLImgElement  {3050F240-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLImgElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLImgElementProxy() : TIHTMLElementProxy(0x0) {}

   //isMap:   [dispid 2002]
   void isMap(TBool arg0);

   //isMap:   [dispid 2002]
   TBool isMap();

   //useMap:   [dispid 2008]
   void useMap(TAutoString arg0);

   //useMap:   [dispid 2008]
   TAutoString useMap();

   //mimeType:   [dispid 2010]
   TAutoString mimeType();

   //fileSize:   [dispid 2011]
   TAutoString fileSize();

   //fileCreatedDate:   [dispid 2012]
   TAutoString fileCreatedDate();

   //fileModifiedDate:   [dispid 2013]
   TAutoString fileModifiedDate();

   //fileUpdatedDate:   [dispid 2014]
   TAutoString fileUpdatedDate();

   //protocol:   [dispid 2015]
   TAutoString protocol();

   //href:   [dispid 2016]
   TAutoString href();

   //nameProp:   [dispid 2017]
   TAutoString nameProp();

   //border:   [dispid 1004]
   void border(TAutoVal arg0);

   //border:   [dispid 1004]
   TAutoVal border();

   //vspace:   [dispid 1005]
   void vspace(long arg0);

   //vspace:   [dispid 1005]
   long vspace();

   //hspace:   [dispid 1006]
   void hspace(long arg0);

   //hspace:   [dispid 1006]
   long hspace();

   //alt:   [dispid 1002]
   void alt(TAutoString arg0);

   //alt:   [dispid 1002]
   TAutoString alt();

   //src:   [dispid 1003]
   void src(TAutoString arg0);

   //src:   [dispid 1003]
   TAutoString src();

   //lowsrc:   [dispid 1007]
   void lowsrc(TAutoString arg0);

   //lowsrc:   [dispid 1007]
   TAutoString lowsrc();

   //vrml:   [dispid 1008]
   void vrml(TAutoString arg0);

   //vrml:   [dispid 1008]
   TAutoString vrml();

   //dynsrc:   [dispid 1009]
   void dynsrc(TAutoString arg0);

   //dynsrc:   [dispid 1009]
   TAutoString dynsrc();

   //readyState:   [dispid 1012]
   TAutoString readyState();

   //complete:   [dispid 1010]
   TBool complete();

   //loop:   [dispid 1011]
   void loop(TAutoVal arg0);

   //loop:   [dispid 1011]
   TAutoVal loop();

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();

   //onload:   [dispid -2147412080]
   void onload(TAutoVal arg0);

   //onload:   [dispid -2147412080]
   TAutoVal onload();

   //onerror:   [dispid -2147412083]
   void onerror(TAutoVal arg0);

   //onerror:   [dispid -2147412083]
   TAutoVal onerror();

   //onabort:   [dispid -2147412084]
   void onabort(TAutoVal arg0);

   //onabort:   [dispid -2147412084]
   TAutoVal onabort();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //width:   [dispid -2147418107]
   void width(long arg0);

   //width:   [dispid -2147418107]
   long width();

   //height:   [dispid -2147418106]
   void height(long arg0);

   //height:   [dispid -2147418106]
   long height();

   //Start:   [dispid 1013]
   void Start(TAutoString arg0);

   //Start:   [dispid 1013]
   TAutoString Start();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLControlElement
// {04598FC6-866C-11CF-AB7C-00AA00C08FCF}

#undef  INTERFACE
#define INTERFACE IHTMLControlElement

DECLARE_INTERFACE_(IHTMLControlElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLControlElement methods:
   STDMETHOD_(HRESULT, Set_tabIndex) (THIS_ short p) PURE; 
   STDMETHOD_(HRESULT, Get_tabIndex) (THIS_ short* p) PURE; 
   STDMETHOD_(HRESULT, focus) (THIS ) PURE; 
   STDMETHOD_(HRESULT, Set_accessKey) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_accessKey) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onblur) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onblur) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onfocus) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onfocus) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onresize) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onresize) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, blur) (THIS ) PURE; 
   STDMETHOD_(HRESULT, addFilter) (THIS_ IUnknown* pUnk) PURE; 
   STDMETHOD_(HRESULT, removeFilter) (THIS_ IUnknown* pUnk) PURE; 
   STDMETHOD_(HRESULT, Get_clientHeight) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_clientWidth) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_clientTop) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_clientLeft) (THIS_ long* p) PURE; 
};

typedef IHTMLControlElement* LPHTMLCONTROLELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLControlElement  {04598FC6-866C-11CF-AB7C-00AA00C08FCF}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLControlElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLControlElementProxy() : TIHTMLElementProxy(0x0) {}

   //tabIndex:   [dispid -2147418097]
   void tabIndex(short arg0);

   //tabIndex:   [dispid -2147418097]
   short tabIndex();

   //focus:   [dispid -2147416112]
   void focus();

   //accessKey:   [dispid -2147416107]
   void accessKey(TAutoString arg0);

   //accessKey:   [dispid -2147416107]
   TAutoString accessKey();

   //onblur:   [dispid -2147412097]
   void onblur(TAutoVal arg0);

   //onblur:   [dispid -2147412097]
   TAutoVal onblur();

   //onfocus:   [dispid -2147412098]
   void onfocus(TAutoVal arg0);

   //onfocus:   [dispid -2147412098]
   TAutoVal onfocus();

   //onresize:   [dispid -2147412076]
   void onresize(TAutoVal arg0);

   //onresize:   [dispid -2147412076]
   TAutoVal onresize();

   //blur:   [dispid -2147416110]
   void blur();

   //addFilter:   [dispid -2147416095]
   void addFilter(IUnknown* pUnk);

   //removeFilter:   [dispid -2147416094]
   void removeFilter(IUnknown* pUnk);

   //clientHeight:   [dispid -2147416093]
   long clientHeight();

   //clientWidth:   [dispid -2147416092]
   long clientWidth();

   //clientTop:   [dispid -2147416091]
   long clientTop();

   //clientLeft:   [dispid -2147416090]
   long clientLeft();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDatabinding
// {3050F3F2-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLDatabinding

DECLARE_INTERFACE_(IHTMLDatabinding, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLDatabinding methods:
   STDMETHOD_(HRESULT, Set_dataFld) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_dataFld) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_dataSrc) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_dataSrc) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_dataFormatAs) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_dataFormatAs) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLDatabinding* LPHTMLDATABINDING;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLDatabinding  {3050F3F2-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLDatabindingProxy : public TAutoProxy
{
public:
   TIHTMLDatabindingProxy() : TAutoProxy(0x0) {}

   //dataFld:   [dispid -2147417091]
   void dataFld(TAutoString arg0);

   //dataFld:   [dispid -2147417091]
   TAutoString dataFld();

   //dataSrc:   [dispid -2147417090]
   void dataSrc(TAutoString arg0);

   //dataSrc:   [dispid -2147417090]
   TAutoString dataSrc();

   //dataFormatAs:   [dispid -2147417089]
   void dataFormatAs(TAutoString arg0);

   //dataFormatAs:   [dispid -2147417089]
   TAutoString dataFormatAs();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLInputImage
// {3050F2C2-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLInputImage

DECLARE_INTERFACE_(IHTMLInputImage, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLInputImage methods:
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_border) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_border) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_vspace) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_vspace) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_hspace) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_hspace) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_alt) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_alt) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_src) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_src) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_lowsrc) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_lowsrc) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_vrml) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_vrml) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_dynsrc) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_dynsrc) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_readyState) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_complete) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_loop) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_loop) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onerror) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onerror) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onabort) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onabort) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_width) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_width) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_height) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_height) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_Start) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_Start) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLInputImage* LPHTMLINPUTIMAGE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLInputImage  {3050F2C2-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLInputImageProxy : public TIHTMLElementProxy
{
public:
   TIHTMLInputImageProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid 2000]
   TAutoString type();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //border:   [dispid 1004]
   void border(TAutoVal arg0);

   //border:   [dispid 1004]
   TAutoVal border();

   //vspace:   [dispid 1005]
   void vspace(long arg0);

   //vspace:   [dispid 1005]
   long vspace();

   //hspace:   [dispid 1006]
   void hspace(long arg0);

   //hspace:   [dispid 1006]
   long hspace();

   //alt:   [dispid 1002]
   void alt(TAutoString arg0);

   //alt:   [dispid 1002]
   TAutoString alt();

   //src:   [dispid 1003]
   void src(TAutoString arg0);

   //src:   [dispid 1003]
   TAutoString src();

   //lowsrc:   [dispid 1007]
   void lowsrc(TAutoString arg0);

   //lowsrc:   [dispid 1007]
   TAutoString lowsrc();

   //vrml:   [dispid 1008]
   void vrml(TAutoString arg0);

   //vrml:   [dispid 1008]
   TAutoString vrml();

   //dynsrc:   [dispid 1009]
   void dynsrc(TAutoString arg0);

   //dynsrc:   [dispid 1009]
   TAutoString dynsrc();

   //readyState:   [dispid 1012]
   TAutoString readyState();

   //complete:   [dispid 1010]
   TBool complete();

   //loop:   [dispid 1011]
   void loop(TAutoVal arg0);

   //loop:   [dispid 1011]
   TAutoVal loop();

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();

   //onload:   [dispid -2147412080]
   void onload(TAutoVal arg0);

   //onload:   [dispid -2147412080]
   TAutoVal onload();

   //onerror:   [dispid -2147412083]
   void onerror(TAutoVal arg0);

   //onerror:   [dispid -2147412083]
   TAutoVal onerror();

   //onabort:   [dispid -2147412084]
   void onabort(TAutoVal arg0);

   //onabort:   [dispid -2147412084]
   TAutoVal onabort();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //width:   [dispid -2147418107]
   void width(long arg0);

   //width:   [dispid -2147418107]
   long width();

   //height:   [dispid -2147418106]
   void height(long arg0);

   //height:   [dispid -2147418106]
   long height();

   //Start:   [dispid 1013]
   void Start(TAutoString arg0);

   //Start:   [dispid 1013]
   TAutoString Start();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLImageElementFactory
// {3050F38E-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLImageElementFactory

DECLARE_INTERFACE_(IHTMLImageElementFactory, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLImageElementFactory methods:
   STDMETHOD_(HRESULT, create) (THIS_ VARIANT width, VARIANT height, IHTMLImgElement** __MIDL_0016) PURE; 
};

typedef IHTMLImageElementFactory* LPHTMLIMAGEELEMENTFACTORY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLImageElementFactory  {3050F38E-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLImageElementFactoryProxy : public TAutoProxy
{
public:
   TIHTMLImageElementFactoryProxy() : TAutoProxy(0x0) {}

   //create:   [dispid 0]
   void create(TIHTMLImgElementProxy& Obj, TAutoVal width = TNoArg(), TAutoVal height = TNoArg());
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLBodyElement
// {3050F1D8-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLBodyElement

DECLARE_INTERFACE_(IHTMLBodyElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLBodyElement methods:
   STDMETHOD_(HRESULT, Set_background) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_background) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_bgProperties) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_bgProperties) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_leftMargin) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_leftMargin) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_topMargin) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_topMargin) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_rightMargin) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_rightMargin) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_bottomMargin) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_bottomMargin) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_noWrap) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_noWrap) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_bgColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_bgColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_text) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_text) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_link) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_link) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_vLink) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_vLink) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_aLink) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_aLink) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onunload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onunload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_scroll) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_scroll) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onselect) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onselect) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onbeforeunload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onbeforeunload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, createTextRange) (THIS_ IHTMLTxtRange** Range) PURE; 
};

typedef IHTMLBodyElement* LPHTMLBODYELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLBodyElement  {3050F1D8-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLBodyElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLBodyElementProxy() : TIHTMLElementProxy(0x0) {}

   //background:   [dispid -2147413111]
   void background(TAutoString arg0);

   //background:   [dispid -2147413111]
   TAutoString background();

   //bgProperties:   [dispid -2147413067]
   void bgProperties(TAutoString arg0);

   //bgProperties:   [dispid -2147413067]
   TAutoString bgProperties();

   //leftMargin:   [dispid -2147413072]
   void leftMargin(TAutoVal arg0);

   //leftMargin:   [dispid -2147413072]
   TAutoVal leftMargin();

   //topMargin:   [dispid -2147413075]
   void topMargin(TAutoVal arg0);

   //topMargin:   [dispid -2147413075]
   TAutoVal topMargin();

   //rightMargin:   [dispid -2147413074]
   void rightMargin(TAutoVal arg0);

   //rightMargin:   [dispid -2147413074]
   TAutoVal rightMargin();

   //bottomMargin:   [dispid -2147413073]
   void bottomMargin(TAutoVal arg0);

   //bottomMargin:   [dispid -2147413073]
   TAutoVal bottomMargin();

   //noWrap:   [dispid -2147413107]
   void noWrap(TBool arg0);

   //noWrap:   [dispid -2147413107]
   TBool noWrap();

   //bgColor:   [dispid -501]
   void bgColor(TAutoVal arg0);

   //bgColor:   [dispid -501]
   TAutoVal bgColor();

   //text:   [dispid -2147413110]
   void text(TAutoVal arg0);

   //text:   [dispid -2147413110]
   TAutoVal text();

   //link:   [dispid 2010]
   void link(TAutoVal arg0);

   //link:   [dispid 2010]
   TAutoVal link();

   //vLink:   [dispid 2012]
   void vLink(TAutoVal arg0);

   //vLink:   [dispid 2012]
   TAutoVal vLink();

   //aLink:   [dispid 2011]
   void aLink(TAutoVal arg0);

   //aLink:   [dispid 2011]
   TAutoVal aLink();

   //onload:   [dispid -2147412080]
   void onload(TAutoVal arg0);

   //onload:   [dispid -2147412080]
   TAutoVal onload();

   //onunload:   [dispid -2147412079]
   void onunload(TAutoVal arg0);

   //onunload:   [dispid -2147412079]
   TAutoVal onunload();

   //scroll:   [dispid -2147413033]
   void scroll(TAutoString arg0);

   //scroll:   [dispid -2147413033]
   TAutoString scroll();

   //onselect:   [dispid -2147412102]
   void onselect(TAutoVal arg0);

   //onselect:   [dispid -2147412102]
   TAutoVal onselect();

   //onbeforeunload:   [dispid -2147412073]
   void onbeforeunload(TAutoVal arg0);

   //onbeforeunload:   [dispid -2147412073]
   TAutoVal onbeforeunload();

   //createTextRange:   [dispid 2013]
   void createTextRange(TIHTMLTxtRangeProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTextContainer
// {3050F230-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTextContainer

DECLARE_INTERFACE_(IHTMLTextContainer, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLTextContainer methods:
   STDMETHOD_(HRESULT, createControlRange) (THIS_ IDispatch** Range) PURE; 
   STDMETHOD_(HRESULT, Get_scrollHeight) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_scrollWidth) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_scrollTop) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_scrollTop) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_scrollLeft) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_scrollLeft) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_onscroll) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onscroll) (THIS_ VARIANT* p) PURE; 
};

typedef IHTMLTextContainer* LPHTMLTEXTCONTAINER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTextContainer  {3050F230-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTextContainerProxy : public TAutoProxy
{
public:
   TIHTMLTextContainerProxy() : TAutoProxy(0x0) {}

   //createControlRange:   [dispid 1001]
   IDispatch* createControlRange();

   //scrollHeight:   [dispid 1002]
   long scrollHeight();

   //scrollWidth:   [dispid 1003]
   long scrollWidth();

   //scrollTop:   [dispid 1004]
   void scrollTop(long arg0);

   //scrollTop:   [dispid 1004]
   long scrollTop();

   //scrollLeft:   [dispid 1005]
   void scrollLeft(long arg0);

   //scrollLeft:   [dispid 1005]
   long scrollLeft();

   //onscroll:   [dispid -2147412081]
   void onscroll(TAutoVal arg0);

   //onscroll:   [dispid -2147412081]
   TAutoVal onscroll();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFontElement
// {3050F1D9-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFontElement

DECLARE_INTERFACE_(IHTMLFontElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLFontElement methods:
   STDMETHOD_(HRESULT, Set_color) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_color) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_face) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_face) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_size) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_size) (THIS_ VARIANT* p) PURE; 
};

typedef IHTMLFontElement* LPHTMLFONTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFontElement  {3050F1D9-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFontElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLFontElementProxy() : TIHTMLElementProxy(0x0) {}

   //color:   [dispid -2147413110]
   void color(TAutoVal arg0);

   //color:   [dispid -2147413110]
   TAutoVal color();

   //face:   [dispid -2147413094]
   void face(TAutoString arg0);

   //face:   [dispid -2147413094]
   TAutoString face();

   //size:   [dispid -2147413093]
   void size(TAutoVal arg0);

   //size:   [dispid -2147413093]
   TAutoVal size();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLAnchorElement
// {3050F1DA-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLAnchorElement

DECLARE_INTERFACE_(IHTMLAnchorElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLAnchorElement methods:
   STDMETHOD_(HRESULT, Set_href) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_href) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_target) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_target) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_rel) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_rel) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_rev) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_rev) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_urn) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_urn) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_Methods) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_Methods) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_host) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_host) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_hostname) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_hostname) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_pathname) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_pathname) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_port) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_port) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_protocol) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_protocol) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_search) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_search) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_hash) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_hash) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onblur) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onblur) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onfocus) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onfocus) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_accessKey) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_accessKey) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_protocolLong) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_mimeType) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_nameProp) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_tabIndex) (THIS_ short p) PURE; 
   STDMETHOD_(HRESULT, Get_tabIndex) (THIS_ short* p) PURE; 
   STDMETHOD_(HRESULT, focus) (THIS ) PURE; 
   STDMETHOD_(HRESULT, blur) (THIS ) PURE; 
};

typedef IHTMLAnchorElement* LPHTMLANCHORELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLAnchorElement  {3050F1DA-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLAnchorElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLAnchorElementProxy() : TIHTMLElementProxy(0x0) {}

   //href:   [dispid 0]
   void href(TAutoString arg0);

   //href:   [dispid 0]
   TAutoString href();

   //target:   [dispid 1003]
   void target(TAutoString arg0);

   //target:   [dispid 1003]
   TAutoString target();

   //rel:   [dispid 1005]
   void rel(TAutoString arg0);

   //rel:   [dispid 1005]
   TAutoString rel();

   //rev:   [dispid 1006]
   void rev(TAutoString arg0);

   //rev:   [dispid 1006]
   TAutoString rev();

   //urn:   [dispid 1007]
   void urn(TAutoString arg0);

   //urn:   [dispid 1007]
   TAutoString urn();

   //Methods:   [dispid 1008]
   void Methods(TAutoString arg0);

   //Methods:   [dispid 1008]
   TAutoString Methods();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //host:   [dispid 1012]
   void host(TAutoString arg0);

   //host:   [dispid 1012]
   TAutoString host();

   //hostname:   [dispid 1013]
   void hostname(TAutoString arg0);

   //hostname:   [dispid 1013]
   TAutoString hostname();

   //pathname:   [dispid 1014]
   void pathname(TAutoString arg0);

   //pathname:   [dispid 1014]
   TAutoString pathname();

   //port:   [dispid 1015]
   void port(TAutoString arg0);

   //port:   [dispid 1015]
   TAutoString port();

   //protocol:   [dispid 1016]
   void protocol(TAutoString arg0);

   //protocol:   [dispid 1016]
   TAutoString protocol();

   //search:   [dispid 1017]
   void search(TAutoString arg0);

   //search:   [dispid 1017]
   TAutoString search();

   //hash:   [dispid 1018]
   void hash(TAutoString arg0);

   //hash:   [dispid 1018]
   TAutoString hash();

   //onblur:   [dispid -2147412097]
   void onblur(TAutoVal arg0);

   //onblur:   [dispid -2147412097]
   TAutoVal onblur();

   //onfocus:   [dispid -2147412098]
   void onfocus(TAutoVal arg0);

   //onfocus:   [dispid -2147412098]
   TAutoVal onfocus();

   //accessKey:   [dispid 1022]
   void accessKey(TAutoString arg0);

   //accessKey:   [dispid 1022]
   TAutoString accessKey();

   //protocolLong:   [dispid 1031]
   TAutoString protocolLong();

   //mimeType:   [dispid 1030]
   TAutoString mimeType();

   //nameProp:   [dispid 1032]
   TAutoString nameProp();

   //tabIndex:   [dispid -2147418097]
   void tabIndex(short arg0);

   //tabIndex:   [dispid -2147418097]
   short tabIndex();

   //focus:   [dispid 1033]
   void focus();

   //blur:   [dispid 1034]
   void blur();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLLabelElement
// {3050F32A-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLLabelElement

DECLARE_INTERFACE_(IHTMLLabelElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLLabelElement methods:
   STDMETHOD_(HRESULT, Set_htmlFor) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_htmlFor) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_accessKey) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_accessKey) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLLabelElement* LPHTMLLABELELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLLabelElement  {3050F32A-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLLabelElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLLabelElementProxy() : TIHTMLElementProxy(0x0) {}

   //htmlFor:   [dispid 1000]
   void htmlFor(TAutoString arg0);

   //htmlFor:   [dispid 1000]
   TAutoString htmlFor();

   //accessKey:   [dispid 1001]
   void accessKey(TAutoString arg0);

   //accessKey:   [dispid 1001]
   TAutoString accessKey();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLListElement
// {3050F20E-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLListElement

DECLARE_INTERFACE_(IHTMLListElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLListElement methods:
};

typedef IHTMLListElement* LPHTMLLISTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLListElement  {3050F20E-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLListElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLListElementProxy() : TIHTMLElementProxy(0x0) {}
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLUListElement
// {3050F1DD-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLUListElement

DECLARE_INTERFACE_(IHTMLUListElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLUListElement methods:
   STDMETHOD_(HRESULT, Set_compact) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_compact) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_type) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLUListElement* LPHTMLULISTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLUListElement  {3050F1DD-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLUListElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLUListElementProxy() : TIHTMLElementProxy(0x0) {}

   //compact:   [dispid 1002]
   void compact(TBool arg0);

   //compact:   [dispid 1002]
   TBool compact();

   //type:   [dispid -2147413095]
   void type(TAutoString arg0);

   //type:   [dispid -2147413095]
   TAutoString type();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLOListElement
// {3050F1DE-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLOListElement

DECLARE_INTERFACE_(IHTMLOListElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLOListElement methods:
   STDMETHOD_(HRESULT, Set_compact) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_compact) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_Start) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_Start) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_type) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLOListElement* LPHTMLOLISTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLOListElement  {3050F1DE-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLOListElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLOListElementProxy() : TIHTMLElementProxy(0x0) {}

   //compact:   [dispid 1002]
   void compact(TBool arg0);

   //compact:   [dispid 1002]
   TBool compact();

   //Start:   [dispid 1003]
   void Start(long arg0);

   //Start:   [dispid 1003]
   long Start();

   //type:   [dispid -2147413095]
   void type(TAutoString arg0);

   //type:   [dispid -2147413095]
   TAutoString type();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLLIElement
// {3050F1E0-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLLIElement

DECLARE_INTERFACE_(IHTMLLIElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLLIElement methods:
   STDMETHOD_(HRESULT, Set_type) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_value) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_value) (THIS_ long* p) PURE; 
};

typedef IHTMLLIElement* LPHTMLLIELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLLIElement  {3050F1E0-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLLIElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLLIElementProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid -2147413095]
   void type(TAutoString arg0);

   //type:   [dispid -2147413095]
   TAutoString type();

   //value:   [dispid 1001]
   void value(long arg0);

   //value:   [dispid 1001]
   long value();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLBlockElement
// {3050F208-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLBlockElement

DECLARE_INTERFACE_(IHTMLBlockElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLBlockElement methods:
   STDMETHOD_(HRESULT, Set_clear) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_clear) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLBlockElement* LPHTMLBLOCKELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLBlockElement  {3050F208-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLBlockElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLBlockElementProxy() : TIHTMLElementProxy(0x0) {}

   //clear:   [dispid -2147413096]
   void clear(TAutoString arg0);

   //clear:   [dispid -2147413096]
   TAutoString clear();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDivElement
// {3050F200-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLDivElement

DECLARE_INTERFACE_(IHTMLDivElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLDivElement methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_noWrap) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_noWrap) (THIS_ VARIANT_BOOL* p) PURE;
};

typedef IHTMLDivElement* LPHTMLDIVELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLDivElement  {3050F200-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLDivElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLDivElementProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418040]
   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();

   //noWrap:   [dispid -2147413107]
   void noWrap(TBool arg0);

   //noWrap:   [dispid -2147413107]
   TBool noWrap();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDDElement
// {3050F1F2-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLDDElement

DECLARE_INTERFACE_(IHTMLDDElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLDDElement methods:
   STDMETHOD_(HRESULT, Set_noWrap) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_noWrap) (THIS_ VARIANT_BOOL* p) PURE; 
};

typedef IHTMLDDElement* LPHTMLDDELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLDDElement  {3050F1F2-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLDDElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLDDElementProxy() : TIHTMLElementProxy(0x0) {}

   //noWrap:   [dispid -2147413107]
   void noWrap(TBool arg0);

   //noWrap:   [dispid -2147413107]
   TBool noWrap();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDTElement
// {3050F1F3-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLDTElement

DECLARE_INTERFACE_(IHTMLDTElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLDTElement methods:
   STDMETHOD_(HRESULT, Set_noWrap) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_noWrap) (THIS_ VARIANT_BOOL* p) PURE; 
};

typedef IHTMLDTElement* LPHTMLDTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLDTElement  {3050F1F3-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLDTElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLDTElementProxy() : TIHTMLElementProxy(0x0) {}

   //noWrap:   [dispid -2147413107]
   void noWrap(TBool arg0);

   //noWrap:   [dispid -2147413107]
   TBool noWrap();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLBRElement
// {3050F1F0-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLBRElement

DECLARE_INTERFACE_(IHTMLBRElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLBRElement methods:
   STDMETHOD_(HRESULT, Set_clear) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_clear) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLBRElement* LPHTMLBRELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLBRElement  {3050F1F0-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLBRElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLBRElementProxy() : TIHTMLElementProxy(0x0) {}

   //clear:   [dispid -2147413096]
   void clear(TAutoString arg0);

   //clear:   [dispid -2147413096]
   TAutoString clear();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDListElement
// {3050F1F1-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLDListElement

DECLARE_INTERFACE_(IHTMLDListElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLDListElement methods:
   STDMETHOD_(HRESULT, Set_compact) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_compact) (THIS_ VARIANT_BOOL* p) PURE; 
};

typedef IHTMLDListElement* LPHTMLDLISTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLDListElement  {3050F1F1-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLDListElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLDListElementProxy() : TIHTMLElementProxy(0x0) {}

   //compact:   [dispid 1001]
   void compact(TBool arg0);

   //compact:   [dispid 1001]
   TBool compact();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLHRElement
// {3050F1F4-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLHRElement

DECLARE_INTERFACE_(IHTMLHRElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLHRElement methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_color) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_color) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_noShade) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_noShade) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_size) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_size) (THIS_ VARIANT* p) PURE; 
};

typedef IHTMLHRElement* LPHTMLHRELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLHRElement  {3050F1F4-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLHRElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLHRElementProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418040]
   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();

   //color:   [dispid -2147413110]
   void color(TAutoVal arg0);

   //color:   [dispid -2147413110]
   TAutoVal color();

   //noShade:   [dispid 1001]
   void noShade(TBool arg0);

   //noShade:   [dispid 1001]
   TBool noShade();

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //size:   [dispid -2147418106]
   void size(TAutoVal arg0);

   //size:   [dispid -2147418106]
   TAutoVal size();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLParaElement
// {3050F1F5-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLParaElement

DECLARE_INTERFACE_(IHTMLParaElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLParaElement methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLParaElement* LPHTMLPARAELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLParaElement  {3050F1F5-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLParaElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLParaElementProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418040]
   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLHeaderElement
// {3050F1F6-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLHeaderElement

DECLARE_INTERFACE_(IHTMLHeaderElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLHeaderElement methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLHeaderElement* LPHTMLHEADERELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLHeaderElement  {3050F1F6-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLHeaderElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLHeaderElementProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418040]
   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLSelectElement
// {3050F244-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLSelectElement

DECLARE_INTERFACE_(IHTMLSelectElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLSelectElement methods:
   STDMETHOD_(HRESULT, Set_size) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_size) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_multiple) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_multiple) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_options) (THIS_ IDispatch** p) PURE; 
   STDMETHOD_(HRESULT, Set_onchange) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onchange) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_selectedIndex) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_selectedIndex) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE; 
   STDMETHOD_(HRESULT, add) (THIS_ IHTMLElement* element, VARIANT before) PURE; 
   STDMETHOD_(HRESULT, remove) (THIS_ long index) PURE; 
   STDMETHOD_(HRESULT, Set_length) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE; 
   STDMETHOD_(HRESULT, item) (THIS_ VARIANT name, VARIANT index, IDispatch** pdisp) PURE; 
   STDMETHOD_(HRESULT, tags) (THIS_ VARIANT tagName, IDispatch** pdisp) PURE; 
};

typedef IHTMLSelectElement* LPHTMLSELECTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLSelectElement  {3050F244-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLSelectElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLSelectElementProxy() : TIHTMLElementProxy(0x0) {}

   //size:   [dispid 1002]
   void size(long arg0);

   //size:   [dispid 1002]
   long size();

   //multiple:   [dispid 1003]
   void multiple(TBool arg0);

   //multiple:   [dispid 1003]
   TBool multiple();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //options:   [dispid 1005]
   IDispatch* options();

   //onchange:   [dispid -2147412082]
   void onchange(TAutoVal arg0);

   //onchange:   [dispid -2147412082]
   TAutoVal onchange();

   //selectedIndex:   [dispid 1010]
   void selectedIndex(long arg0);

   //selectedIndex:   [dispid 1010]
   long selectedIndex();

   //type:   [dispid 1012]
   TAutoString type();

   //value:   [dispid 1011]
   void value(TAutoString arg0);

   //value:   [dispid 1011]
   TAutoString value();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);

   //add:   [dispid 1503]
   void add(IHTMLElement* element, TAutoVal before = TNoArg());

   //remove:   [dispid 1504]
   void remove(long index);

   //length:   [dispid 1500]
   void length(long arg0);

   //length:   [dispid 1500]
   long length();

   //_newEnum:   [dispid -4]
   void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

   //item:   [dispid 0]
   IDispatch* item(TAutoVal name = TNoArg(), TAutoVal index = TNoArg());

   //tags:   [dispid 1502]
   IDispatch* tags(TAutoVal tagName);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLOptionElement
// {3050F211-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLOptionElement

DECLARE_INTERFACE_(IHTMLOptionElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLOptionElement methods:
   STDMETHOD_(HRESULT, Set_selected) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_selected) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_defaultSelected) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_defaultSelected) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_index) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_index) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE; 
};

typedef IHTMLOptionElement* LPHTMLOPTIONELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLOptionElement  {3050F211-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLOptionElementProxy : public TAutoProxy
{
public:
   TIHTMLOptionElementProxy() : TAutoProxy(0x0) {}

   //selected:   [dispid 1001]
   void selected(TBool arg0);

   //selected:   [dispid 1001]
   TBool selected();

   //value:   [dispid 1002]
   void value(TAutoString arg0);

   //value:   [dispid 1002]
   TAutoString value();

   //defaultSelected:   [dispid 1003]
   void defaultSelected(TBool arg0);

   //defaultSelected:   [dispid 1003]
   TBool defaultSelected();

   //index:   [dispid 1005]
   void index(long arg0);

   //index:   [dispid 1005]
   long index();

   //text:   [dispid 1004]
   void text(TAutoString arg0);

   //text:   [dispid 1004]
   TAutoString text();

   //form:   [dispid 1006]
   void form(TIHTMLFormElementProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLOptionElementFactory
// {3050F38C-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLOptionElementFactory

DECLARE_INTERFACE_(IHTMLOptionElementFactory, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLOptionElementFactory methods:
   STDMETHOD_(HRESULT, create) (THIS_ VARIANT text, VARIANT value, VARIANT defaultSelected, VARIANT selected, IHTMLOptionElement** __MIDL_0017) PURE; 
};

typedef IHTMLOptionElementFactory* LPHTMLOPTIONELEMENTFACTORY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLOptionElementFactory  {3050F38C-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLOptionElementFactoryProxy : public TAutoProxy
{
public:
   TIHTMLOptionElementFactoryProxy() : TAutoProxy(0x0) {}

   //create:   [dispid 0]
   void create(TIHTMLOptionElementProxy& Obj, TAutoVal text = TNoArg(), TAutoVal value = TNoArg(), TAutoVal defaultSelected = TNoArg(), TAutoVal selected = TNoArg());
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLInputTextElement
// {3050F2A6-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLInputTextElement

DECLARE_INTERFACE_(IHTMLInputTextElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLInputTextElement methods:
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_status) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_status) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE;
   STDMETHOD_(HRESULT, Set_defaultValue) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_defaultValue) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_size) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_size) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_maxLength) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_maxLength) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, select) (THIS ) PURE;
   STDMETHOD_(HRESULT, Set_onchange) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onchange) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onselect) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onselect) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_readOnly) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_readOnly) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, createTextRange) (THIS_ IHTMLTxtRange** Range) PURE;
};

typedef IHTMLInputTextElement* LPHTMLINPUTTEXTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLInputTextElement  {3050F2A6-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLInputTextElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLInputTextElementProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid 2000]
   TAutoString type();

   //value:   [dispid -2147413011]
   void value(TAutoString arg0);

   //value:   [dispid -2147413011]
   TAutoString value();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //status:   [dispid 2001]
   void status(TAutoVal arg0);

   //status:   [dispid 2001]
   TAutoVal status();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);

   //defaultValue:   [dispid -2147413029]
   void defaultValue(TAutoString arg0);

   //defaultValue:   [dispid -2147413029]
   TAutoString defaultValue();

   //size:   [dispid 4001]
   void size(long arg0);

   //size:   [dispid 4001]
   long size();

   //maxLength:   [dispid 4002]
   void maxLength(long arg0);

   //maxLength:   [dispid 4002]
   long maxLength();

   //select:   [dispid 3003]
   void select();

   //onchange:   [dispid -2147412082]
   void onchange(TAutoVal arg0);

   //onchange:   [dispid -2147412082]
   TAutoVal onchange();

   //onselect:   [dispid -2147412102]
   void onselect(TAutoVal arg0);

   //onselect:   [dispid -2147412102]
   TAutoVal onselect();

   //readOnly:   [dispid 3001]
   void readOnly(TBool arg0);

   //readOnly:   [dispid 3001]
   TBool readOnly();

   //createTextRange:   [dispid 3005]
   void createTextRange(TIHTMLTxtRangeProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTextAreaElement
// {3050F2AA-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTextAreaElement

DECLARE_INTERFACE_(IHTMLTextAreaElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLTextAreaElement methods:
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_status) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_status) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE; 
   STDMETHOD_(HRESULT, Set_defaultValue) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_defaultValue) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, select) (THIS ) PURE; 
   STDMETHOD_(HRESULT, Set_onchange) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onchange) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onselect) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onselect) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_readOnly) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_readOnly) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_rows) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_rows) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_cols) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_cols) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_wrap) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_wrap) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, createTextRange) (THIS_ IHTMLTxtRange** Range) PURE; 
};

typedef IHTMLTextAreaElement* LPHTMLTEXTAREAELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTextAreaElement  {3050F2AA-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTextAreaElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTextAreaElementProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid 2000]
   TAutoString type();

   //value:   [dispid -2147413011]
   void value(TAutoString arg0);

   //value:   [dispid -2147413011]
   TAutoString value();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //status:   [dispid 2001]
   void status(TAutoVal arg0);

   //status:   [dispid 2001]
   TAutoVal status();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);

   //defaultValue:   [dispid -2147413029]
   void defaultValue(TAutoString arg0);

   //defaultValue:   [dispid -2147413029]
   TAutoString defaultValue();

   //select:   [dispid 3003]
   void select();

   //onchange:   [dispid -2147412082]
   void onchange(TAutoVal arg0);

   //onchange:   [dispid -2147412082]
   TAutoVal onchange();

   //onselect:   [dispid -2147412102]
   void onselect(TAutoVal arg0);

   //onselect:   [dispid -2147412102]
   TAutoVal onselect();

   //readOnly:   [dispid 3001]
   void readOnly(TBool arg0);

   //readOnly:   [dispid 3001]
   TBool readOnly();

   //rows:   [dispid 5001]
   void rows(long arg0);

   //rows:   [dispid 5001]
   long rows();

   //cols:   [dispid 5002]
   void cols(long arg0);

   //cols:   [dispid 5002]
   long cols();

   //wrap:   [dispid 5003]
   void wrap(TAutoString arg0);

   //wrap:   [dispid 5003]
   TAutoString wrap();

   //createTextRange:   [dispid 3005]
   void createTextRange(TIHTMLTxtRangeProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLInputButtonElement
// {3050F2B2-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLInputButtonElement

DECLARE_INTERFACE_(IHTMLInputButtonElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLInputButtonElement methods:
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_status) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_status) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE; 
   STDMETHOD_(HRESULT, createTextRange) (THIS_ IHTMLTxtRange** Range) PURE; 
};

typedef IHTMLInputButtonElement* LPHTMLINPUTBUTTONELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLInputButtonElement  {3050F2B2-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLInputButtonElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLInputButtonElementProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid 2000]
   TAutoString type();

   //value:   [dispid -2147413011]
   void value(TAutoString arg0);

   //value:   [dispid -2147413011]
   TAutoString value();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //status:   [dispid 2001]
   void status(TAutoVal arg0);

   //status:   [dispid 2001]
   TAutoVal status();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);

   //createTextRange:   [dispid 2004]
   void createTextRange(TIHTMLTxtRangeProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLButtonElement
// {3050F2BB-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLButtonElement

DECLARE_INTERFACE_(IHTMLButtonElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLButtonElement methods:
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_status) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_status) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE;
   STDMETHOD_(HRESULT, createTextRange) (THIS_ IHTMLTxtRange** Range) PURE;
};

typedef IHTMLButtonElement* LPHTMLBUTTONELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLButtonElement  {3050F2BB-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLButtonElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLButtonElementProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid 2000]
   TAutoString type();

   //value:   [dispid -2147413011]
   void value(TAutoString arg0);

   //value:   [dispid -2147413011]
   TAutoString value();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //status:   [dispid 2001]
   void status(TAutoVal arg0);

   //status:   [dispid 2001]
   TAutoVal status();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);

   //createTextRange:   [dispid 2004]
   void createTextRange(TIHTMLTxtRangeProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLInputFileElement
// {3050F2AD-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLInputFileElement

DECLARE_INTERFACE_(IHTMLInputFileElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLInputFileElement methods:
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_status) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_status) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE;
   STDMETHOD_(HRESULT, Set_size) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_size) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_maxLength) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_maxLength) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, select) (THIS ) PURE;
   STDMETHOD_(HRESULT, Set_onchange) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onchange) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onselect) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onselect) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE;
};

typedef IHTMLInputFileElement* LPHTMLINPUTFILEELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLInputFileElement  {3050F2AD-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLInputFileElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLInputFileElementProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid 2000]
   TAutoString type();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //status:   [dispid 2001]
   void status(TAutoVal arg0);

   //status:   [dispid 2001]
   TAutoVal status();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);

   //size:   [dispid 4001]
   void size(long arg0);

   //size:   [dispid 4001]
   long size();

   //maxLength:   [dispid 4002]
   void maxLength(long arg0);

   //maxLength:   [dispid 4002]
   long maxLength();

   //select:   [dispid 3003]
   void select();

   //onchange:   [dispid -2147412082]
   void onchange(TAutoVal arg0);

   //onchange:   [dispid -2147412082]
   TAutoVal onchange();

   //onselect:   [dispid -2147412102]
   void onselect(TAutoVal arg0);

   //onselect:   [dispid -2147412102]
   TAutoVal onselect();

   //value:   [dispid -2147413011]
   void value(TAutoString arg0);

   //value:   [dispid -2147413011]
   TAutoString value();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLMarqueeElement
// {3050F2B5-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLMarqueeElement

DECLARE_INTERFACE_(IHTMLMarqueeElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLMarqueeElement methods:
   STDMETHOD_(HRESULT, Set_bgColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_bgColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_scrollDelay) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_scrollDelay) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_direction) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_direction) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_behavior) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_behavior) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_scrollAmount) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_scrollAmount) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_loop) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_loop) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_vspace) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_vspace) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_hspace) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_hspace) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_onfinish) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onfinish) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onstart) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onstart) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onbounce) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onbounce) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_height) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_height) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_trueSpeed) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_trueSpeed) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Start) (THIS ) PURE; 
   STDMETHOD_(HRESULT, stop) (THIS ) PURE; 
};

typedef IHTMLMarqueeElement* LPHTMLMARQUEEELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLMarqueeElement  {3050F2B5-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLMarqueeElementProxy : public TAutoProxy
{
public:
   TIHTMLMarqueeElementProxy() : TAutoProxy(0x0) {}

   //bgColor:   [dispid -501]
   void bgColor(TAutoVal arg0);

   //bgColor:   [dispid -501]
   TAutoVal bgColor();

   //scrollDelay:   [dispid 6000]
   void scrollDelay(long arg0);

   //scrollDelay:   [dispid 6000]
   long scrollDelay();

   //direction:   [dispid 6001]
   void direction(TAutoString arg0);

   //direction:   [dispid 6001]
   TAutoString direction();

   //behavior:   [dispid 6002]
   void behavior(TAutoString arg0);

   //behavior:   [dispid 6002]
   TAutoString behavior();

   //scrollAmount:   [dispid 6003]
   void scrollAmount(long arg0);

   //scrollAmount:   [dispid 6003]
   long scrollAmount();

   //loop:   [dispid 6004]
   void loop(long arg0);

   //loop:   [dispid 6004]
   long loop();

   //vspace:   [dispid 6005]
   void vspace(long arg0);

   //vspace:   [dispid 6005]
   long vspace();

   //hspace:   [dispid 6006]
   void hspace(long arg0);

   //hspace:   [dispid 6006]
   long hspace();

   //onfinish:   [dispid -2147412086]
   void onfinish(TAutoVal arg0);

   //onfinish:   [dispid -2147412086]
   TAutoVal onfinish();

   //onstart:   [dispid -2147412085]
   void onstart(TAutoVal arg0);

   //onstart:   [dispid -2147412085]
   TAutoVal onstart();

   //onbounce:   [dispid -2147412092]
   void onbounce(TAutoVal arg0);

   //onbounce:   [dispid -2147412092]
   TAutoVal onbounce();

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //height:   [dispid -2147418106]
   void height(TAutoVal arg0);

   //height:   [dispid -2147418106]
   TAutoVal height();

   //trueSpeed:   [dispid 6007]
   void trueSpeed(TBool arg0);

   //trueSpeed:   [dispid 6007]
   TBool trueSpeed();

   //Start:   [dispid 6010]
   void Start();

   //stop:   [dispid 6011]
   void stop();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLOptionButtonElement
// {3050F2BC-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLOptionButtonElement

DECLARE_INTERFACE_(IHTMLOptionButtonElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLOptionButtonElement methods:
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_checked) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_checked) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_defaultChecked) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_defaultChecked) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_onchange) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onchange) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_status) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_status) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_indeterminate) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_indeterminate) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE; 
};

typedef IHTMLOptionButtonElement* LPHTMLOPTIONBUTTONELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLOptionButtonElement  {3050F2BC-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLOptionButtonElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLOptionButtonElementProxy() : TIHTMLElementProxy(0x0) {}

   //value:   [dispid -2147413011]
   void value(TAutoString arg0);

   //value:   [dispid -2147413011]
   TAutoString value();

   //type:   [dispid 1000]
   TAutoString type();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //checked:   [dispid 1001]
   void checked(TBool arg0);

   //checked:   [dispid 1001]
   TBool checked();

   //defaultChecked:   [dispid 1002]
   void defaultChecked(TBool arg0);

   //defaultChecked:   [dispid 1002]
   TBool defaultChecked();

   //onchange:   [dispid -2147412082]
   void onchange(TAutoVal arg0);

   //onchange:   [dispid -2147412082]
   TAutoVal onchange();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //status:   [dispid 1003]
   void status(TBool arg0);

   //status:   [dispid 1003]
   TBool status();

   //indeterminate:   [dispid 1004]
   void indeterminate(TBool arg0);

   //indeterminate:   [dispid 1004]
   TBool indeterminate();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTitleElement
// {3050F322-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTitleElement

DECLARE_INTERFACE_(IHTMLTitleElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLTitleElement methods:
   STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* p) PURE;
};

typedef IHTMLTitleElement* LPHTMLTITLEELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTitleElement  {3050F322-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTitleElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTitleElementProxy() : TIHTMLElementProxy(0x0) {}

   //text:   [dispid -2147413011]
   void text(TAutoString arg0);

   //text:   [dispid -2147413011]
   TAutoString text();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLMetaElement
// {3050F203-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLMetaElement

DECLARE_INTERFACE_(IHTMLMetaElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLMetaElement methods:
   STDMETHOD_(HRESULT, Set_httpEquiv) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_httpEquiv) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_content) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_content) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_url) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_charset) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_charset) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLMetaElement* LPHTMLMETAELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLMetaElement  {3050F203-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLMetaElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLMetaElementProxy() : TIHTMLElementProxy(0x0) {}

   //httpEquiv:   [dispid 1001]
   void httpEquiv(TAutoString arg0);

   //httpEquiv:   [dispid 1001]
   TAutoString httpEquiv();

   //content:   [dispid 1002]
   void content(TAutoString arg0);

   //content:   [dispid 1002]
   TAutoString content();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //url:   [dispid 1003]
   void url(TAutoString arg0);

   //url:   [dispid 1003]
   TAutoString url();

   //charset:   [dispid 1013]
   void charset(TAutoString arg0);

   //charset:   [dispid 1013]
   TAutoString charset();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLBaseElement
// {3050F204-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLBaseElement

DECLARE_INTERFACE_(IHTMLBaseElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLBaseElement methods:
   STDMETHOD_(HRESULT, Set_href) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_href) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_target) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_target) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLBaseElement* LPHTMLBASEELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLBaseElement  {3050F204-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLBaseElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLBaseElementProxy() : TIHTMLElementProxy(0x0) {}

   //href:   [dispid 1003]
   void href(TAutoString arg0);

   //href:   [dispid 1003]
   TAutoString href();

   //target:   [dispid 1004]
   void target(TAutoString arg0);

   //target:   [dispid 1004]
   TAutoString target();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLIsIndexElement
// {3050F206-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLIsIndexElement

DECLARE_INTERFACE_(IHTMLIsIndexElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLIsIndexElement methods:
   STDMETHOD_(HRESULT, Set_prompt) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_prompt) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_action) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_action) (THIS_ BSTR* p) PURE;
};

typedef IHTMLIsIndexElement* LPHTMLISINDEXELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLIsIndexElement  {3050F206-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLIsIndexElementProxy : public TAutoProxy
{
public:
   TIHTMLIsIndexElementProxy() : TAutoProxy(0x0) {}

   //prompt:   [dispid 1010]
   void prompt(TAutoString arg0);

   //prompt:   [dispid 1010]
   TAutoString prompt();

   //action:   [dispid 1011]
   void action(TAutoString arg0);

   //action:   [dispid 1011]
   TAutoString action();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLNextIdElement
// {3050F207-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLNextIdElement

DECLARE_INTERFACE_(IHTMLNextIdElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLNextIdElement methods:
   STDMETHOD_(HRESULT, Set_n) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_n) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLNextIdElement* LPHTMLNEXTIDELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLNextIdElement  {3050F207-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLNextIdElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLNextIdElementProxy() : TIHTMLElementProxy(0x0) {}

   //n:   [dispid 1012]
   void n(TAutoString arg0);

   //n:   [dispid 1012]
   TAutoString n();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLBaseFontElement
// {3050F202-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLBaseFontElement

DECLARE_INTERFACE_(IHTMLBaseFontElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLBaseFontElement methods:
   STDMETHOD_(HRESULT, Set_color) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_color) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_face) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_face) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_size) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_size) (THIS_ long* p) PURE; 
};

typedef IHTMLBaseFontElement* LPHTMLBASEFONTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLBaseFontElement  {3050F202-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLBaseFontElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLBaseFontElementProxy() : TIHTMLElementProxy(0x0) {}

   //color:   [dispid -2147413110]
   void color(TAutoVal arg0);

   //color:   [dispid -2147413110]
   TAutoVal color();

   //face:   [dispid -2147413094]
   void face(TAutoString arg0);

   //face:   [dispid -2147413094]
   TAutoString face();

   //size:   [dispid -2147413086]
   void size(long arg0);

   //size:   [dispid -2147413086]
   long size();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLUnknownElement
// {3050F209-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLUnknownElement

DECLARE_INTERFACE_(IHTMLUnknownElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLUnknownElement methods:
};

typedef IHTMLUnknownElement* LPHTMLUNKNOWNELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLUnknownElement  {3050F209-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLUnknownElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLUnknownElementProxy() : TIHTMLElementProxy(0x0) {}
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IOmHistory
// {FECEAAA2-8405-11CF-8BA1-00AA00476DA6}

#undef  INTERFACE
#define INTERFACE IOmHistory

DECLARE_INTERFACE_(IOmHistory, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IOmHistory methods:
   STDMETHOD_(HRESULT, Get_length) (THIS_ short* p) PURE; 
   STDMETHOD_(HRESULT, back) (THIS_ VARIANT* pvargdistance) PURE; 
   STDMETHOD_(HRESULT, forward) (THIS_ VARIANT* pvargdistance) PURE; 
   STDMETHOD_(HRESULT, go) (THIS_ VARIANT* pvargdistance) PURE; 
};

typedef IOmHistory* LPOMHISTORY;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IOmHistory  {FECEAAA2-8405-11CF-8BA1-00AA00476DA6}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIOmHistoryProxy : public TAutoProxy
{
public:
   TIOmHistoryProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1]
   short length();

   //back:   [dispid 2]
   void back(TAutoVal* pvargdistance = 0);

   //forward:   [dispid 3]
   void forward(TAutoVal* pvargdistance = 0);

   //go:   [dispid 4]
   void go(TAutoVal* pvargdistance = 0);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLMimeTypesCollection
// {3050F3FC-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLMimeTypesCollection

DECLARE_INTERFACE_(IHTMLMimeTypesCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLMimeTypesCollection methods:
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
};

typedef IHTMLMimeTypesCollection* LPHTMLMIMETYPESCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLMimeTypesCollection  {3050F3FC-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLMimeTypesCollectionProxy : public TAutoProxy
{
public:
   TIHTMLMimeTypesCollectionProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1]
   long length();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLPluginsCollection
// {3050F3FD-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLPluginsCollection

DECLARE_INTERFACE_(IHTMLPluginsCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLPluginsCollection methods:
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, refresh) (THIS_ VARIANT_BOOL reload) PURE; 
};

typedef IHTMLPluginsCollection* LPHTMLPLUGINSCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLPluginsCollection  {3050F3FD-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLPluginsCollectionProxy : public TAutoProxy
{
public:
   TIHTMLPluginsCollectionProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1]
   long length();

   //refresh:   [dispid 2]
   void refresh(TBool reload);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLOpsProfile
// {3050F401-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLOpsProfile

DECLARE_INTERFACE_(IHTMLOpsProfile, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLOpsProfile methods:
   STDMETHOD_(HRESULT, addRequest) (THIS_ BSTR name, VARIANT reserved, VARIANT_BOOL* Success) PURE; 
   STDMETHOD_(HRESULT, clearRequest) (THIS ) PURE; 
   STDMETHOD_(HRESULT, doRequest) (THIS_ VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) PURE; 
   STDMETHOD_(HRESULT, getAttribute) (THIS_ BSTR name, BSTR* value) PURE; 
   STDMETHOD_(HRESULT, setAttribute) (THIS_ BSTR name, BSTR value, VARIANT prefs, VARIANT_BOOL* Success) PURE; 
   STDMETHOD_(HRESULT, commitChanges) (THIS_ VARIANT_BOOL* Success) PURE; 
   STDMETHOD_(HRESULT, addReadRequest) (THIS_ BSTR name, VARIANT reserved, VARIANT_BOOL* Success) PURE; 
   STDMETHOD_(HRESULT, doReadRequest) (THIS_ VARIANT usage, VARIANT fname, VARIANT domain, VARIANT path, VARIANT expire, VARIANT reserved) PURE; 
   STDMETHOD_(HRESULT, doWriteRequest) (THIS_ VARIANT_BOOL* Success) PURE; 
};

typedef IHTMLOpsProfile* LPHTMLOPSPROFILE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLOpsProfile  {3050F401-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLOpsProfileProxy : public TAutoProxy
{
public:
   TIHTMLOpsProfileProxy() : TAutoProxy(0x0) {}

   //addRequest:   [dispid 1]
   TBool addRequest(TAutoString name, TAutoVal reserved = TNoArg());

   //clearRequest:   [dispid 2]
   void clearRequest();

   //doRequest:   [dispid 3]
   void doRequest(TAutoVal usage, TAutoVal fname = TNoArg(), TAutoVal domain = TNoArg(), TAutoVal path = TNoArg(), TAutoVal expire = TNoArg(), TAutoVal reserved = TNoArg());

   //getAttribute:   [dispid 4]
   TAutoString getAttribute(TAutoString name);

   //setAttribute:   [dispid 5]
   TBool setAttribute(TAutoString name, TAutoString value, TAutoVal prefs = TNoArg());

   //commitChanges:   [dispid 6]
   TBool commitChanges();

   //addReadRequest:   [dispid 7]
   TBool addReadRequest(TAutoString name, TAutoVal reserved = TNoArg());

   //doReadRequest:   [dispid 8]
   void doReadRequest(TAutoVal usage, TAutoVal fname = TNoArg(), TAutoVal domain = TNoArg(), TAutoVal path = TNoArg(), TAutoVal expire = TNoArg(), TAutoVal reserved = TNoArg());

   //doWriteRequest:   [dispid 9]
   TBool doWriteRequest();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IOmNavigator
// {FECEAAA5-8405-11CF-8BA1-00AA00476DA6}

#undef  INTERFACE
#define INTERFACE IOmNavigator

DECLARE_INTERFACE_(IOmNavigator, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IOmNavigator methods:
   STDMETHOD_(HRESULT, Get_appCodeName) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_appName) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_appVersion) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_userAgent) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, javaEnabled) (THIS_ VARIANT_BOOL* enabled) PURE; 
   STDMETHOD_(HRESULT, taintEnabled) (THIS_ VARIANT_BOOL* enabled) PURE; 
   STDMETHOD_(HRESULT, Get_mimeTypes) (THIS_ IHTMLMimeTypesCollection** p) PURE; 
   STDMETHOD_(HRESULT, Get_plugins) (THIS_ IHTMLPluginsCollection** p) PURE; 
   STDMETHOD_(HRESULT, Get_cookieEnabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_opsProfile) (THIS_ IHTMLOpsProfile** p) PURE; 
   STDMETHOD_(HRESULT, toString) (THIS_ BSTR* String) PURE; 
   STDMETHOD_(HRESULT, Get_cpuClass) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_systemLanguage) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_browserLanguage) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_userLanguage) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_platform) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_appMinorVersion) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_connectionSpeed) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_onLine) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_userProfile) (THIS_ IHTMLOpsProfile** p) PURE; 
};

typedef IOmNavigator* LPOMNAVIGATOR;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IOmNavigator  {FECEAAA5-8405-11CF-8BA1-00AA00476DA6}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIOmNavigatorProxy : public TAutoProxy
{
public:
   TIOmNavigatorProxy() : TAutoProxy(0x0) {}

   //appCodeName:   [dispid 1]
   TAutoString appCodeName();

   //appName:   [dispid 2]
   TAutoString appName();

   //appVersion:   [dispid 3]
   TAutoString appVersion();

   //userAgent:   [dispid 4]
   TAutoString userAgent();

   //javaEnabled:   [dispid 5]
   TBool javaEnabled();

   //taintEnabled:   [dispid 6]
   TBool taintEnabled();

   //mimeTypes:   [dispid 7]
   void mimeTypes(TIHTMLMimeTypesCollectionProxy& Obj);

   //plugins:   [dispid 8]
   void plugins(TIHTMLPluginsCollectionProxy& Obj);

   //cookieEnabled:   [dispid 9]
   TBool cookieEnabled();

   //opsProfile:   [dispid 10]
   void opsProfile(TIHTMLOpsProfileProxy& Obj);

   //toString:   [dispid 11]
   TAutoString toString();

   //cpuClass:   [dispid 12]
   TAutoString cpuClass();

   //systemLanguage:   [dispid 13]
   TAutoString systemLanguage();

   //browserLanguage:   [dispid 14]
   TAutoString browserLanguage();

   //userLanguage:   [dispid 15]
   TAutoString userLanguage();

   //platform:   [dispid 16]
   TAutoString platform();

   //appMinorVersion:   [dispid 17]
   TAutoString appMinorVersion();

   //connectionSpeed:   [dispid 18]
   long connectionSpeed();

   //onLine:   [dispid 19]
   TBool onLine();

   //userProfile:   [dispid 20]
   void userProfile(TIHTMLOpsProfileProxy& Obj);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLLocation
// {163BB1E0-6E00-11CF-837A-48DC04C10000}

#undef  INTERFACE
#define INTERFACE IHTMLLocation

DECLARE_INTERFACE_(IHTMLLocation, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLLocation methods:
   STDMETHOD_(HRESULT, Set_href) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_href) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_protocol) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_protocol) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_host) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_host) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_hostname) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_hostname) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_port) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_port) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_pathname) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_pathname) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_search) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_search) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_hash) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_hash) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, reload) (THIS_ VARIANT_BOOL flag) PURE; 
   STDMETHOD_(HRESULT, replace) (THIS_ BSTR bstr) PURE; 
   STDMETHOD_(HRESULT, assign) (THIS_ BSTR bstr) PURE; 
   STDMETHOD_(HRESULT, toString) (THIS_ BSTR* String) PURE; 
};

typedef IHTMLLocation* LPHTMLLOCATION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLLocation  {163BB1E0-6E00-11CF-837A-48DC04C10000}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLLocationProxy : public TAutoProxy
{
public:
   TIHTMLLocationProxy() : TAutoProxy(0x0) {}

   //href:   [dispid 0]
   void href(TAutoString arg0);

   //href:   [dispid 0]
   TAutoString href();

   //protocol:   [dispid 1]
   void protocol(TAutoString arg0);

   //protocol:   [dispid 1]
   TAutoString protocol();

   //host:   [dispid 2]
   void host(TAutoString arg0);

   //host:   [dispid 2]
   TAutoString host();

   //hostname:   [dispid 3]
   void hostname(TAutoString arg0);

   //hostname:   [dispid 3]
   TAutoString hostname();

   //port:   [dispid 4]
   void port(TAutoString arg0);

   //port:   [dispid 4]
   TAutoString port();

   //pathname:   [dispid 5]
   void pathname(TAutoString arg0);

   //pathname:   [dispid 5]
   TAutoString pathname();

   //search:   [dispid 6]
   void search(TAutoString arg0);

   //search:   [dispid 6]
   TAutoString search();

   //hash:   [dispid 7]
   void hash(TAutoString arg0);

   //hash:   [dispid 7]
   TAutoString hash();

   //reload:   [dispid 8]
   void reload(TBool flag);

   //replace:   [dispid 9]
   void replace(TAutoString bstr);

   //assign:   [dispid 10]
   void assign(TAutoString bstr);

   //toString:   [dispid 11]
   TAutoString toString();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLScreen
// {3050F35C-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLScreen

DECLARE_INTERFACE_(IHTMLScreen, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLScreen methods:
   STDMETHOD_(HRESULT, Get_colorDepth) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_bufferDepth) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_bufferDepth) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_width) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_height) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_updateInterval) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_updateInterval) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_availHeight) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_availWidth) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_fontSmoothingEnabled) (THIS_ VARIANT_BOOL* p) PURE; 
};

typedef IHTMLScreen* LPHTMLSCREEN;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLScreen  {3050F35C-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLScreenProxy : public TAutoProxy
{
public:
   TIHTMLScreenProxy() : TAutoProxy(0x0) {}

   //colorDepth:   [dispid 1001]
   long colorDepth();

   //bufferDepth:   [dispid 1002]
   void bufferDepth(long arg0);

   //bufferDepth:   [dispid 1002]
   long bufferDepth();

   //width:   [dispid 1003]
   long width();

   //height:   [dispid 1004]
   long height();

   //updateInterval:   [dispid 1005]
   void updateInterval(long arg0);

   //updateInterval:   [dispid 1005]
   long updateInterval();

   //availHeight:   [dispid 1006]
   long availHeight();

   //availWidth:   [dispid 1007]
   long availWidth();

   //fontSmoothingEnabled:   [dispid 1008]
   TBool fontSmoothingEnabled();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFramesCollection2
// {332C4426-26CB-11D0-B483-00C04FD90119}

#undef  INTERFACE
#define INTERFACE IHTMLFramesCollection2

DECLARE_INTERFACE_(IHTMLFramesCollection2, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLFramesCollection2 methods:
   STDMETHOD_(HRESULT, item) (THIS_ VARIANT* pvarIndex, VARIANT* pvarResult) PURE; 
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
};

typedef IHTMLFramesCollection2* LPHTMLFRAMESCOLLECTION2;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLWindow2
// {332C4427-26CB-11D0-B483-00C04FD90119}

#undef  INTERFACE
#define INTERFACE IHTMLWindow2

DECLARE_INTERFACE_(IHTMLWindow2, IHTMLFramesCollection2)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
   //IHTMLFramesCollection2 methods:
   STDMETHOD_(HRESULT, item) (THIS_ VARIANT* pvarIndex, VARIANT* pvarResult) PURE; 
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
#endif
   //IHTMLWindow2 methods:
   STDMETHOD_(HRESULT, Get_frames) (THIS_ IHTMLFramesCollection2** p) PURE; 
   STDMETHOD_(HRESULT, Set_defaultStatus) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_defaultStatus) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_status) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_status) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, setTimeout) (THIS_ BSTR expression, long msec, VARIANT* language, long* timerID) PURE; 
   STDMETHOD_(HRESULT, clearTimeout) (THIS_ long timerID) PURE; 
   STDMETHOD_(HRESULT, alert) (THIS_ BSTR message) PURE; 
   STDMETHOD_(HRESULT, confirm) (THIS_ BSTR message, VARIANT_BOOL* confirmed) PURE; 
   STDMETHOD_(HRESULT, prompt) (THIS_ BSTR message, BSTR defstr, VARIANT* textdata) PURE; 
   STDMETHOD_(HRESULT, Get_Image) (THIS_ IHTMLImageElementFactory** p) PURE; 
   STDMETHOD_(HRESULT, Get_location) (THIS_ IHTMLLocation** p) PURE; 
   STDMETHOD_(HRESULT, Get_history) (THIS_ IOmHistory** p) PURE; 
   STDMETHOD_(HRESULT, close) (THIS ) PURE; 
   STDMETHOD_(HRESULT, Set_opener) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_opener) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_navigator) (THIS_ IOmNavigator** p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_Parent) (THIS_ IHTMLWindow2** p) PURE; 
   STDMETHOD_(HRESULT, open) (THIS_ BSTR url, BSTR name, BSTR features, VARIANT_BOOL replace, IHTMLWindow2** pomWindowResult) PURE; 
   STDMETHOD_(HRESULT, Get_self) (THIS_ IHTMLWindow2** p) PURE; 
   STDMETHOD_(HRESULT, Get_top) (THIS_ IHTMLWindow2** p) PURE; 
   STDMETHOD_(HRESULT, Get_window) (THIS_ IHTMLWindow2** p) PURE; 
   STDMETHOD_(HRESULT, navigate) (THIS_ BSTR url) PURE; 
   STDMETHOD_(HRESULT, Set_onfocus) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onfocus) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onblur) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onblur) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onbeforeunload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onbeforeunload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onunload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onunload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onhelp) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onhelp) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onerror) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onerror) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onresize) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onresize) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onscroll) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onscroll) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_document) (THIS_ IHTMLDocument2** p) PURE;
   STDMETHOD_(HRESULT, Get_event) (THIS_ IHTMLEventObj** p) PURE; 
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE; 
   STDMETHOD_(HRESULT, showModalDialog) (THIS_ BSTR dialog, VARIANT* varArgIn, VARIANT* varOptions, VARIANT* varArgOut) PURE; 
   STDMETHOD_(HRESULT, showHelp) (THIS_ BSTR helpURL, VARIANT helpArg, BSTR features) PURE; 
   STDMETHOD_(HRESULT, Get_screen) (THIS_ IHTMLScreen** p) PURE; 
   STDMETHOD_(HRESULT, Get_Option) (THIS_ IHTMLOptionElementFactory** p) PURE; 
   STDMETHOD_(HRESULT, focus) (THIS ) PURE; 
   STDMETHOD_(HRESULT, Get_closed) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, blur) (THIS ) PURE; 
   STDMETHOD_(HRESULT, scroll) (THIS_ long x, long y) PURE; 
   STDMETHOD_(HRESULT, Get_clientInformation) (THIS_ IOmNavigator** p) PURE; 
   STDMETHOD_(HRESULT, setInterval) (THIS_ BSTR expression, long msec, VARIANT* language, long* timerID) PURE; 
   STDMETHOD_(HRESULT, clearInterval) (THIS_ long timerID) PURE; 
   STDMETHOD_(HRESULT, Set_offscreenBuffering) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_offscreenBuffering) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, execScript) (THIS_ BSTR code, BSTR language, VARIANT* pvarRet) PURE; 
   STDMETHOD_(HRESULT, toString) (THIS_ BSTR* String) PURE; 
   STDMETHOD_(HRESULT, scrollBy) (THIS_ long x, long y) PURE; 
   STDMETHOD_(HRESULT, scrollTo) (THIS_ long x, long y) PURE; 
   STDMETHOD_(HRESULT, moveTo) (THIS_ long x, long y) PURE; 
   STDMETHOD_(HRESULT, moveBy) (THIS_ long x, long y) PURE; 
   STDMETHOD_(HRESULT, resizeTo) (THIS_ long x, long y) PURE; 
   STDMETHOD_(HRESULT, resizeBy) (THIS_ long x, long y) PURE; 
   STDMETHOD_(HRESULT, Get_external) (THIS_ IDispatch** p) PURE; 
};

typedef IHTMLWindow2* LPHTMLWINDOW2;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLWindow2  {332C4427-26CB-11D0-B483-00C04FD90119}//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]

class _PWCLASS TIHTMLWindow2Proxy : public TAutoProxy{
public:

   TIHTMLWindow2Proxy() : TAutoProxy(0x0) {}
   //item:   [dispid 0]
   TAutoVal item(TAutoVal* pvarIndex);

   //length:   [dispid 1001]
   long length();

   //frames:   [dispid 1100]
   void frames(TIHTMLFramesCollection2Proxy& Obj);

   //defaultStatus:   [dispid 1101]
   void defaultStatus(TAutoString arg0);

   //defaultStatus:   [dispid 1101]
   TAutoString defaultStatus();

   //status:   [dispid 1102]
   void status(TAutoString arg0);

   //status:   [dispid 1102]
   TAutoString status();

   //setTimeout:   [dispid 1103]
   long setTimeout(TAutoString expression, long msec, TAutoVal* language = 0);

   //clearTimeout:   [dispid 1104]
   void clearTimeout(long timerID);

   //alert:   [dispid 1105]
   void alert(TAutoString message);

   //confirm:   [dispid 1110]
   TBool confirm(TAutoString message);

   //prompt:   [dispid 1111]
   TAutoVal prompt(TAutoString message, TAutoString defstr);

   //Image:   [dispid 1125]
   void Image(TIHTMLImageElementFactoryProxy& Obj);

   //location:   [dispid 14]
   void location(TIHTMLLocationProxy& Obj);

   //history:   [dispid 2]
   void history(TIOmHistoryProxy& Obj);

   //close:   [dispid 3]
   void close();

   //opener:   [dispid 4]
   void opener(TAutoVal arg0);

   //opener:   [dispid 4]
   TAutoVal opener();

   //navigator:   [dispid 5]
   void navigator(TIOmNavigatorProxy& Obj);

   //name:   [dispid 11]
   void name(TAutoString arg0);

   //name:   [dispid 11]
   TAutoString name();

   //Parent:   [dispid 12]
   void Parent(TIHTMLWindow2Proxy& Obj);

   //open:   [dispid 13]
   void open(TIHTMLWindow2Proxy& Obj, TAutoString url, TAutoString name, TAutoString features, TBool replace);

   //self:   [dispid 20]
   void self(TIHTMLWindow2Proxy& Obj);

   //top:   [dispid 21]
   void top(TIHTMLWindow2Proxy& Obj);

   //window:   [dispid 22]
   void window(TIHTMLWindow2Proxy& Obj);

   //navigate:   [dispid 25]   void navigate(TAutoString url);

   //onfocus:   [dispid -2147412098]
   void onfocus(TAutoVal arg0);

   //onfocus:   [dispid -2147412098]
   TAutoVal onfocus();

   //onblur:   [dispid -2147412097]
   void onblur(TAutoVal arg0);

   //onblur:   [dispid -2147412097]
   TAutoVal onblur();

   //onload:   [dispid -2147412080]
   void onload(TAutoVal arg0);

   //onload:   [dispid -2147412080]
   TAutoVal onload();

   //onbeforeunload:   [dispid -2147412073]
   void onbeforeunload(TAutoVal arg0);

   //onbeforeunload:   [dispid -2147412073]
   TAutoVal onbeforeunload();

   //onunload:   [dispid -2147412079]
   void onunload(TAutoVal arg0);

   //onunload:   [dispid -2147412079]
   TAutoVal onunload();

   //onhelp:   [dispid -2147412099]
   void onhelp(TAutoVal arg0);

   //onhelp:   [dispid -2147412099]
   TAutoVal onhelp();

   //onerror:   [dispid -2147412083]
   void onerror(TAutoVal arg0);

   //onerror:   [dispid -2147412083]
   TAutoVal onerror();

   //onresize:   [dispid -2147412076]
   void onresize(TAutoVal arg0);

   //onresize:   [dispid -2147412076]
   TAutoVal onresize();

   //onscroll:   [dispid -2147412081]
   void onscroll(TAutoVal arg0);

   //onscroll:   [dispid -2147412081]
   TAutoVal onscroll();

   //document:   [dispid 1151]
   void document(TIHTMLDocument2Proxy& Obj);

   //event:   [dispid 1152]
   void event(TIHTMLEventObjProxy& Obj);

   //showModalDialog:   [dispid 1154]
   TAutoVal showModalDialog(TAutoString dialog, TAutoVal* varArgIn = 0, TAutoVal* varOptions = 0);

   //showHelp:   [dispid 1155]
   void showHelp(TAutoString helpURL, TAutoVal helpArg, TAutoString features);

   //screen:   [dispid 1156]
   void screen(TIHTMLScreenProxy& Obj);

   //Option:   [dispid 1157]
   void Option(TIHTMLOptionElementFactoryProxy& Obj);

   //focus:   [dispid 1158]
   void focus();

   //closed:   [dispid 23]
   TBool closed();

   //blur:   [dispid 1159]
   void blur();

   //scroll:   [dispid 1160]
   void scroll(long x, long y);

   //clientInformation:   [dispid 1161]
   void clientInformation(TIOmNavigatorProxy& Obj);

   //setInterval:   [dispid 1162]
   long setInterval(TAutoString expression, long msec, TAutoVal* language = 0);

   //clearInterval:   [dispid 1163]   void clearInterval(long timerID);

   //offscreenBuffering:   [dispid 1164]
   void offscreenBuffering(TAutoVal arg0);

   //offscreenBuffering:   [dispid 1164]
   TAutoVal offscreenBuffering();

   //execScript:   [dispid 1165]
   TAutoVal execScript(TAutoString code, TAutoString language);

   //toString:   [dispid 1166]
   TAutoString toString();

   //scrollBy:   [dispid 1167]
   void scrollBy(long x, long y);

   //scrollTo:   [dispid 1168]
   void scrollTo(long x, long y);

   //moveTo:   [dispid 6]
   void moveTo(long x, long y);

   //moveBy:   [dispid 7]
   void moveBy(long x, long y);

   //resizeTo:   [dispid 9]
   void resizeTo(long x, long y);

   //resizeBy:   [dispid 8]
   void resizeBy(long x, long y);

   //external:   [dispid 1169]
   IDispatch* external();
};

#endif
#ifdef __cplusplusextern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDocument// {626FC520-A41E-11CF-A731-00A0C9082637}

#undef  INTERFACE
#define INTERFACE IHTMLDocument

DECLARE_INTERFACE_(IHTMLDocument, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLDocument methods:
   STDMETHOD_(HRESULT, Get_Script) (THIS_ IDispatch** p) PURE;
};

typedef IHTMLDocument* LPHTMLDOCUMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDocument2
// {332C4425-26CB-11D0-B483-00C04FD90119}

#undef  INTERFACE
#define INTERFACE IHTMLDocument2

DECLARE_INTERFACE_(IHTMLDocument2, IHTMLDocument)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
   //IHTMLDocument methods:
   STDMETHOD_(HRESULT, Get_Script) (THIS_ IDispatch** p) PURE;
#endif
   //IHTMLDocument2 methods:
   STDMETHOD_(HRESULT, Get_all) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Get_body) (THIS_ IHTMLElement** p) PURE;
   STDMETHOD_(HRESULT, Get_activeElement) (THIS_ IHTMLElement** p) PURE;
   STDMETHOD_(HRESULT, Get_images) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Get_applets) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Get_links) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Get_forms) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Get_anchors) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Set_title) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_title) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_scripts) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Set_designMode) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_designMode) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_selection) (THIS_ IHTMLSelectionObject** p) PURE;
   STDMETHOD_(HRESULT, Get_readyState) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_frames) (THIS_ IHTMLFramesCollection2** p) PURE;
   STDMETHOD_(HRESULT, Get_embeds) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Get_plugins) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Set_alinkColor) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_alinkColor) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_bgColor) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_bgColor) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_fgColor) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_fgColor) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_linkColor) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_linkColor) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_vlinkColor) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_vlinkColor) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Get_referrer) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_location) (THIS_ IHTMLLocation** p) PURE;
   STDMETHOD_(HRESULT, Get_lastModified) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_url) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_url) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_domain) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_domain) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_cookie) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_cookie) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_expando) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_expando) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, Set_charset) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_charset) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_defaultCharset) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_defaultCharset) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_mimeType) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_fileSize) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_fileCreatedDate) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_fileModifiedDate) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_fileUpdatedDate) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_security) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_protocol) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_nameProp) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, write) (THIS_ SAFEARRAY* psarray) PURE;
   STDMETHOD_(HRESULT, writeln) (THIS_ SAFEARRAY* psarray) PURE;
   STDMETHOD_(HRESULT, open) (THIS_ BSTR url, VARIANT name, VARIANT features, VARIANT replace, IDispatch** pomWindowResult) PURE;
   STDMETHOD_(HRESULT, close) (THIS ) PURE;
   STDMETHOD_(HRESULT, clear) (THIS ) PURE;
   STDMETHOD_(HRESULT, queryCommandSupported) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, queryCommandEnabled) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, queryCommandState) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, queryCommandIndeterm) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, queryCommandText) (THIS_ BSTR cmdID, BSTR* pcmdText) PURE;
   STDMETHOD_(HRESULT, queryCommandValue) (THIS_ BSTR cmdID, VARIANT* pcmdValue) PURE;
   STDMETHOD_(HRESULT, execCommand) (THIS_ BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, execCommandShowHelp) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, createElement) (THIS_ BSTR eTag, IHTMLElement** newElem) PURE;
   STDMETHOD_(HRESULT, Set_onhelp) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onhelp) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onclick) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onclick) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_ondblclick) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_ondblclick) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onkeyup) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onkeyup) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onkeydown) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onkeydown) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onkeypress) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onkeypress) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onmouseup) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onmouseup) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onmousedown) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onmousedown) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onmousemove) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onmousemove) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onmouseout) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onmouseout) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onmouseover) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onmouseover) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onreadystatechange) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onafterupdate) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onafterupdate) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onrowexit) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onrowexit) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onrowenter) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onrowenter) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_ondragstart) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_ondragstart) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onselectstart) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onselectstart) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, elementFromPoint) (THIS_ long x, long y, IHTMLElement** elementHit) PURE;
   STDMETHOD_(HRESULT, Get_parentWindow) (THIS_ IHTMLWindow2** p) PURE;
   STDMETHOD_(HRESULT, Get_styleSheets) (THIS_ IHTMLStyleSheetsCollection** p) PURE;
   STDMETHOD_(HRESULT, Set_onbeforeupdate) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onbeforeupdate) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onerrorupdate) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onerrorupdate) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, toString) (THIS_ BSTR* String) PURE;
   STDMETHOD_(HRESULT, createStyleSheet) (THIS_ BSTR bstrHref, long lIndex, IHTMLStyleSheet** ppnewStyleSheet) PURE;
};

typedef IHTMLDocument2* LPHTMLDOCUMENT2;
#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLDocument2  {332C4425-26CB-11D0-B483-00C04FD90119}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLDocument2Proxy : public TAutoProxy
{
public:
   TIHTMLDocument2Proxy() : TAutoProxy(0x0) {}

   //Script:   [dispid 1001]
   IDispatch* Script();

   //all:   [dispid 1003]
   void all(TIHTMLElementCollectionProxy& Obj);

   //body:   [dispid 1004]
   void body(TIHTMLElementProxy& Obj);

   //activeElement:   [dispid 1005]
   void activeElement(TIHTMLElementProxy& Obj);

   //images:   [dispid 1011]
   void images(TIHTMLElementCollectionProxy& Obj);

   //applets:   [dispid 1008]
   void applets(TIHTMLElementCollectionProxy& Obj);

   //links:   [dispid 1009]
   void links(TIHTMLElementCollectionProxy& Obj);

   //forms:   [dispid 1010]
   void forms(TIHTMLElementCollectionProxy& Obj);

   //anchors:   [dispid 1007]
   void anchors(TIHTMLElementCollectionProxy& Obj);

   //title:   [dispid 1012]
   void title(TAutoString arg0);

   //title:   [dispid 1012]
   TAutoString title();

   //scripts:   [dispid 1013]
   void scripts(TIHTMLElementCollectionProxy& Obj);

   //designMode:   [dispid 1014]
   void designMode(TAutoString arg0);

   //designMode:   [dispid 1014]
   TAutoString designMode();

   //selection:   [dispid 1017]
   void selection(TIHTMLSelectionObjectProxy& Obj);

   //readyState:   [dispid 1018]
   TAutoString readyState();

   //frames:   [dispid 1019]
   void frames(TIHTMLFramesCollection2Proxy& Obj);

   //embeds:   [dispid 1015]
   void embeds(TIHTMLElementCollectionProxy& Obj);

   //plugins:   [dispid 1021]
   void plugins(TIHTMLElementCollectionProxy& Obj);

   //alinkColor:   [dispid 1022]
   void alinkColor(TAutoVal arg0);

   //alinkColor:   [dispid 1022]
   TAutoVal alinkColor();

   //bgColor:   [dispid -501]
   void bgColor(TAutoVal arg0);

   //bgColor:   [dispid -501]
   TAutoVal bgColor();

   //fgColor:   [dispid -2147413110]
   void fgColor(TAutoVal arg0);

   //fgColor:   [dispid -2147413110]
   TAutoVal fgColor();

   //linkColor:   [dispid 1024]
   void linkColor(TAutoVal arg0);

   //linkColor:   [dispid 1024]
   TAutoVal linkColor();

   //vlinkColor:   [dispid 1023]
   void vlinkColor(TAutoVal arg0);

   //vlinkColor:   [dispid 1023]
   TAutoVal vlinkColor();

   //referrer:   [dispid 1027]
   TAutoString referrer();

   //location:   [dispid 1026]
   void location(TIHTMLLocationProxy& Obj);

   //lastModified:   [dispid 1028]
   TAutoString lastModified();

   //url:   [dispid 1025]
   void url(TAutoString arg0);

   //url:   [dispid 1025]
   TAutoString url();

   //domain:   [dispid 1029]
   void domain(TAutoString arg0);

   //domain:   [dispid 1029]
   TAutoString domain();

   //cookie:   [dispid 1030]
   void cookie(TAutoString arg0);

   //cookie:   [dispid 1030]
   TAutoString cookie();

   //expando:   [dispid 1031]
   void expando(TBool arg0);

   //expando:   [dispid 1031]
   TBool expando();

   //charset:   [dispid 1032]
   void charset(TAutoString arg0);

   //charset:   [dispid 1032]
   TAutoString charset();

   //defaultCharset:   [dispid 1033]
   void defaultCharset(TAutoString arg0);

   //defaultCharset:   [dispid 1033]
   TAutoString defaultCharset();

   //mimeType:   [dispid 1041]
   TAutoString mimeType();

   //fileSize:   [dispid 1042]
   TAutoString fileSize();
   //fileCreatedDate:   [dispid 1043]
   TAutoString fileCreatedDate();

   //fileModifiedDate:   [dispid 1044]
   TAutoString fileModifiedDate();

   //fileUpdatedDate:   [dispid 1045]
   TAutoString fileUpdatedDate();

   //security:   [dispid 1046]
   TAutoString security();

   //protocol:   [dispid 1047]
   TAutoString protocol();

   //nameProp:   [dispid 1048]
   TAutoString nameProp();

   //write:   [dispid 1054]
   void write(SafeArray<TAutoVal> psarray);

   //writeln:   [dispid 1055]
   void writeln(SafeArray<TAutoVal> psarray);

   //open:   [dispid 1056]
   IDispatch* open(TAutoString url, TAutoVal name = TNoArg(), TAutoVal features = TNoArg(), TAutoVal replace = TNoArg());

   //close:   [dispid 1057]
   void close();

   //clear:   [dispid 1058]
   void clear();

   //queryCommandSupported:   [dispid 1059]
   TBool queryCommandSupported(TAutoString cmdID);

   //queryCommandEnabled:   [dispid 1060]
   TBool queryCommandEnabled(TAutoString cmdID);

   //queryCommandState:   [dispid 1061]
   TBool queryCommandState(TAutoString cmdID);

   //queryCommandIndeterm:   [dispid 1062]
   TBool queryCommandIndeterm(TAutoString cmdID);

   //queryCommandText:   [dispid 1063]
   TAutoString queryCommandText(TAutoString cmdID);

   //queryCommandValue:   [dispid 1064]
   TAutoVal queryCommandValue(TAutoString cmdID);

   //execCommand:   [dispid 1065]
   TBool execCommand(TAutoString cmdID, TBool showUI, TAutoVal value = TNoArg());

   //execCommandShowHelp:   [dispid 1066]
   TBool execCommandShowHelp(TAutoString cmdID);

   //createElement:   [dispid 1067]
   void createElement(TIHTMLElementProxy& Obj, TAutoString eTag);

   //onhelp:   [dispid -2147412099]
   void onhelp(TAutoVal arg0);

   //onhelp:   [dispid -2147412099]
   TAutoVal onhelp();

   //onclick:   [dispid -2147412104]
   void onclick(TAutoVal arg0);

   //onclick:   [dispid -2147412104]
   TAutoVal onclick();

   //ondblclick:   [dispid -2147412103]
   void ondblclick(TAutoVal arg0);

   //ondblclick:   [dispid -2147412103]
   TAutoVal ondblclick();

   //onkeyup:   [dispid -2147412106]
   void onkeyup(TAutoVal arg0);

   //onkeyup:   [dispid -2147412106]
   TAutoVal onkeyup();

   //onkeydown:   [dispid -2147412107]
   void onkeydown(TAutoVal arg0);

   //onkeydown:   [dispid -2147412107]
   TAutoVal onkeydown();

   //onkeypress:   [dispid -2147412105]
   void onkeypress(TAutoVal arg0);

   //onkeypress:   [dispid -2147412105]
   TAutoVal onkeypress();

   //onmouseup:   [dispid -2147412109]
   void onmouseup(TAutoVal arg0);

   //onmouseup:   [dispid -2147412109]
   TAutoVal onmouseup();

   //onmousedown:   [dispid -2147412110]
   void onmousedown(TAutoVal arg0);

   //onmousedown:   [dispid -2147412110]
   TAutoVal onmousedown();

   //onmousemove:   [dispid -2147412108]
   void onmousemove(TAutoVal arg0);

   //onmousemove:   [dispid -2147412108]
   TAutoVal onmousemove();

   //onmouseout:   [dispid -2147412111]
   void onmouseout(TAutoVal arg0);

   //onmouseout:   [dispid -2147412111]
   TAutoVal onmouseout();

   //onmouseover:   [dispid -2147412112]
   void onmouseover(TAutoVal arg0);

   //onmouseover:   [dispid -2147412112]
   TAutoVal onmouseover();

   //onreadystatechange:   [dispid -2147412087]
   void onreadystatechange(TAutoVal arg0);

   //onreadystatechange:   [dispid -2147412087]
   TAutoVal onreadystatechange();

   //onafterupdate:   [dispid -2147412090]
   void onafterupdate(TAutoVal arg0);

   //onafterupdate:   [dispid -2147412090]
   TAutoVal onafterupdate();

   //onrowexit:   [dispid -2147412094]
   void onrowexit(TAutoVal arg0);

   //onrowexit:   [dispid -2147412094]
   TAutoVal onrowexit();

   //onrowenter:   [dispid -2147412093]
   void onrowenter(TAutoVal arg0);

   //onrowenter:   [dispid -2147412093]
   TAutoVal onrowenter();

   //ondragstart:   [dispid -2147412077]
   void ondragstart(TAutoVal arg0);

   //ondragstart:   [dispid -2147412077]
   TAutoVal ondragstart();

   //onselectstart:   [dispid -2147412075]
   void onselectstart(TAutoVal arg0);

   //onselectstart:   [dispid -2147412075]
   TAutoVal onselectstart();

   //elementFromPoint:   [dispid 1068]
   void elementFromPoint(TIHTMLElementProxy& Obj, long x, long y);

   //parentWindow:   [dispid 1034]
   void parentWindow(TIHTMLWindow2Proxy& Obj);

   //styleSheets:   [dispid 1069]
   void styleSheets(TIHTMLStyleSheetsCollectionProxy& Obj);

   //onbeforeupdate:   [dispid -2147412091]
   void onbeforeupdate(TAutoVal arg0);

   //onbeforeupdate:   [dispid -2147412091]
   TAutoVal onbeforeupdate();

   //onerrorupdate:   [dispid -2147412074]
   void onerrorupdate(TAutoVal arg0);

   //onerrorupdate:   [dispid -2147412074]
   TAutoVal onerrorupdate();

   //toString:   [dispid 1070]
   TAutoString toString();

   //createStyleSheet:   [dispid 1071]   void createStyleSheet(TIHTMLStyleSheetProxy& Obj, TAutoString bstrHref, long lIndex);
};

#endif

#ifdef __cplusplusextern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */
// IHTMLEmbedElement// {3050F25F-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE#define INTERFACE IHTMLEmbedElement

DECLARE_INTERFACE_(IHTMLEmbedElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLEmbedElement methods:
   STDMETHOD_(HRESULT, Set_hidden) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_hidden) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_palette) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_pluginspage) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_src) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_src) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_units) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_units) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_height) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_height) (THIS_ VARIANT* p) PURE;
};

typedef IHTMLEmbedElement* LPHTMLEMBEDELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLEmbedElement  {3050F25F-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLEmbedElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLEmbedElementProxy() : TIHTMLElementProxy(0x0) {}

   //hidden:   [dispid -2147413031]
   void hidden(TAutoString arg0);

   //hidden:   [dispid -2147413031]
   TAutoString hidden();

   //palette:   [dispid -2147415108]
   TAutoString palette();

   //pluginspage:   [dispid -2147415107]
   TAutoString pluginspage();

   //src:   [dispid -2147415106]
   void src(TAutoString arg0);

   //src:   [dispid -2147415106]
   TAutoString src();

   //units:   [dispid -2147415104]
   void units(TAutoString arg0);

   //units:   [dispid -2147415104]
   TAutoString units();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //height:   [dispid -2147418106]
   void height(TAutoVal arg0);

   //height:   [dispid -2147418106]
   TAutoVal height();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLMapElement
// {3050F266-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLMapElement

DECLARE_INTERFACE_(IHTMLMapElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLMapElement methods:
   STDMETHOD_(HRESULT, Get_areas) (THIS_ IHTMLAreasCollection** p) PURE;
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE;
};

typedef IHTMLMapElement* LPHTMLMAPELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLMapElement  {3050F266-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLMapElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLMapElementProxy() : TIHTMLElementProxy(0x0) {}

   //areas:   [dispid 1002]
   void areas(TIHTMLAreasCollectionProxy& Obj);

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]   TAutoString name();
};

#endif
#ifdef __cplusplusextern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLAreaElement// {3050F265-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLAreaElement

DECLARE_INTERFACE_(IHTMLAreaElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLAreaElement methods:
   STDMETHOD_(HRESULT, Set_shape) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_shape) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_coords) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_coords) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_href) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_href) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_target) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_target) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_alt) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_alt) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_noHref) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_noHref) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, Set_host) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_host) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_hostname) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_hostname) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_pathname) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_pathname) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_port) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_port) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_protocol) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_protocol) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_search) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_search) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_hash) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_hash) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_onblur) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onblur) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onfocus) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onfocus) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_tabIndex) (THIS_ short p) PURE;
   STDMETHOD_(HRESULT, Get_tabIndex) (THIS_ short* p) PURE;
   STDMETHOD_(HRESULT, focus) (THIS ) PURE;
   STDMETHOD_(HRESULT, blur) (THIS ) PURE;
};

typedef IHTMLAreaElement* LPHTMLAREAELEMENT;
#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLAreaElement  {3050F265-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLAreaElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLAreaElementProxy() : TIHTMLElementProxy(0x0) {}

   //shape:   [dispid 1001]
   void shape(TAutoString arg0);

   //shape:   [dispid 1001]
   TAutoString shape();

   //coords:   [dispid 1002]
   void coords(TAutoString arg0);

   //coords:   [dispid 1002]
   TAutoString coords();

   //href:   [dispid 0]
   void href(TAutoString arg0);

   //href:   [dispid 0]
   TAutoString href();

   //target:   [dispid 1004]
   void target(TAutoString arg0);

   //target:   [dispid 1004]
   TAutoString target();

   //alt:   [dispid 1005]
   void alt(TAutoString arg0);

   //alt:   [dispid 1005]
   TAutoString alt();

   //noHref:   [dispid 1006]
   void noHref(TBool arg0);

   //noHref:   [dispid 1006]
   TBool noHref();

   //host:   [dispid 1007]
   void host(TAutoString arg0);

   //host:   [dispid 1007]
   TAutoString host();

   //hostname:   [dispid 1008]
   void hostname(TAutoString arg0);

   //hostname:   [dispid 1008]   TAutoString hostname();

   //pathname:   [dispid 1009]
   void pathname(TAutoString arg0);

   //pathname:   [dispid 1009]
   TAutoString pathname();

   //port:   [dispid 1010]
   void port(TAutoString arg0);

   //port:   [dispid 1010]
   TAutoString port();

   //protocol:   [dispid 1011]
   void protocol(TAutoString arg0);

   //protocol:   [dispid 1011]
   TAutoString protocol();

   //search:   [dispid 1012]
   void search(TAutoString arg0);

   //search:   [dispid 1012]
   TAutoString search();

   //hash:   [dispid 1013]
   void hash(TAutoString arg0);

   //hash:   [dispid 1013]   TAutoString hash();

   //onblur:   [dispid -2147412097]
   void onblur(TAutoVal arg0);

   //onblur:   [dispid -2147412097]
   TAutoVal onblur();

   //onfocus:   [dispid -2147412098]
   void onfocus(TAutoVal arg0);

   //onfocus:   [dispid -2147412098]   TAutoVal onfocus();

   //tabIndex:   [dispid -2147418097]
   void tabIndex(short arg0);

   //tabIndex:   [dispid -2147418097]
   short tabIndex();

   //focus:   [dispid 1014]
   void focus();

   //blur:   [dispid 1015]   void blur();
};

#endif
#ifdef __cplusplusextern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTableCaption
// {3050F2EB-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTableCaption

DECLARE_INTERFACE_(IHTMLTableCaption, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLTableCaption methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_vAlign) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_vAlign) (THIS_ BSTR* p) PURE;
};

typedef IHTMLTableCaption* LPHTMLTABLECAPTION;
#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus// IHTMLTableCaption  {3050F2EB-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTableCaptionProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTableCaptionProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418040]   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();

   //vAlign:   [dispid -2147413081]   void vAlign(TAutoString arg0);

   //vAlign:   [dispid -2147413081]
   TAutoString vAlign();
};

#endif
#ifdef __cplusplusextern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLCommentElement
// {3050F20C-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLCommentElement

DECLARE_INTERFACE_(IHTMLCommentElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLCommentElement methods:
   STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_atomic) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_atomic) (THIS_ long* p) PURE;
};

typedef IHTMLCommentElement* LPHTMLCOMMENTELEMENT;
#ifdef __cplusplus}
#endif  /* __cplusplus */

#ifdef __cplusplus// IHTMLCommentElement  {3050F20C-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLCommentElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLCommentElementProxy() : TIHTMLElementProxy(0x0) {}

   //text:   [dispid 1001]
   void text(TAutoString arg0);

   //text:   [dispid 1001]   TAutoString text();

   //atomic:   [dispid 1002]   void atomic(long arg0);

   //atomic:   [dispid 1002]   long atomic();
};

#endif
#ifdef __cplusplusextern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLPhraseElement
// {3050F20A-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE#define INTERFACE IHTMLPhraseElement

DECLARE_INTERFACE_(IHTMLPhraseElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLPhraseElement methods:
};

typedef IHTMLPhraseElement* LPHTMLPHRASEELEMENT;
#ifdef __cplusplus}
#endif  /* __cplusplus */

#ifdef __cplusplus// IHTMLPhraseElement  {3050F20A-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLPhraseElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLPhraseElementProxy() : TIHTMLElementProxy(0x0) {}
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLSpanElement
// {3050F3F3-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLSpanElement

DECLARE_INTERFACE_(IHTMLSpanElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLSpanElement methods:
};

typedef IHTMLSpanElement* LPHTMLSPANELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLSpanElement  {3050F3F3-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLSpanElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLSpanElementProxy() : TIHTMLElementProxy(0x0) {}
};

#endif

#ifdef __cplusplusextern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTable
// {3050F21E-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTable

DECLARE_INTERFACE_(IHTMLTable, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLTable methods:
   STDMETHOD_(HRESULT, Set_cols) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_cols) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_border) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_border) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_frame) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_frame) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_rules) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_rules) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_cellSpacing) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_cellSpacing) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_cellPadding) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_cellPadding) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_background) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_background) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_bgColor) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_bgColor) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_borderColor) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_borderColor) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_borderColorLight) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_borderColorLight) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_borderColorDark) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_borderColorDark) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, refresh) (THIS ) PURE;
   STDMETHOD_(HRESULT, Get_rows) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_height) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_height) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_dataPageSize) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_dataPageSize) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, nextPage) (THIS ) PURE;
   STDMETHOD_(HRESULT, previousPage) (THIS ) PURE;
   STDMETHOD_(HRESULT, Get_tHead) (THIS_ IHTMLTableSection** p) PURE;
   STDMETHOD_(HRESULT, Get_tFoot) (THIS_ IHTMLTableSection** p) PURE;
   STDMETHOD_(HRESULT, Get_tBodies) (THIS_ IHTMLElementCollection** p) PURE;
   STDMETHOD_(HRESULT, Get_caption) (THIS_ IHTMLTableCaption** p) PURE;
   STDMETHOD_(HRESULT, createTHead) (THIS_ IDispatch** head) PURE;
   STDMETHOD_(HRESULT, deleteTHead) (THIS ) PURE;
   STDMETHOD_(HRESULT, createTFoot) (THIS_ IDispatch** foot) PURE;
   STDMETHOD_(HRESULT, deleteTFoot) (THIS ) PURE;
   STDMETHOD_(HRESULT, createCaption) (THIS_ IHTMLTableCaption** caption) PURE;
   STDMETHOD_(HRESULT, deleteCaption) (THIS ) PURE;
   STDMETHOD_(HRESULT, insertRow) (THIS_ long index, IDispatch** row) PURE;
   STDMETHOD_(HRESULT, deleteRow) (THIS_ long index) PURE;
   STDMETHOD_(HRESULT, Get_readyState) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onreadystatechange) (THIS_ VARIANT* p) PURE;
};

typedef IHTMLTable* LPHTMLTABLE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTable  {3050F21E-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTableProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTableProxy() : TIHTMLElementProxy(0x0) {}

   //cols:   [dispid 1001]
   void cols(long arg0);

   //cols:   [dispid 1001]
   long cols();

   //border:   [dispid 1002]
   void border(TAutoVal arg0);

   //border:   [dispid 1002]
   TAutoVal border();

   //frame:   [dispid 1004]
   void frame(TAutoString arg0);

   //frame:   [dispid 1004]
   TAutoString frame();

   //rules:   [dispid 1003]
   void rules(TAutoString arg0);

   //rules:   [dispid 1003]
   TAutoString rules();

   //cellSpacing:   [dispid 1005]
   void cellSpacing(TAutoVal arg0);

   //cellSpacing:   [dispid 1005]
   TAutoVal cellSpacing();

   //cellPadding:   [dispid 1006]
   void cellPadding(TAutoVal arg0);

   //cellPadding:   [dispid 1006]
   TAutoVal cellPadding();

   //background:   [dispid -2147413111]
   void background(TAutoString arg0);

   //background:   [dispid -2147413111]
   TAutoString background();

   //bgColor:   [dispid -501]
   void bgColor(TAutoVal arg0);

   //bgColor:   [dispid -501]
   TAutoVal bgColor();

   //borderColor:   [dispid -2147413084]
   void borderColor(TAutoVal arg0);

   //borderColor:   [dispid -2147413084]
   TAutoVal borderColor();

   //borderColorLight:   [dispid -2147413083]
   void borderColorLight(TAutoVal arg0);

   //borderColorLight:   [dispid -2147413083]
   TAutoVal borderColorLight();

   //borderColorDark:   [dispid -2147413082]
   void borderColorDark(TAutoVal arg0);

   //borderColorDark:   [dispid -2147413082]
   TAutoVal borderColorDark();

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();

   //refresh:   [dispid 1015]
   void refresh();

   //rows:   [dispid 1016]
   void rows(TIHTMLElementCollectionProxy& Obj);

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //height:   [dispid -2147418106]
   void height(TAutoVal arg0);

   //height:   [dispid -2147418106]
   TAutoVal height();

   //dataPageSize:   [dispid 1017]
   void dataPageSize(long arg0);

   //dataPageSize:   [dispid 1017]
   long dataPageSize();

   //nextPage:   [dispid 1018]
   void nextPage();

   //previousPage:   [dispid 1019]
   void previousPage();

   //tHead:   [dispid 1020]
   void tHead(TIHTMLTableSectionProxy& Obj);

   //tFoot:   [dispid 1021]
   void tFoot(TIHTMLTableSectionProxy& Obj);

   //tBodies:   [dispid 1024]
   void tBodies(TIHTMLElementCollectionProxy& Obj);

   //caption:   [dispid 1025]
   void caption(TIHTMLTableCaptionProxy& Obj);

   //createTHead:   [dispid 1026]
   IDispatch* createTHead();

   //deleteTHead:   [dispid 1027]
   void deleteTHead();

   //createTFoot:   [dispid 1028]
   IDispatch* createTFoot();

   //deleteTFoot:   [dispid 1029]
   void deleteTFoot();

   //createCaption:   [dispid 1030]
   void createCaption(TIHTMLTableCaptionProxy& Obj);

   //deleteCaption:   [dispid 1031]
   void deleteCaption();

   //insertRow:   [dispid 1032]
   IDispatch* insertRow(long index);

   //deleteRow:   [dispid 1033]
   void deleteRow(long index);

   //readyState:   [dispid 1034]
   TAutoString readyState();

   //onreadystatechange:   [dispid -2147412087]
   void onreadystatechange(TAutoVal arg0);

   //onreadystatechange:   [dispid -2147412087]
   TAutoVal onreadystatechange();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTableCol
// {3050F23A-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTableCol

DECLARE_INTERFACE_(IHTMLTableCol, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLTableCol methods:
   STDMETHOD_(HRESULT, Set_span) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_span) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_vAlign) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_vAlign) (THIS_ BSTR* p) PURE;
};

typedef IHTMLTableCol* LPHTMLTABLECOL;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTableCol  {3050F23A-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTableColProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTableColProxy() : TIHTMLElementProxy(0x0) {}

   //span:   [dispid 1001]
   void span(long arg0);

   //span:   [dispid 1001]
   long span();

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //align:   [dispid -2147418040]
   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();

   //vAlign:   [dispid -2147413081]
   void vAlign(TAutoString arg0);

   //vAlign:   [dispid -2147413081]
   TAutoString vAlign();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTableSection
// {3050F23B-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTableSection

DECLARE_INTERFACE_(IHTMLTableSection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLTableSection methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_vAlign) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_vAlign) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_bgColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_bgColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_rows) (THIS_ IHTMLElementCollection** p) PURE; 
   STDMETHOD_(HRESULT, insertRow) (THIS_ long index, IDispatch** row) PURE; 
   STDMETHOD_(HRESULT, deleteRow) (THIS_ long index) PURE; 
};

typedef IHTMLTableSection* LPHTMLTABLESECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTableSection  {3050F23B-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTableSectionProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTableSectionProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418040]
   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();

   //vAlign:   [dispid -2147413081]
   void vAlign(TAutoString arg0);

   //vAlign:   [dispid -2147413081]
   TAutoString vAlign();

   //bgColor:   [dispid -501]
   void bgColor(TAutoVal arg0);

   //bgColor:   [dispid -501]
   TAutoVal bgColor();

   //rows:   [dispid 1000]
   void rows(TIHTMLElementCollectionProxy& Obj);

   //insertRow:   [dispid 1001]
   IDispatch* insertRow(long index);

   //deleteRow:   [dispid 1002]
   void deleteRow(long index);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTableRow
// {3050F23C-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTableRow

DECLARE_INTERFACE_(IHTMLTableRow, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLTableRow methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_vAlign) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_vAlign) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_bgColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_bgColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColorLight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColorLight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColorDark) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColorDark) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_rowIndex) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_sectionRowIndex) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_cells) (THIS_ IHTMLElementCollection** p) PURE; 
   STDMETHOD_(HRESULT, insertCell) (THIS_ long index, IDispatch** row) PURE; 
   STDMETHOD_(HRESULT, deleteCell) (THIS_ long index) PURE; 
};

typedef IHTMLTableRow* LPHTMLTABLEROW;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTableRow  {3050F23C-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTableRowProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTableRowProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418040]
   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();

   //vAlign:   [dispid -2147413081]
   void vAlign(TAutoString arg0);

   //vAlign:   [dispid -2147413081]
   TAutoString vAlign();

   //bgColor:   [dispid -501]
   void bgColor(TAutoVal arg0);

   //bgColor:   [dispid -501]
   TAutoVal bgColor();

   //borderColor:   [dispid -2147413084]
   void borderColor(TAutoVal arg0);

   //borderColor:   [dispid -2147413084]
   TAutoVal borderColor();

   //borderColorLight:   [dispid -2147413083]
   void borderColorLight(TAutoVal arg0);

   //borderColorLight:   [dispid -2147413083]
   TAutoVal borderColorLight();

   //borderColorDark:   [dispid -2147413082]
   void borderColorDark(TAutoVal arg0);

   //borderColorDark:   [dispid -2147413082]
   TAutoVal borderColorDark();

   //rowIndex:   [dispid 1000]
   long rowIndex();

   //sectionRowIndex:   [dispid 1001]
   long sectionRowIndex();

   //cells:   [dispid 1002]
   void cells(TIHTMLElementCollectionProxy& Obj);

   //insertCell:   [dispid 1003]
   IDispatch* insertCell(long index);

   //deleteCell:   [dispid 1004]
   void deleteCell(long index);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTableCell
// {3050F23D-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTableCell

DECLARE_INTERFACE_(IHTMLTableCell, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLTableCell methods:
   STDMETHOD_(HRESULT, Set_rowSpan) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_rowSpan) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_colSpan) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_colSpan) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_vAlign) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_vAlign) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_bgColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_bgColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_noWrap) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_noWrap) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_background) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_background) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColorLight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColorLight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColorDark) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColorDark) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_height) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_height) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_cellIndex) (THIS_ long* p) PURE; 
};

typedef IHTMLTableCell* LPHTMLTABLECELL;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTableCell  {3050F23D-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTableCellProxy : public TIHTMLElementProxy
{
public:
   TIHTMLTableCellProxy() : TIHTMLElementProxy(0x0) {}

   //rowSpan:   [dispid 2001]
   void rowSpan(long arg0);

   //rowSpan:   [dispid 2001]
   long rowSpan();

   //colSpan:   [dispid 2002]
   void colSpan(long arg0);

   //colSpan:   [dispid 2002]
   long colSpan();

   //align:   [dispid -2147418040]
   void align(TAutoString arg0);

   //align:   [dispid -2147418040]
   TAutoString align();

   //vAlign:   [dispid -2147413081]
   void vAlign(TAutoString arg0);

   //vAlign:   [dispid -2147413081]
   TAutoString vAlign();

   //bgColor:   [dispid -501]
   void bgColor(TAutoVal arg0);

   //bgColor:   [dispid -501]
   TAutoVal bgColor();

   //noWrap:   [dispid -2147413107]
   void noWrap(TBool arg0);

   //noWrap:   [dispid -2147413107]
   TBool noWrap();

   //background:   [dispid -2147413111]
   void background(TAutoString arg0);

   //background:   [dispid -2147413111]
   TAutoString background();

   //borderColor:   [dispid -2147413084]
   void borderColor(TAutoVal arg0);

   //borderColor:   [dispid -2147413084]
   TAutoVal borderColor();

   //borderColorLight:   [dispid -2147413083]
   void borderColorLight(TAutoVal arg0);

   //borderColorLight:   [dispid -2147413083]
   TAutoVal borderColorLight();

   //borderColorDark:   [dispid -2147413082]
   void borderColorDark(TAutoVal arg0);

   //borderColorDark:   [dispid -2147413082]
   TAutoVal borderColorDark();

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //height:   [dispid -2147418106]
   void height(TAutoVal arg0);

   //height:   [dispid -2147418106]
   TAutoVal height();

   //cellIndex:   [dispid 2003]
   long cellIndex();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLScriptElement
// {3050F28B-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLScriptElement

DECLARE_INTERFACE_(IHTMLScriptElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLScriptElement methods:
   STDMETHOD_(HRESULT, Set_src) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_src) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_htmlFor) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_htmlFor) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_event) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_event) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_defer) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_defer) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_readyState) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onerror) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onerror) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_type) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLScriptElement* LPHTMLSCRIPTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLScriptElement  {3050F28B-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLScriptElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLScriptElementProxy() : TIHTMLElementProxy(0x0) {}

   //src:   [dispid 1001]
   void src(TAutoString arg0);

   //src:   [dispid 1001]
   TAutoString src();

   //htmlFor:   [dispid 1004]
   void htmlFor(TAutoString arg0);

   //htmlFor:   [dispid 1004]
   TAutoString htmlFor();

   //event:   [dispid 1005]
   void event(TAutoString arg0);

   //event:   [dispid 1005]
   TAutoString event();

   //text:   [dispid 1006]
   void text(TAutoString arg0);

   //text:   [dispid 1006]
   TAutoString text();

   //defer:   [dispid 1007]
   void defer(TBool arg0);

   //defer:   [dispid 1007]
   TBool defer();

   //readyState:   [dispid 1008]
   TAutoString readyState();

   //onerror:   [dispid -2147412083]
   void onerror(TAutoVal arg0);

   //onerror:   [dispid -2147412083]
   TAutoVal onerror();

   //type:   [dispid 1009]
   void type(TAutoString arg0);

   //type:   [dispid 1009]
   TAutoString type();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLNoShowElement
// {3050F38A-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLNoShowElement

DECLARE_INTERFACE_(IHTMLNoShowElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLNoShowElement methods:
};

typedef IHTMLNoShowElement* LPHTMLNOSHOWELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLNoShowElement  {3050F38A-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLNoShowElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLNoShowElementProxy() : TIHTMLElementProxy(0x0) {}
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLObjectElement
// {3050F24F-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLObjectElement

DECLARE_INTERFACE_(IHTMLObjectElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLObjectElement methods:
   STDMETHOD_(HRESULT, Get_object) (THIS_ IDispatch** p) PURE;
   STDMETHOD_(HRESULT, Get_classid) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_data) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, SetRef_recordset) (THIS_ IDispatch* p) PURE;
   STDMETHOD_(HRESULT, Get_recordset) (THIS_ IDispatch** p) PURE;
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_codeBase) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_codeBase) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_codeType) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_codeType) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_code) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_code) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_BaseHref) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_type) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE;
   STDMETHOD_(HRESULT, Set_width) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_width) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_height) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_height) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Get_readyState) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onreadystatechange) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_onerror) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_onerror) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_altHtml) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_altHtml) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_vspace) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_vspace) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_hspace) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_hspace) (THIS_ long* p) PURE;
};

typedef IHTMLObjectElement* LPHTMLOBJECTELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLObjectElement  {3050F24F-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLObjectElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLObjectElementProxy() : TIHTMLElementProxy(0x0) {}

   //object:   [dispid -2147415111]
   IDispatch* object();

   //classid:   [dispid -2147415110]
   TAutoString classid();

   //data:   [dispid -2147415109]
   TAutoString data();

   //recordset:   [dispid -2147415107]
   void recordset(IDispatch* arg0);

   //recordset:   [dispid -2147415107]
   IDispatch* recordset();

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //codeBase:   [dispid -2147415106]
   void codeBase(TAutoString arg0);

   //codeBase:   [dispid -2147415106]
   TAutoString codeBase();

   //codeType:   [dispid -2147415105]
   void codeType(TAutoString arg0);

   //codeType:   [dispid -2147415105]
   TAutoString codeType();

   //code:   [dispid -2147415104]
   void code(TAutoString arg0);

   //code:   [dispid -2147415104]
   TAutoString code();

   //BaseHref:   [dispid -2147418110]
   TAutoString BaseHref();

   //type:   [dispid -2147415103]
   void type(TAutoString arg0);

   //type:   [dispid -2147415103]
   TAutoString type();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);

   //width:   [dispid -2147418107]
   void width(TAutoVal arg0);

   //width:   [dispid -2147418107]
   TAutoVal width();

   //height:   [dispid -2147418106]
   void height(TAutoVal arg0);

   //height:   [dispid -2147418106]
   TAutoVal height();

   //readyState:   [dispid -2147415102]
   long readyState();

   //onreadystatechange:   [dispid -2147412087]
   void onreadystatechange(TAutoVal arg0);

   //onreadystatechange:   [dispid -2147412087]
   TAutoVal onreadystatechange();

   //onerror:   [dispid -2147412083]
   void onerror(TAutoVal arg0);

   //onerror:   [dispid -2147412083]
   TAutoVal onerror();

   //altHtml:   [dispid -2147415101]
   void altHtml(TAutoString arg0);

   //altHtml:   [dispid -2147415101]
   TAutoString altHtml();

   //vspace:   [dispid -2147415100]
   void vspace(long arg0);

   //vspace:   [dispid -2147415100]
   long vspace();

   //hspace:   [dispid -2147415099]
   void hspace(long arg0);

   //hspace:   [dispid -2147415099]
   long hspace();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFrameBase
// {3050F311-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFrameBase

DECLARE_INTERFACE_(IHTMLFrameBase, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLFrameBase methods:
   STDMETHOD_(HRESULT, Set_src) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_src) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_border) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_border) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_frameBorder) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_frameBorder) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_frameSpacing) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_frameSpacing) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_marginWidth) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_marginWidth) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_marginHeight) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_marginHeight) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_noResize) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_noResize) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, Set_scrolling) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_scrolling) (THIS_ BSTR* p) PURE;
};

typedef IHTMLFrameBase* LPHTMLFRAMEBASE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFrameBase  {3050F311-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFrameBaseProxy : public TIHTMLElementProxy
{
public:
   TIHTMLFrameBaseProxy() : TIHTMLElementProxy(0x0) {}

   //src:   [dispid -2147415112]
   void src(TAutoString arg0);

   //src:   [dispid -2147415112]
   TAutoString src();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //border:   [dispid -2147415110]
   void border(TAutoVal arg0);

   //border:   [dispid -2147415110]
   TAutoVal border();

   //frameBorder:   [dispid -2147415109]
   void frameBorder(TAutoString arg0);

   //frameBorder:   [dispid -2147415109]
   TAutoString frameBorder();

   //frameSpacing:   [dispid -2147415108]
   void frameSpacing(TAutoVal arg0);

   //frameSpacing:   [dispid -2147415108]
   TAutoVal frameSpacing();

   //marginWidth:   [dispid -2147415107]
   void marginWidth(TAutoVal arg0);

   //marginWidth:   [dispid -2147415107]
   TAutoVal marginWidth();

   //marginHeight:   [dispid -2147415106]
   void marginHeight(TAutoVal arg0);

   //marginHeight:   [dispid -2147415106]
   TAutoVal marginHeight();

   //noResize:   [dispid -2147415105]
   void noResize(TBool arg0);

   //noResize:   [dispid -2147415105]
   TBool noResize();

   //scrolling:   [dispid -2147415104]
   void scrolling(TAutoString arg0);

   //scrolling:   [dispid -2147415104]
   TAutoString scrolling();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFrameElement
// {3050F313-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFrameElement

DECLARE_INTERFACE_(IHTMLFrameElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLFrameElement methods:
   STDMETHOD_(HRESULT, Set_borderColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColor) (THIS_ VARIANT* p) PURE; 
};

typedef IHTMLFrameElement* LPHTMLFRAMEELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFrameElement  {3050F313-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFrameElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLFrameElementProxy() : TIHTMLElementProxy(0x0) {}

   //borderColor:   [dispid -2147414111]
   void borderColor(TAutoVal arg0);

   //borderColor:   [dispid -2147414111]
   TAutoVal borderColor();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLIFrameElement
// {3050F315-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLIFrameElement

DECLARE_INTERFACE_(IHTMLIFrameElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLIFrameElement methods:
   STDMETHOD_(HRESULT, Set_vspace) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_vspace) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_hspace) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_hspace) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLIFrameElement* LPHTMLIFRAMEELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLIFrameElement  {3050F315-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLIFrameElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLIFrameElementProxy() : TIHTMLElementProxy(0x0) {}

   //vspace:   [dispid -2147414111]
   void vspace(long arg0);

   //vspace:   [dispid -2147414111]
   long vspace();

   //hspace:   [dispid -2147414110]
   void hspace(long arg0);

   //hspace:   [dispid -2147414110]
   long hspace();

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDivPosition
// {3050F212-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLDivPosition

DECLARE_INTERFACE_(IHTMLDivPosition, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLDivPosition methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE;
};

typedef IHTMLDivPosition* LPHTMLDIVPOSITION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLDivPosition  {3050F212-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLDivPositionProxy : public TAutoProxy
{
public:
   TIHTMLDivPositionProxy() : TAutoProxy(0x0) {}

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFieldSetElement
// {3050F3E7-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFieldSetElement

DECLARE_INTERFACE_(IHTMLFieldSetElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLFieldSetElement methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLFieldSetElement* LPHTMLFIELDSETELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFieldSetElement  {3050F3E7-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFieldSetElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLFieldSetElementProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLLegendElement
// {3050F3EA-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLLegendElement

DECLARE_INTERFACE_(IHTMLLegendElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLLegendElement methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLLegendElement* LPHTMLLEGENDELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLLegendElement  {3050F3EA-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLLegendElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLLegendElementProxy() : TIHTMLElementProxy(0x0) {}

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLSpanFlow
// {3050F3E5-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLSpanFlow

DECLARE_INTERFACE_(IHTMLSpanFlow, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLSpanFlow methods:
   STDMETHOD_(HRESULT, Set_align) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_align) (THIS_ BSTR* p) PURE;
};

typedef IHTMLSpanFlow* LPHTMLSPANFLOW;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLSpanFlow  {3050F3E5-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLSpanFlowProxy : public TAutoProxy
{
public:
   TIHTMLSpanFlowProxy() : TAutoProxy(0x0) {}

   //align:   [dispid -2147418039]
   void align(TAutoString arg0);

   //align:   [dispid -2147418039]
   TAutoString align();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFrameSetElement
// {3050F319-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFrameSetElement

DECLARE_INTERFACE_(IHTMLFrameSetElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLFrameSetElement methods:
   STDMETHOD_(HRESULT, Set_rows) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_rows) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_cols) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_cols) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_border) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_border) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_borderColor) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_borderColor) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_frameBorder) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_frameBorder) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_frameSpacing) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_frameSpacing) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onunload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onunload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onbeforeunload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onbeforeunload) (THIS_ VARIANT* p) PURE; 
};

typedef IHTMLFrameSetElement* LPHTMLFRAMESETELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFrameSetElement  {3050F319-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFrameSetElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLFrameSetElementProxy() : TIHTMLElementProxy(0x0) {}

   //rows:   [dispid 1000]
   void rows(TAutoString arg0);

   //rows:   [dispid 1000]
   TAutoString rows();

   //cols:   [dispid 1001]
   void cols(TAutoString arg0);

   //cols:   [dispid 1001]
   TAutoString cols();

   //border:   [dispid 1002]
   void border(TAutoVal arg0);

   //border:   [dispid 1002]
   TAutoVal border();

   //borderColor:   [dispid 1003]
   void borderColor(TAutoVal arg0);

   //borderColor:   [dispid 1003]
   TAutoVal borderColor();

   //frameBorder:   [dispid 1004]
   void frameBorder(TAutoString arg0);

   //frameBorder:   [dispid 1004]
   TAutoString frameBorder();

   //frameSpacing:   [dispid 1005]
   void frameSpacing(TAutoVal arg0);

   //frameSpacing:   [dispid 1005]
   TAutoVal frameSpacing();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //onload:   [dispid -2147412080]
   void onload(TAutoVal arg0);

   //onload:   [dispid -2147412080]
   TAutoVal onload();

   //onunload:   [dispid -2147412079]
   void onunload(TAutoVal arg0);

   //onunload:   [dispid -2147412079]
   TAutoVal onunload();

   //onbeforeunload:   [dispid -2147412073]
   void onbeforeunload(TAutoVal arg0);

   //onbeforeunload:   [dispid -2147412073]
   TAutoVal onbeforeunload();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLBGsound
// {3050F369-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLBGsound

DECLARE_INTERFACE_(IHTMLBGsound, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLBGsound methods:
   STDMETHOD_(HRESULT, Set_src) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_src) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_loop) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_loop) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_volume) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_volume) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_balance) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_balance) (THIS_ VARIANT* p) PURE; 
};

typedef IHTMLBGsound* LPHTMLBGSOUND;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLBGsound  {3050F369-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLBGsoundProxy : public TAutoProxy
{
public:
   TIHTMLBGsoundProxy() : TAutoProxy(0x0) {}

   //src:   [dispid 1001]
   void src(TAutoString arg0);

   //src:   [dispid 1001]
   TAutoString src();

   //loop:   [dispid 1002]
   void loop(TAutoVal arg0);

   //loop:   [dispid 1002]
   TAutoVal loop();

   //volume:   [dispid 1003]
   void volume(TAutoVal arg0);

   //volume:   [dispid 1003]
   TAutoVal volume();

   //balance:   [dispid 1004]
   void balance(TAutoVal arg0);

   //balance:   [dispid 1004]
   TAutoVal balance();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLStyleElement
// {3050F375-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLStyleElement

DECLARE_INTERFACE_(IHTMLStyleElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLStyleElement methods:
   STDMETHOD_(HRESULT, Set_type) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_readyState) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_onreadystatechange) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onreadystatechange) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onload) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onload) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_onerror) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_onerror) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_styleSheet) (THIS_ IHTMLStyleSheet** p) PURE; 
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_media) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_media) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLStyleElement* LPHTMLSTYLEELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLStyleElement  {3050F375-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLStyleElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLStyleElementProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid 1002]
   void type(TAutoString arg0);

   //type:   [dispid 1002]
   TAutoString type();

   //readyState:   [dispid 1003]
   TAutoString readyState();

   //onreadystatechange:   [dispid -2147412087]
   void onreadystatechange(TAutoVal arg0);

   //onreadystatechange:   [dispid -2147412087]
   TAutoVal onreadystatechange();

   //onload:   [dispid -2147412080]
   void onload(TAutoVal arg0);

   //onload:   [dispid -2147412080]
   TAutoVal onload();

   //onerror:   [dispid -2147412083]
   void onerror(TAutoVal arg0);

   //onerror:   [dispid -2147412083]
   TAutoVal onerror();

   //styleSheet:   [dispid 1004]
   void styleSheet(TIHTMLStyleSheetProxy& Obj);

   //disabled:   [dispid 1005]
   void disabled(TBool arg0);

   //disabled:   [dispid 1005]
   TBool disabled();

   //media:   [dispid 1006]
   void media(TAutoString arg0);

   //media:   [dispid 1006]
   TAutoString media();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLStyleFontFace
// {3050F3D5-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLStyleFontFace

DECLARE_INTERFACE_(IHTMLStyleFontFace, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLStyleFontFace methods:
   STDMETHOD_(HRESULT, Set_fontsrc) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_fontsrc) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLStyleFontFace* LPHTMLSTYLEFONTFACE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLStyleFontFace  {3050F3D5-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLStyleFontFaceProxy : public TAutoProxy
{
public:
   TIHTMLStyleFontFaceProxy() : TAutoProxy(0x0) {}

   //fontsrc:   [dispid -2147413015]
   void fontsrc(TAutoString arg0);

   //fontsrc:   [dispid -2147413015]
   TAutoString fontsrc();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLDialog
// {3050F216-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLDialog

DECLARE_INTERFACE_(IHTMLDialog, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLDialog methods:
   STDMETHOD_(HRESULT, Set_dialogTop) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_dialogTop) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_dialogLeft) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_dialogLeft) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_dialogWidth) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_dialogWidth) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_dialogHeight) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_dialogHeight) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_dialogArguments) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Get_menuArguments) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_returnValue) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_returnValue) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, close) (THIS ) PURE; 
   STDMETHOD_(HRESULT, toString) (THIS_ BSTR* String) PURE; 
};

typedef IHTMLDialog* LPHTMLDIALOG;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLDialog  {3050F216-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLDialogProxy : public TAutoProxy
{
public:
   TIHTMLDialogProxy() : TAutoProxy(0x0) {}

   //dialogTop:   [dispid -2147418108]
   void dialogTop(TAutoVal arg0);

   //dialogTop:   [dispid -2147418108]
   TAutoVal dialogTop();

   //dialogLeft:   [dispid -2147418109]
   void dialogLeft(TAutoVal arg0);

   //dialogLeft:   [dispid -2147418109]
   TAutoVal dialogLeft();

   //dialogWidth:   [dispid -2147418107]
   void dialogWidth(TAutoVal arg0);

   //dialogWidth:   [dispid -2147418107]
   TAutoVal dialogWidth();

   //dialogHeight:   [dispid -2147418106]
   void dialogHeight(TAutoVal arg0);

   //dialogHeight:   [dispid -2147418106]
   TAutoVal dialogHeight();

   //dialogArguments:   [dispid 25000]
   TAutoVal dialogArguments();

   //menuArguments:   [dispid 25013]
   TAutoVal menuArguments();

   //returnValue:   [dispid 25001]
   void returnValue(TAutoVal arg0);

   //returnValue:   [dispid 25001]
   TAutoVal returnValue();

   //close:   [dispid 25011]
   void close();

   //toString:   [dispid 25012]
   TAutoString toString();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLAreasCollection
// {3050F383-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLAreasCollection

DECLARE_INTERFACE_(IHTMLAreasCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLAreasCollection methods:
   STDMETHOD_(HRESULT, Set_length) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE; 
   STDMETHOD_(HRESULT, item) (THIS_ VARIANT name, VARIANT index, IDispatch** pdisp) PURE; 
   STDMETHOD_(HRESULT, tags) (THIS_ VARIANT tagName, IDispatch** pdisp) PURE; 
   STDMETHOD_(HRESULT, add) (THIS_ IHTMLElement* element, VARIANT before) PURE; 
   STDMETHOD_(HRESULT, remove) (THIS_ long index) PURE; 
};

typedef IHTMLAreasCollection* LPHTMLAREASCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLAreasCollection  {3050F383-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLAreasCollectionProxy : public TAutoProxy
{
public:
   TIHTMLAreasCollectionProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1500]
   void length(long arg0);

   //length:   [dispid 1500]
   long length();

   //_newEnum:   [dispid -4]
   void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

   //item:   [dispid 0]
   IDispatch* item(TAutoVal name = TNoArg(), TAutoVal index = TNoArg());

   //tags:   [dispid 1502]
   IDispatch* tags(TAutoVal tagName);

   //add:   [dispid 1503]
   void add(IHTMLElement* element, TAutoVal before = TNoArg());

   //remove:   [dispid 1504]
   void remove(long index);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLElementCollection
// {3050F21F-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLElementCollection

DECLARE_INTERFACE_(IHTMLElementCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLElementCollection methods:
   STDMETHOD_(HRESULT, toString) (THIS_ BSTR* String) PURE; 
   STDMETHOD_(HRESULT, Set_length) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE; 
   STDMETHOD_(HRESULT, item) (THIS_ VARIANT name, VARIANT index, IDispatch** pdisp) PURE; 
   STDMETHOD_(HRESULT, tags) (THIS_ VARIANT tagName, IDispatch** pdisp) PURE; 
};

typedef IHTMLElementCollection* LPHTMLELEMENTCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLElementCollection  {3050F21F-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLElementCollectionProxy : public TAutoProxy
{
public:
   TIHTMLElementCollectionProxy() : TAutoProxy(0x0) {}

   //toString:   [dispid 1501]
   TAutoString toString();

   //length:   [dispid 1500]
   void length(long arg0);

   //length:   [dispid 1500]
   long length();

   //_newEnum:   [dispid -4]
   void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

   //item:   [dispid 0]
   IDispatch* item(TAutoVal name = TNoArg(), TAutoVal index = TNoArg());

   //tags:   [dispid 1502]
   IDispatch* tags(TAutoVal tagName);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLEventObj
// {3050F32D-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLEventObj

DECLARE_INTERFACE_(IHTMLEventObj, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLEventObj methods:
   STDMETHOD_(HRESULT, Get_srcElement) (THIS_ IHTMLElement** p) PURE; 
   STDMETHOD_(HRESULT, Get_altKey) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_ctrlKey) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_shiftKey) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Set_returnValue) (THIS_ VARIANT p) PURE; 
   STDMETHOD_(HRESULT, Get_returnValue) (THIS_ VARIANT* p) PURE; 
   STDMETHOD_(HRESULT, Set_cancelBubble) (THIS_ VARIANT_BOOL p) PURE; 
   STDMETHOD_(HRESULT, Get_cancelBubble) (THIS_ VARIANT_BOOL* p) PURE; 
   STDMETHOD_(HRESULT, Get_fromElement) (THIS_ IHTMLElement** p) PURE; 
   STDMETHOD_(HRESULT, Get_toElement) (THIS_ IHTMLElement** p) PURE; 
   STDMETHOD_(HRESULT, Set_keyCode) (THIS_ long p) PURE; 
   STDMETHOD_(HRESULT, Get_keyCode) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_button) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_qualifier) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Get_reason) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_x) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_y) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_clientX) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_clientY) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_offsetX) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_offsetY) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_screenX) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_screenY) (THIS_ long* p) PURE; 
   STDMETHOD_(HRESULT, Get_srcFilter) (THIS_ IDispatch** p) PURE; 
};

typedef IHTMLEventObj* LPHTMLEVENTOBJ;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLEventObj  {3050F32D-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLEventObjProxy : public TAutoProxy
{
public:
   TIHTMLEventObjProxy() : TAutoProxy(0x0) {}

   //srcElement:   [dispid 1001]
   void srcElement(TIHTMLElementProxy& Obj);

   //altKey:   [dispid 1002]
   TBool altKey();

   //ctrlKey:   [dispid 1003]
   TBool ctrlKey();

   //shiftKey:   [dispid 1004]
   TBool shiftKey();

   //returnValue:   [dispid 1007]
   void returnValue(TAutoVal arg0);

   //returnValue:   [dispid 1007]
   TAutoVal returnValue();

   //cancelBubble:   [dispid 1008]
   void cancelBubble(TBool arg0);

   //cancelBubble:   [dispid 1008]
   TBool cancelBubble();

   //fromElement:   [dispid 1009]
   void fromElement(TIHTMLElementProxy& Obj);

   //toElement:   [dispid 1010]
   void toElement(TIHTMLElementProxy& Obj);

   //keyCode:   [dispid 1011]
   void keyCode(long arg0);

   //keyCode:   [dispid 1011]
   long keyCode();

   //button:   [dispid 1012]
   long button();

   //type:   [dispid 1013]
   TAutoString type();

   //qualifier:   [dispid 1014]
   TAutoString qualifier();

   //reason:   [dispid 1015]
   long reason();

   //x:   [dispid 1005]
   long x();

   //y:   [dispid 1006]
   long y();

   //clientX:   [dispid 1020]
   long clientX();

   //clientY:   [dispid 1021]
   long clientY();

   //offsetX:   [dispid 1022]
   long offsetX();

   //offsetY:   [dispid 1023]
   long offsetY();

   //screenX:   [dispid 1024]
   long screenX();

   //screenY:   [dispid 1025]
   long screenY();

   //srcFilter:   [dispid 1026]
   IDispatch* srcFilter();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLSelectionObject
// {3050F25A-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLSelectionObject

DECLARE_INTERFACE_(IHTMLSelectionObject, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLSelectionObject methods:
   STDMETHOD_(HRESULT, createRange) (THIS_ IDispatch** Range) PURE; 
   STDMETHOD_(HRESULT, empty) (THIS ) PURE; 
   STDMETHOD_(HRESULT, clear) (THIS ) PURE; 
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE; 
};

typedef IHTMLSelectionObject* LPHTMLSELECTIONOBJECT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLSelectionObject  {3050F25A-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLSelectionObjectProxy : public TAutoProxy
{
public:
   TIHTMLSelectionObjectProxy() : TAutoProxy(0x0) {}

   //createRange:   [dispid 1001]
   IDispatch* createRange();

   //empty:   [dispid 1002]
   void empty();

   //clear:   [dispid 1003]
   void clear();

   //type:   [dispid 1004]
   TAutoString type();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLTxtRange
// {3050F220-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLTxtRange

DECLARE_INTERFACE_(IHTMLTxtRange, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE; 
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE; 
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE; 
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE; 
#endif
   //IHTMLTxtRange methods:
   STDMETHOD_(HRESULT, Get_htmlText) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, Set_text) (THIS_ BSTR p) PURE; 
   STDMETHOD_(HRESULT, Get_text) (THIS_ BSTR* p) PURE; 
   STDMETHOD_(HRESULT, parentElement) (THIS_ IHTMLElement** Parent) PURE; 
   STDMETHOD_(HRESULT, duplicate) (THIS_ IHTMLTxtRange** duplicate) PURE; 
   STDMETHOD_(HRESULT, inRange) (THIS_ IHTMLTxtRange* Range, VARIANT_BOOL* inRange) PURE; 
   STDMETHOD_(HRESULT, isEqual) (THIS_ IHTMLTxtRange* Range, VARIANT_BOOL* isEqual) PURE; 
   STDMETHOD_(HRESULT, scrollIntoView) (THIS_ VARIANT_BOOL fStart) PURE; 
   STDMETHOD_(HRESULT, collapse) (THIS_ VARIANT_BOOL Start) PURE; 
   STDMETHOD_(HRESULT, expand) (THIS_ BSTR Unit, VARIANT_BOOL* Success) PURE; 
   STDMETHOD_(HRESULT, move) (THIS_ BSTR Unit, long Count, long* ActualCount) PURE; 
   STDMETHOD_(HRESULT, moveStart) (THIS_ BSTR Unit, long Count, long* ActualCount) PURE; 
   STDMETHOD_(HRESULT, moveEnd) (THIS_ BSTR Unit, long Count, long* ActualCount) PURE; 
   STDMETHOD_(HRESULT, select) (THIS ) PURE; 
   STDMETHOD_(HRESULT, pasteHTML) (THIS_ BSTR html) PURE; 
   STDMETHOD_(HRESULT, moveToElementText) (THIS_ IHTMLElement* element) PURE; 
   STDMETHOD_(HRESULT, setEndPoint) (THIS_ BSTR how, IHTMLTxtRange* SourceRange) PURE; 
   STDMETHOD_(HRESULT, compareEndPoints) (THIS_ BSTR how, IHTMLTxtRange* SourceRange, long* ret) PURE; 
   STDMETHOD_(HRESULT, findText) (THIS_ BSTR String, long Count, long Flags, VARIANT_BOOL* Success) PURE; 
   STDMETHOD_(HRESULT, moveToPoint) (THIS_ long x, long y) PURE; 
   STDMETHOD_(HRESULT, getBookmark) (THIS_ BSTR* Boolmark) PURE; 
   STDMETHOD_(HRESULT, moveToBookmark) (THIS_ BSTR Bookmark, VARIANT_BOOL* Success) PURE; 
   STDMETHOD_(HRESULT, queryCommandSupported) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE; 
   STDMETHOD_(HRESULT, queryCommandEnabled) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE; 
   STDMETHOD_(HRESULT, queryCommandState) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE; 
   STDMETHOD_(HRESULT, queryCommandIndeterm) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE; 
   STDMETHOD_(HRESULT, queryCommandText) (THIS_ BSTR cmdID, BSTR* pcmdText) PURE; 
   STDMETHOD_(HRESULT, queryCommandValue) (THIS_ BSTR cmdID, VARIANT* pcmdValue) PURE; 
   STDMETHOD_(HRESULT, execCommand) (THIS_ BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL* pfRet) PURE; 
   STDMETHOD_(HRESULT, execCommandShowHelp) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE; 
};

typedef IHTMLTxtRange* LPHTMLTXTRANGE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLTxtRange  {3050F220-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLTxtRangeProxy : public TAutoProxy
{
public:
   TIHTMLTxtRangeProxy() : TAutoProxy(0x0) {}

   //htmlText:   [dispid 1003]
   TAutoString htmlText();

   //text:   [dispid 1004]
   void text(TAutoString arg0);

   //text:   [dispid 1004]
   TAutoString text();

   //parentElement:   [dispid 1006]
   void parentElement(TIHTMLElementProxy& Obj);

   //duplicate:   [dispid 1008]
   void duplicate(TIHTMLTxtRangeProxy& Obj);

   //inRange:   [dispid 1010]
   TBool inRange(IHTMLTxtRange* Range);

   //isEqual:   [dispid 1011]
   TBool isEqual(IHTMLTxtRange* Range);

   //scrollIntoView:   [dispid 1012]
   void scrollIntoView(TBool fStart);

   //collapse:   [dispid 1013]
   void collapse(TBool Start);

   //expand:   [dispid 1014]
   TBool expand(TAutoString Unit);

   //move:   [dispid 1015]
   long move(TAutoString Unit, long Count);

   //moveStart:   [dispid 1016]
   long moveStart(TAutoString Unit, long Count);

   //moveEnd:   [dispid 1017]
   long moveEnd(TAutoString Unit, long Count);

   //select:   [dispid 1024]
   void select();

   //pasteHTML:   [dispid 1026]
   void pasteHTML(TAutoString html);

   //moveToElementText:   [dispid 1001]
   void moveToElementText(IHTMLElement* element);

   //setEndPoint:   [dispid 1025]
   void setEndPoint(TAutoString how, IHTMLTxtRange* SourceRange);

   //compareEndPoints:   [dispid 1018]
   long compareEndPoints(TAutoString how, IHTMLTxtRange* SourceRange);

   //findText:   [dispid 1019]
   TBool findText(TAutoString String, long Count, long Flags);

   //moveToPoint:   [dispid 1020]
   void moveToPoint(long x, long y);

   //getBookmark:   [dispid 1021]
   TAutoString getBookmark();

   //moveToBookmark:   [dispid 1009]
   TBool moveToBookmark(TAutoString Bookmark);

   //queryCommandSupported:   [dispid 1027]
   TBool queryCommandSupported(TAutoString cmdID);

   //queryCommandEnabled:   [dispid 1028]
   TBool queryCommandEnabled(TAutoString cmdID);

   //queryCommandState:   [dispid 1029]
   TBool queryCommandState(TAutoString cmdID);

   //queryCommandIndeterm:   [dispid 1030]
   TBool queryCommandIndeterm(TAutoString cmdID);

   //queryCommandText:   [dispid 1031]
   TAutoString queryCommandText(TAutoString cmdID);

   //queryCommandValue:   [dispid 1032]
   TAutoVal queryCommandValue(TAutoString cmdID);

   //execCommand:   [dispid 1033]
   TBool execCommand(TAutoString cmdID, TBool showUI, TAutoVal value = TNoArg());

   //execCommandShowHelp:   [dispid 1034]
   TBool execCommandShowHelp(TAutoString cmdID);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ICSSFilterSite
// {3050F3ED-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE ICSSFilterSite

DECLARE_INTERFACE_(ICSSFilterSite, IUnknown)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
   //ICSSFilterSite methods:
   STDMETHOD_(HRESULT, GetElement) (THIS_ IHTMLElement** ppElem) PURE; 
   STDMETHOD_(HRESULT, FireOnFilterChangeEvent) (THIS ) PURE; 
};

typedef ICSSFilterSite* LPCSSFILTERSITE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ICSSFilterSite  {3050F3ED-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL ]
class _PWCLASS TICSSFilterSiteProxy : public TAutoProxy
{
public:
   TICSSFilterSiteProxy() : TAutoProxy(0x0) {}

   //GetElement:   [dispid 1610678272]
   void GetElement(TIHTMLElementProxy& Obj);

   //FireOnFilterChangeEvent:   [dispid 1610678273]
   void FireOnFilterChangeEvent();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// ICSSFilter
// {3050F3EC-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE ICSSFilter

DECLARE_INTERFACE_(ICSSFilter, IUnknown)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE; 
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE; 
   STDMETHOD_(unsigned long, Release) (THIS ) PURE; 
#endif
   //ICSSFilter methods:
   STDMETHOD_(HRESULT, SetSite) (THIS_ ICSSFilterSite* pSink) PURE; 
   STDMETHOD_(HRESULT, OnAmbientPropertyChange) (THIS_ long dispid) PURE; 
};

typedef ICSSFilter* LPCSSFILTER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// ICSSFilter  {3050F3EC-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL ]
class _PWCLASS TICSSFilterProxy : public TAutoProxy
{
public:
   TICSSFilterProxy() : TAutoProxy(0x0) {}

   //SetSite:   [dispid 1610678272]
   void SetSite(ICSSFilterSite* pSink);

   //OnAmbientPropertyChange:   [dispid 1610678273]
   void OnAmbientPropertyChange(long dispid);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLControlRange
// {3050F29C-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLControlRange

DECLARE_INTERFACE_(IHTMLControlRange, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLControlRange methods:
   STDMETHOD_(HRESULT, select) (THIS ) PURE;
   STDMETHOD_(HRESULT, add) (THIS_ IHTMLControlElement* item) PURE;
   STDMETHOD_(HRESULT, remove) (THIS_ long index) PURE;
   STDMETHOD_(HRESULT, item) (THIS_ long index, IHTMLElement** pdisp) PURE;
   STDMETHOD_(HRESULT, scrollIntoView) (THIS_ VARIANT varargStart) PURE;
   STDMETHOD_(HRESULT, queryCommandSupported) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, queryCommandEnabled) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, queryCommandState) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, queryCommandIndeterm) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, queryCommandText) (THIS_ BSTR cmdID, BSTR* pcmdText) PURE;
   STDMETHOD_(HRESULT, queryCommandValue) (THIS_ BSTR cmdID, VARIANT* pcmdValue) PURE;
   STDMETHOD_(HRESULT, execCommand) (THIS_ BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, execCommandShowHelp) (THIS_ BSTR cmdID, VARIANT_BOOL* pfRet) PURE;
   STDMETHOD_(HRESULT, commonParentElement) (THIS_ IHTMLElement** Parent) PURE;
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE;
};

typedef IHTMLControlRange* LPHTMLCONTROLRANGE;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLControlRange  {3050F29C-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLControlRangeProxy : public TAutoProxy
{
public:
   TIHTMLControlRangeProxy() : TAutoProxy(0x0) {}

   //select:   [dispid 1002]
   void select();

   //add:   [dispid 1003]
   void add(IHTMLControlElement* item);

   //remove:   [dispid 1004]
   void remove(long index);

   //item:   [dispid 0]
   void item(TIHTMLElementProxy& Obj, long index);

   //scrollIntoView:   [dispid 1006]
   void scrollIntoView(TAutoVal varargStart = TNoArg());

   //queryCommandSupported:   [dispid 1007]
   TBool queryCommandSupported(TAutoString cmdID);

   //queryCommandEnabled:   [dispid 1008]
   TBool queryCommandEnabled(TAutoString cmdID);

   //queryCommandState:   [dispid 1009]
   TBool queryCommandState(TAutoString cmdID);

   //queryCommandIndeterm:   [dispid 1010]
   TBool queryCommandIndeterm(TAutoString cmdID);

   //queryCommandText:   [dispid 1011]
   TAutoString queryCommandText(TAutoString cmdID);

   //queryCommandValue:   [dispid 1012]
   TAutoVal queryCommandValue(TAutoString cmdID);

   //execCommand:   [dispid 1013]
   TBool execCommand(TAutoString cmdID, TBool showUI, TAutoVal value = TNoArg());

   //execCommandShowHelp:   [dispid 1014]
   TBool execCommandShowHelp(TAutoString cmdID);

   //commonParentElement:   [dispid 1015]
   void commonParentElement(TIHTMLElementProxy& Obj);

   //length:   [dispid 1005]
   long length();
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLInputHiddenElement
// {3050F2A4-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLInputHiddenElement

DECLARE_INTERFACE_(IHTMLInputHiddenElement, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLInputHiddenElement methods:
   STDMETHOD_(HRESULT, Get_type) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_value) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_value) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_name) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_name) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_status) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_status) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_disabled) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_disabled) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, Get_form) (THIS_ IHTMLFormElement** p) PURE;
   STDMETHOD_(HRESULT, createTextRange) (THIS_ IHTMLTxtRange** Range) PURE;
};

typedef IHTMLInputHiddenElement* LPHTMLINPUTHIDDENELEMENT;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLInputHiddenElement  {3050F2A4-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLInputHiddenElementProxy : public TIHTMLElementProxy
{
public:
   TIHTMLInputHiddenElementProxy() : TIHTMLElementProxy(0x0) {}

   //type:   [dispid 2000]
   TAutoString type();

   //value:   [dispid -2147413011]
   void value(TAutoString arg0);

   //value:   [dispid -2147413011]
   TAutoString value();

   //name:   [dispid -2147418112]
   void name(TAutoString arg0);

   //name:   [dispid -2147418112]
   TAutoString name();

   //status:   [dispid 2001]
   void status(TAutoVal arg0);

   //status:   [dispid 2001]
   TAutoVal status();

   //disabled:   [dispid -2147418036]
   void disabled(TBool arg0);

   //disabled:   [dispid -2147418036]
   TBool disabled();

   //form:   [dispid -2147416108]
   void form(TIHTMLFormElementProxy& Obj);

   //createTextRange:   [dispid 3005]
   void createTextRange(TIHTMLTxtRangeProxy& Obj);
};

#endif


#ifdef __cplusplus
// IHTMLFramesCollection2  {332C4426-26CB-11D0-B483-00C04FD90119}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFramesCollection2Proxy : public TAutoProxy
{
public:
   TIHTMLFramesCollection2Proxy() : TAutoProxy(0x0) {}

   //item:   [dispid 0]
   TAutoVal item(TAutoVal* pvarIndex);

   //length:   [dispid 1001]
   long length();
};

#endif


#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFontNamesCollection
// {3050F376-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFontNamesCollection

DECLARE_INTERFACE_(IHTMLFontNamesCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLFontNamesCollection methods:
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE;
   STDMETHOD_(HRESULT, item) (THIS_ long index, BSTR* pBstr) PURE;
};

typedef IHTMLFontNamesCollection* LPHTMLFONTNAMESCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFontNamesCollection  {3050F376-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFontNamesCollectionProxy : public TAutoProxy
{
public:
   TIHTMLFontNamesCollectionProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1501]
   long length();

   //_newEnum:   [dispid -4]
   void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

   //item:   [dispid 0]
   TAutoString item(long index);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLFontSizesCollection
// {3050F377-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLFontSizesCollection

DECLARE_INTERFACE_(IHTMLFontSizesCollection, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLFontSizesCollection methods:
   STDMETHOD_(HRESULT, Get_length) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Get__newEnum) (THIS_ IUnknown** p) PURE;
   STDMETHOD_(HRESULT, Get_forFont) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, item) (THIS_ long index, long* plSize) PURE;
};

typedef IHTMLFontSizesCollection* LPHTMLFONTSIZESCOLLECTION;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLFontSizesCollection  {3050F377-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLFontSizesCollectionProxy : public TAutoProxy
{
public:
   TIHTMLFontSizesCollectionProxy() : TAutoProxy(0x0) {}

   //length:   [dispid 1502]
   long length();

   //_newEnum:   [dispid -4]
   void _newEnum(TAutoEnumerator<IUnknown*>& Obj);

   //forFont:   [dispid 1503]
   TAutoString forFont();

   //item:   [dispid 0]
   long item(long index);
};

#endif

#ifdef __cplusplus
extern "C" {            /* Assume C declarations for C++ */
#endif  /* __cplusplus */

// IHTMLOptionsHolder
// {3050F378-98B5-11CF-BB82-00AA00BDCE0B}

#undef  INTERFACE
#define INTERFACE IHTMLOptionsHolder

DECLARE_INTERFACE_(IHTMLOptionsHolder, IDispatch)
{
#ifndef __cplusplus
   //IUnknown methods:
   STDMETHOD_(HRESULT, QueryInterface) (THIS_ GUID* riid, void** ppvObj) PURE;
   STDMETHOD_(unsigned long, AddRef) (THIS ) PURE;
   STDMETHOD_(unsigned long, Release) (THIS ) PURE;
   //IDispatch methods:
   STDMETHOD_(HRESULT, GetTypeInfoCount) (THIS_ unsigned int* pctinfo) PURE;
   STDMETHOD_(HRESULT, GetTypeInfo) (THIS_ unsigned int itinfo, unsigned long lcid, void** pptinfo) PURE;
   STDMETHOD_(HRESULT, GetIDsOfNames) (THIS_ GUID* riid, signed char** rgszNames, unsigned int cNames, unsigned long lcid, long* rgdispid) PURE;
   STDMETHOD_(HRESULT, Invoke) (THIS_ long dispidMember, GUID* riid, unsigned long lcid, unsigned short wFlags, DISPPARAMS* pdispparams, VARIANT* pvarResult, EXCEPINFO* pexcepinfo, unsigned int* puArgErr) PURE;
#endif
   //IHTMLOptionsHolder methods:
   STDMETHOD_(HRESULT, Get_document) (THIS_ IHTMLDocument2** p) PURE;
   STDMETHOD_(HRESULT, Get_fonts) (THIS_ IHTMLFontNamesCollection** p) PURE;
   STDMETHOD_(HRESULT, Set_execArg) (THIS_ VARIANT p) PURE;
   STDMETHOD_(HRESULT, Get_execArg) (THIS_ VARIANT* p) PURE;
   STDMETHOD_(HRESULT, Set_errorLine) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_errorLine) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_errorCharacter) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_errorCharacter) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_errorCode) (THIS_ long p) PURE;
   STDMETHOD_(HRESULT, Get_errorCode) (THIS_ long* p) PURE;
   STDMETHOD_(HRESULT, Set_errorMessage) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_errorMessage) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_errorDebug) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_errorDebug) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, Get_unsecuredWindowOfDocument) (THIS_ IHTMLWindow2** p) PURE;
   STDMETHOD_(HRESULT, Set_findText) (THIS_ BSTR p) PURE;
   STDMETHOD_(HRESULT, Get_findText) (THIS_ BSTR* p) PURE;
   STDMETHOD_(HRESULT, Set_anythingAfterFrameset) (THIS_ VARIANT_BOOL p) PURE;
   STDMETHOD_(HRESULT, Get_anythingAfterFrameset) (THIS_ VARIANT_BOOL* p) PURE;
   STDMETHOD_(HRESULT, sizes) (THIS_ BSTR fontName, IHTMLFontSizesCollection** pSizesCollection) PURE;
   STDMETHOD_(HRESULT, openfiledlg) (THIS_ VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR* pathname) PURE;
   STDMETHOD_(HRESULT, savefiledlg) (THIS_ VARIANT initFile, VARIANT initDir, VARIANT filter, VARIANT title, BSTR* pathname) PURE;
   STDMETHOD_(HRESULT, choosecolordlg) (THIS_ VARIANT initColor, long* rgbColor) PURE;
   STDMETHOD_(HRESULT, showSecurityInfo) (THIS ) PURE;
   STDMETHOD_(HRESULT, isApartmentModel) (THIS_ IHTMLObjectElement* object, VARIANT_BOOL* fApartment) PURE;
   STDMETHOD_(HRESULT, getCharset) (THIS_ BSTR fontName, long* charset) PURE;
};

typedef IHTMLOptionsHolder* LPHTMLOPTIONSHOLDER;

#ifdef __cplusplus
}
#endif  /* __cplusplus */

#ifdef __cplusplus
// IHTMLOptionsHolder  {3050F378-98B5-11CF-BB82-00AA00BDCE0B}
//  [flags: TYPEFLAG_FDUAL TYPEFLAG_FDISPATCHABLE ]
class _PWCLASS TIHTMLOptionsHolderProxy : public TAutoProxy
{
public:
   TIHTMLOptionsHolderProxy() : TAutoProxy(0x0) {}

   //document:   [dispid 1503]
   void document(TIHTMLDocument2Proxy& Obj);

   //fonts:   [dispid 1504]
   void fonts(TIHTMLFontNamesCollectionProxy& Obj);

   //execArg:   [dispid 1505]
   void execArg(TAutoVal arg0);

   //execArg:   [dispid 1505]
   TAutoVal execArg();

   //errorLine:   [dispid 1506]
   void errorLine(long arg0);

   //errorLine:   [dispid 1506]
   long errorLine();

   //errorCharacter:   [dispid 1507]
   void errorCharacter(long arg0);

   //errorCharacter:   [dispid 1507]
   long errorCharacter();

   //errorCode:   [dispid 1508]
   void errorCode(long arg0);

   //errorCode:   [dispid 1508]
   long errorCode();

   //errorMessage:   [dispid 1509]
   void errorMessage(TAutoString arg0);

   //errorMessage:   [dispid 1509]
   TAutoString errorMessage();

   //errorDebug:   [dispid 1510]
   void errorDebug(TBool arg0);

   //errorDebug:   [dispid 1510]
   TBool errorDebug();

   //unsecuredWindowOfDocument:   [dispid 1511]
   void unsecuredWindowOfDocument(TIHTMLWindow2Proxy& Obj);

   //findText:   [dispid 1512]
   void findText(TAutoString arg0);

   //findText:   [dispid 1512]
   TAutoString findText();

   //anythingAfterFrameset:   [dispid 1513]
   void anythingAfterFrameset(TBool arg0);

   //anythingAfterFrameset:   [dispid 1513]
   TBool anythingAfterFrameset();

   //sizes:   [dispid 1514]
   void sizes(TIHTMLFontSizesCollectionProxy& Obj, TAutoString fontName);

   //openfiledlg:   [dispid 1515]
   TAutoString openfiledlg(TAutoVal initFile = TNoArg(), TAutoVal initDir = TNoArg(), TAutoVal filter = TNoArg(), TAutoVal title = TNoArg());

   //savefiledlg:   [dispid 1516]
   TAutoString savefiledlg(TAutoVal initFile = TNoArg(), TAutoVal initDir = TNoArg(), TAutoVal filter = TNoArg(), TAutoVal title = TNoArg());

   //choosecolordlg:   [dispid 1517]
   long choosecolordlg(TAutoVal initColor = TNoArg());

   //showSecurityInfo:   [dispid 1518]
   void showSecurityInfo();

   //isApartmentModel:   [dispid 1519]
   TBool isApartmentModel(IHTMLObjectElement* object);

   //getCharset:   [dispid 1520]
   long getCharset(TAutoString fontName);
};

#endif

#include <poppack.h>


#endif
